// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Material.fx
// Namespace = Xen.Ex.Material

namespace Xen.Ex.Material
{
	
	/// <summary><para>Technique 'vs0' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 30 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs0 : Xen.Graphics.ShaderSystem.BaseShader, IMS_Base
	{
		/// <summary>Construct an instance of the 'vs0' shader</summary>
		public vs0()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs0.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs0.cid0 = state.GetNameUniqueID("v_SH");
			vs0.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs0.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			vs0.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs0.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs0.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs0.tid0 = state.GetNameUniqueID("CustomTexture");
			vs0.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs0.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs0.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs0.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs0.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs0.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs0.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs0.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs0.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs0.fx, vs0.fxb, 32, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0.vin[i]));
			index = vs0.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,108,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,72,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,240,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,88,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,124,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,160,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,84,1,0,1,0,1,1,1,112,138,0,0,1,14,1,252,1,0,1,0,1,15,1,24,138,0,0,1,15,1,100,1,0,1,0,1,15,1,120,138,0,0,1,15,1,136,1,0,1,0,1,15,1,156,138,0,0,1,16,1,96,135,0,0,1,3,1,0,1,0,1,15,1,220,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,176,1,0,1,0,1,15,1,172,131,0,0,1,93,134,0,0,1,15,1,200,1,0,1,0,1,15,1,196,1,0,1,0,1,16,1,16,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,228,1,0,1,0,1,15,1,224,131,0,0,1,93,134,0,0,1,15,1,252,1,0,1,0,1,15,1,248,1,0,1,0,1,16,1,80,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,36,1,0,1,0,1,16,1,32,131,0,0,1,93,134,0,0,1,16,1,60,1,0,1,0,1,16,1,56,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,4,1,124,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,116,1,0,1,0,1,2,1,8,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,200,1,0,1,81,1,0,1,6,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,12,1,0,1,8,1,0,1,13,1,0,1,9,1,0,1,14,1,0,1,10,1,0,1,47,1,0,1,11,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,31,131,0,0,1,32,1,0,1,0,1,16,1,33,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,26,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,27,1,0,1,0,1,16,1,25,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,16,1,11,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,12,1,194,1,0,1,18,133,0,0,1,32,1,18,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,80,1,32,1,0,1,0,1,34,133,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,6,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,6,1,4,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,6,1,5,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,6,1,2,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,4,1,0,1,177,1,180,1,0,1,225,1,1,1,4,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,5,1,4,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,18,1,224,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,172,1,0,1,0,1,3,1,52,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,244,1,0,1,81,1,0,1,8,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,7,1,0,1,0,1,48,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,16,1,10,1,0,1,32,1,32,1,11,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,56,131,0,0,1,57,1,0,1,0,1,16,1,58,1,0,1,0,1,16,1,61,1,0,1,0,1,16,1,50,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,49,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,7,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,16,1,36,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,16,1,61,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,8,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,8,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,6,1,14,1,0,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,6,1,15,1,0,1,92,1,15,1,0,1,5,1,160,1,27,1,136,1,177,1,161,1,6,1,16,1,8,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,6,1,16,1,5,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,14,1,4,1,92,1,2,1,0,1,8,1,0,131,27,0,1,161,1,1,1,0,1,8,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,14,1,4,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,6,1,16,1,5,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,8,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,6,1,16,1,5,1,200,1,15,1,0,1,2,1,160,1,108,1,255,1,143,1,171,1,6,1,15,1,2,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,14,1,4,1,200,1,2,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,1,0,1,4,1,0,1,248,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,8,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,4,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,4,1,2,1,0,1,20,1,17,1,0,1,8,1,0,1,195,1,190,1,27,1,176,1,4,1,0,1,1,1,168,1,36,1,7,1,8,1,0,1,195,1,190,1,0,1,144,1,4,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,8,1,8,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,2,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,5,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,7,1,5,1,20,1,17,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,4,1,1,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,1,1,1,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,3,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,177,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,3,1,196,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,248,1,0,1,0,1,1,1,204,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,140,1,0,1,81,1,0,1,3,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,32,1,80,1,6,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,27,131,0,0,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,31,1,0,1,0,1,16,1,19,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,25,1,0,1,0,1,16,1,18,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,7,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,11,1,96,1,17,1,18,1,0,1,18,133,0,0,1,96,1,23,1,48,1,29,1,18,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,1,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,4,1,0,1,200,1,2,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,6,1,0,1,200,1,8,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,3,1,7,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,2,1,2,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,2,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,192,1,0,1,160,1,2,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {128,51,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,86,191,153,252,254,107,227,239,95,195,252,243,107,252,26,191,9,253,255,215,113,127,254,255,250,249,245,232,255,191,255,101,243,251,79,127,13,71,135,111,235,192,127,173,95,227,246,116,96,56,171,16,206,255,244,155,200,119,255,214,175,113,123,56,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,121,126,253,95,131,227,189,9,2,53,19,167,253,222,191,169,124,247,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,159,209,126,130,54,20,51,54,59,174,205,95,52,212,102,87,240,250,205,180,157,255,32,78,197,107,221,207,205,56,48,206,223,44,242,61,254,142,189,247,99,244,255,39,101,190,156,21,203,139,95,99,93,231,191,238,192,251,136,121,99,239,255,134,244,255,179,101,211,102,203,41,32,240,24,94,207,179,89,94,203,59,191,166,182,193,231,120,55,245,222,253,141,232,203,45,111,2,222,208,239,43,239,239,255,131,98,234,223,206,163,209,140,126,127,231,253,253,71,209,239,127,158,255,253,111,38,63,65,131,127,79,63,7,189,254,20,253,254,111,162,207,254,58,250,255,159,170,127,255,83,244,251,63,70,255,255,173,244,61,191,237,127,69,159,255,103,94,91,16,229,255,160,191,223,68,218,110,209,103,191,219,111,230,218,254,158,244,251,99,109,247,235,201,15,110,255,127,211,99,134,247,24,31,252,218,255,247,255,253,127,253,223,191,199,175,113,242,230,248,201,239,68,127,254,147,191,134,124,6,252,127,39,110,245,107,164,255,16,253,243,123,235,251,191,22,253,247,7,208,207,21,253,255,79,250,53,12,79,255,90,191,198,159,165,48,255,42,254,236,215,164,255,126,189,95,227,111,210,207,36,79,241,215,254,181,191,38,127,243,235,48,156,219,60,202,171,127,237,175,67,220,250,107,242,127,222,231,187,253,207,233,227,123,191,255,206,175,241,69,49,173,171,166,58,111,211,173,87,119,210,111,63,127,253,60,21,110,72,79,170,197,170,40,233,151,135,227,189,79,199,15,239,239,141,247,14,246,247,127,141,223,133,134,69,60,247,7,17,135,252,73,248,61,161,223,127,205,95,227,55,253,147,228,243,95,243,15,250,181,244,247,95,3,67,254,13,126,211,191,200,252,254,107,210,239,79,152,4,191,41,181,249,207,232,187,255,236,47,34,56,191,246,175,249,107,252,250,4,235,63,227,255,255,186,252,253,175,79,240,248,239,63,137,112,253,181,126,205,95,227,183,164,246,255,195,159,244,235,234,187,104,247,107,254,26,95,105,91,243,247,127,246,39,253,58,204,174,12,235,47,250,53,25,63,124,78,125,255,6,191,1,253,254,127,255,65,79,184,47,233,251,215,164,190,77,251,95,83,222,255,139,208,254,55,229,254,126,77,106,255,107,232,239,191,22,253,254,149,254,254,235,208,239,127,77,7,199,255,251,47,250,77,184,15,121,71,126,151,119,228,119,121,231,255,254,191,133,230,134,167,126,13,125,90,8,216,175,253,127,17,79,181,150,167,254,220,95,83,62,67,91,195,83,127,26,125,246,84,223,255,77,126,141,143,126,141,231,244,243,247,165,255,63,230,1,254,38,44,167,79,127,77,145,71,201,151,57,254,209,52,215,255,239,31,213,231,118,220,93,189,247,117,159,203,175,41,39,63,241,107,252,26,196,42,191,233,95,68,108,241,123,248,240,84,30,254,160,95,67,229,228,215,14,228,231,215,240,228,231,55,250,131,126,109,251,251,111,252,7,253,58,246,247,223,132,120,208,252,254,155,254,65,191,158,147,55,192,252,143,12,28,146,43,254,61,17,152,250,249,175,9,152,250,251,175,5,152,250,251,175,13,152,250,251,175,67,48,127,253,255,136,89,75,228,139,101,239,215,228,223,191,162,119,68,214,228,239,95,131,224,65,78,255,179,63,200,125,6,25,113,159,9,140,255,155,96,202,103,63,198,242,243,107,254,71,144,183,223,132,228,78,254,254,181,254,35,145,63,243,247,175,195,127,255,102,246,239,223,128,255,254,205,69,182,127,45,232,140,95,83,241,250,181,248,119,31,175,223,16,114,79,120,253,101,127,210,175,245,107,252,101,138,23,218,24,188,126,249,31,244,187,17,140,95,75,101,248,215,228,223,127,3,140,133,251,34,249,255,143,72,71,252,65,191,129,246,77,58,128,255,254,49,251,247,175,195,127,39,138,11,104,245,107,89,56,191,254,127,4,56,10,243,63,250,141,127,141,191,134,127,255,181,127,141,95,27,109,8,31,67,199,255,236,15,254,13,245,125,204,193,175,193,253,49,93,24,167,223,72,191,195,156,224,239,95,75,191,3,189,127,99,133,175,122,138,245,216,175,205,244,193,119,95,253,197,24,251,175,27,180,255,74,113,248,117,184,141,209,62,80,51,190,125,251,54,27,172,136,125,251,181,254,63,107,223,246,190,142,220,58,89,250,245,255,166,174,172,226,119,154,63,243,249,160,125,163,57,251,155,96,223,140,205,193,223,176,57,134,95,187,246,238,215,146,191,255,38,225,155,223,28,188,170,191,255,22,244,251,255,253,55,249,182,238,215,234,216,190,95,67,249,94,225,254,69,191,150,218,62,199,247,98,223,208,199,111,202,48,193,99,191,134,254,254,107,253,65,144,29,249,253,215,249,131,68,70,196,38,11,78,106,223,244,29,249,93,222,145,223,229,29,224,74,180,224,126,187,252,165,211,241,107,252,93,191,5,253,243,107,193,214,253,99,191,182,225,175,127,247,55,145,207,64,64,195,95,255,218,111,226,219,186,95,171,103,235,254,173,95,227,71,182,78,99,36,59,238,127,235,198,55,126,244,252,232,249,209,243,255,150,231,71,120,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,255,227,185,252,154,57,135,159,160,92,225,127,193,185,194,223,243,247,244,243,133,221,252,195,80,174,16,177,185,201,21,34,254,71,174,208,228,8,144,23,251,47,40,79,52,102,88,191,233,223,164,121,7,206,203,253,218,191,198,87,127,210,111,146,34,247,253,213,223,244,235,72,190,242,15,146,191,127,141,191,233,215,230,148,14,231,17,188,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,254,99,146,67,251,131,144,151,232,228,181,254,36,211,247,175,165,125,255,166,94,223,248,236,55,245,250,254,181,180,15,247,185,244,221,255,92,250,254,181,108,223,191,22,247,253,107,217,190,127,45,238,251,215,234,244,253,155,117,250,254,205,6,250,254,205,6,250,254,205,162,125,255,58,157,190,127,29,219,183,228,236,126,3,250,254,255,254,147,126,76,104,242,15,233,58,135,201,129,254,67,38,87,35,127,255,58,252,247,175,229,114,160,252,55,229,91,255,34,192,70,30,71,230,193,252,205,227,70,142,83,255,102,92,144,119,253,139,126,55,158,123,201,233,112,26,133,240,248,47,40,47,168,120,252,71,50,79,97,46,214,228,59,77,46,214,228,59,127,29,206,113,26,56,191,254,191,244,95,104,126,145,96,254,75,38,223,249,107,106,190,83,225,115,14,234,215,113,240,249,239,95,215,193,231,191,127,61,251,247,111,192,127,255,250,146,203,234,229,75,145,203,30,202,151,34,183,61,148,47,69,191,192,85,242,98,46,95,250,107,216,124,154,105,47,227,249,53,121,220,46,95,138,231,71,249,210,31,229,75,127,182,242,165,120,252,124,233,239,13,230,224,124,233,239,99,249,235,238,175,41,159,225,135,225,175,45,250,99,231,215,96,224,156,47,61,160,159,223,254,53,126,254,230,70,63,196,6,255,38,108,131,223,127,189,78,245,220,63,164,54,207,234,115,252,237,235,115,181,13,86,159,227,111,163,207,141,141,52,250,92,248,6,107,92,230,111,177,37,70,159,155,117,115,209,85,191,1,248,203,234,115,240,176,175,207,241,183,175,207,241,183,175,207,127,77,133,3,125,14,56,242,251,176,62,255,53,20,79,133,207,127,251,250,252,215,80,60,117,156,252,247,55,173,207,225,99,0,215,174,62,135,220,221,164,207,255,159,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs0.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs0.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs0.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs0.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs1' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 55 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs1 : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex
	{
		/// <summary>Construct an instance of the 'vs1' shader</summary>
		public vs1()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs1.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs1.cid0 = state.GetNameUniqueID("v_SH");
			vs1.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs1.cid2 = state.GetNameUniqueID("v_lights");
			vs1.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs1.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs1.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs1.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs1.tid0 = state.GetNameUniqueID("CustomTexture");
			vs1.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs1.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[15], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[14], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs1.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs1.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs1.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs1.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs1.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs1.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs1.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs1.fx, vs1.fxb, 53, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1.vin[i]));
			index = vs1.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[11] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[12] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[16] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 8)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[17];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,156,135,0,1,3,131,0,5,1,0,0,1,48,135,0,1,17,131,0,1,4,131,0,1,1,229,0,0,229,0,0,201,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,60,1,0,1,0,1,1,1,88,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,16,1,144,135,0,0,1,3,1,0,1,0,1,16,1,12,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,224,1,0,1,0,1,15,1,220,131,0,0,1,93,134,0,0,1,15,1,248,1,0,1,0,1,15,1,244,1,0,1,0,1,16,1,64,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,20,1,0,1,0,1,16,1,16,131,0,0,1,93,134,0,0,1,16,1,44,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,128,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,84,1,0,1,0,1,16,1,80,131,0,0,1,93,134,0,0,1,16,1,108,1,0,1,0,1,16,1,104,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,5,1,100,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,156,1,0,1,0,1,2,1,200,135,0,0,1,36,1,0,1,0,1,2,131,0,0,1,2,1,40,138,0,0,1,1,1,216,131,0,0,1,28,1,0,1,0,1,1,1,203,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,196,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,4,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,136,1,0,1,81,1,0,1,6,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,12,1,0,1,9,1,0,1,13,1,0,1,10,1,0,1,14,1,0,1,11,1,0,1,47,1,0,1,12,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,16,1,12,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,13,1,194,1,0,1,18,133,0,0,1,32,1,19,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,32,1,51,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,6,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,6,1,4,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,6,1,5,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,6,1,2,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,18,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,19,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,0,1,177,1,180,1,0,1,225,1,1,1,4,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,5,1,4,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,3,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,12,1,252,1,108,1,160,1,3,1,14,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,14,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,149,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,19,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,212,1,0,1,0,1,3,1,244,135,0,0,1,36,1,0,1,0,1,15,1,64,1,0,1,0,1,15,1,104,138,0,0,1,15,1,24,131,0,0,1,28,1,0,1,0,1,15,1,11,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,4,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,216,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,180,1,0,1,81,1,0,1,8,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,16,1,11,1,0,1,32,1,32,1,12,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,55,1,0,1,0,1,16,1,50,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,8,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,16,1,37,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,96,1,62,1,96,1,68,1,18,1,0,1,18,133,0,0,1,64,1,74,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,8,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,8,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,6,1,17,1,0,1,200,1,15,1,0,1,5,1,160,1,27,1,136,1,0,1,161,1,6,1,18,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,6,1,19,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,19,1,4,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,6,1,17,1,2,1,92,1,2,1,0,1,8,1,0,131,27,0,1,161,1,1,1,0,1,8,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,6,1,17,1,2,1,200,1,15,1,0,1,5,1,160,1,177,1,52,1,148,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,19,1,4,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,6,1,19,1,4,1,200,1,15,1,0,1,5,1,160,1,108,1,255,1,143,1,171,1,6,1,18,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,17,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,248,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,2,1,3,1,0,1,200,1,4,1,0,1,7,1,0,1,190,1,190,1,0,1,176,1,2,1,2,1,0,1,20,1,17,1,0,1,8,1,0,1,190,1,190,1,27,1,176,1,2,1,0,1,1,1,168,1,36,1,7,1,8,1,0,1,190,1,190,1,0,1,144,1,2,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,8,1,8,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,5,1,3,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,4,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,7,1,5,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,5,1,4,1,1,1,168,1,66,1,4,1,2,1,0,1,190,1,190,1,0,1,144,1,5,1,5,1,6,1,20,1,20,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,5,1,6,1,1,1,168,1,136,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,7,1,200,1,15,1,0,1,1,1,0,1,167,1,167,1,0,1,224,1,3,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,1,1,14,1,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,1,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,150,1,252,1,27,1,160,1,1,1,14,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,150,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,4,1,172,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,32,1,0,1,0,1,2,1,140,135,0,0,1,36,1,0,1,0,1,1,1,148,1,0,1,0,1,1,1,188,138,0,0,1,1,1,108,131,0,0,1,28,1,0,1,0,1,1,1,95,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,17,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,76,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,32,1,80,1,7,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,47,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,19,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,8,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,3,1,0,1,200,1,1,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,6,1,0,1,200,1,8,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,2,1,7,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,16,1,200,1,15,1,128,1,2,132,0,0,1,226,1,1,1,1,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,1,1,14,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,1,1,8,1,8,1,200,1,14,1,0,1,1,1,4,1,252,1,252,1,0,1,160,1,1,1,14,1,0,1,200,1,1,1,0,1,2,1,0,1,195,1,195,1,0,1,240,1,1,1,1,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,88,1,130,1,0,1,2,1,0,1,190,1,190,1,27,1,240,1,4,1,4,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,1,1,0,1,1,1,0,1,177,1,27,1,108,1,139,1,2,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,177,1,160,1,0,1,16,1,130,1,168,1,135,1,0,1,3,1,0,1,192,1,27,1,128,1,193,1,3,1,0,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,141,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {208,55,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,162,223,76,126,255,181,241,55,253,127,231,215,148,191,127,115,250,255,175,163,159,253,232,9,159,95,143,254,255,251,95,54,191,255,244,215,112,116,123,167,132,250,181,126,141,219,211,141,225,172,66,56,233,111,42,223,253,91,191,198,237,225,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,230,249,245,127,13,142,247,38,8,212,76,156,246,71,105,156,246,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,191,78,251,9,218,80,204,216,236,184,54,255,210,80,155,221,95,227,15,2,94,191,153,182,243,31,196,169,120,173,251,185,140,227,31,254,109,48,206,223,44,242,61,254,142,189,247,99,244,255,39,101,190,156,21,203,11,16,233,215,29,120,31,49,111,236,253,223,144,254,127,182,108,218,108,57,5,4,30,195,235,121,54,203,235,95,227,215,193,59,191,166,182,193,231,120,55,245,222,125,76,95,254,222,222,4,252,97,244,251,95,228,253,61,162,14,191,237,209,232,79,163,223,255,42,239,239,191,139,126,255,231,252,239,127,51,249,9,26,252,70,250,59,232,245,167,232,247,255,17,181,253,247,232,255,127,170,254,253,191,209,239,191,156,254,255,52,210,246,183,163,207,126,171,223,204,181,221,161,223,71,244,255,63,44,210,246,247,166,207,222,120,109,87,244,123,169,237,126,61,249,193,237,255,111,122,204,240,30,227,131,95,251,255,254,191,255,175,255,251,247,248,53,78,222,28,63,249,157,232,207,127,242,215,144,207,128,255,239,196,173,126,141,244,31,162,127,126,111,125,255,215,162,255,254,0,250,185,162,255,255,73,191,134,225,233,95,235,215,248,179,20,230,95,197,159,253,154,244,223,175,247,107,252,77,250,153,228,41,254,218,191,246,215,228,111,126,29,134,115,155,71,121,245,175,253,117,136,91,127,77,254,207,251,124,183,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,13,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,187,208,176,136,231,254,32,226,144,63,9,191,39,191,6,120,255,55,253,147,228,243,95,243,15,250,181,244,247,95,3,67,254,13,126,211,191,200,252,254,107,210,239,79,152,4,191,41,181,249,207,232,187,255,236,47,34,56,191,246,175,249,107,252,250,4,235,63,227,255,255,186,252,253,175,79,240,248,239,63,137,112,253,181,126,205,95,227,183,164,246,255,195,159,244,235,234,187,104,247,107,254,26,95,105,91,243,247,127,246,39,253,58,204,174,12,11,44,169,159,83,223,191,193,111,64,191,255,223,127,208,19,238,75,250,254,53,169,111,211,254,215,148,247,255,34,180,255,77,185,191,95,147,218,255,26,250,251,175,69,191,127,165,191,255,58,244,251,95,211,193,241,255,254,139,126,19,238,67,222,145,223,229,29,249,93,222,249,191,255,111,161,185,225,169,95,67,159,191,13,194,251,107,255,95,196,83,127,144,229,169,127,246,215,148,207,208,214,240,212,63,70,159,61,213,247,127,243,95,227,163,95,227,57,253,252,125,233,255,37,15,240,55,103,57,109,127,77,145,71,201,151,57,254,249,205,77,103,63,122,130,71,245,191,165,83,87,79,126,221,231,242,107,202,213,79,176,42,255,77,255,34,98,163,223,195,135,167,242,243,7,253,26,42,87,191,118,32,111,191,134,39,111,191,209,31,244,107,219,223,127,227,63,232,215,177,191,255,38,196,179,230,247,223,244,15,250,245,156,124,2,230,127,100,224,144,28,242,239,137,192,212,207,127,77,192,212,223,127,45,192,212,223,127,109,192,212,223,127,29,130,249,235,255,71,204,138,34,143,44,171,191,38,255,254,21,189,35,178,41,127,255,26,4,15,114,253,159,253,65,238,51,200,148,251,76,96,252,223,4,83,62,251,49,150,183,95,243,63,130,124,254,230,36,167,242,247,175,197,127,255,22,246,239,95,135,255,254,45,237,223,191,1,255,253,91,253,26,34,231,70,199,252,6,191,198,255,253,23,255,6,244,217,111,192,248,253,6,70,246,89,79,252,90,34,247,220,158,244,246,31,148,144,108,255,154,132,7,13,234,15,250,245,89,254,209,254,255,254,131,100,108,70,111,0,79,249,238,215,162,177,82,219,95,251,215,22,26,252,193,191,137,232,161,95,11,52,147,190,121,28,24,63,255,255,215,103,122,137,222,48,186,8,159,255,26,60,23,255,217,31,244,187,241,187,130,183,208,150,251,100,218,254,90,52,167,66,219,63,73,245,222,111,168,180,253,203,254,164,95,235,215,248,175,45,60,67,91,178,154,12,239,215,181,116,0,46,191,57,230,6,223,255,65,41,253,253,235,176,174,251,53,136,222,255,55,211,135,52,7,227,241,235,242,255,209,254,215,230,241,254,58,246,239,223,152,219,39,191,198,159,102,117,233,143,177,30,253,138,62,255,223,24,231,95,151,232,2,154,98,78,160,87,1,235,55,212,57,130,110,197,223,191,145,253,251,215,225,191,127,99,165,27,120,10,127,255,90,252,221,175,255,31,9,29,204,92,225,111,118,61,232,247,223,224,63,250,205,126,141,191,134,127,255,181,127,141,95,251,63,130,126,247,105,253,155,42,60,240,235,175,173,240,12,221,127,51,157,239,95,155,249,5,127,127,245,23,99,190,127,221,160,205,87,10,251,215,225,54,70,123,211,103,129,127,240,109,72,212,175,21,241,15,126,173,255,207,250,7,123,95,71,143,57,221,242,235,255,77,93,221,133,223,73,230,205,231,131,254,1,205,243,223,4,255,224,9,207,189,252,13,155,45,188,47,60,236,251,11,191,150,252,253,55,9,63,128,111,255,26,253,253,183,0,207,254,77,190,175,240,107,117,124,135,95,67,245,147,194,253,139,126,45,198,215,232,39,231,31,160,143,223,84,245,196,175,169,254,1,244,196,175,169,254,193,175,69,252,251,107,170,127,240,107,90,156,212,63,208,119,228,119,121,71,126,151,119,88,190,127,3,193,167,203,95,58,29,191,198,214,111,69,255,252,90,240,21,254,165,95,219,240,215,111,248,155,202,103,32,160,225,175,95,231,55,245,125,133,95,171,231,43,252,91,191,198,143,124,133,247,125,52,38,181,116,250,183,110,124,227,71,207,207,167,231,71,99,253,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,103,255,185,252,154,57,138,159,160,92,235,127,205,185,214,223,243,247,244,243,173,221,124,197,80,174,21,177,188,201,181,34,95,128,92,171,201,41,32,223,249,95,83,94,105,204,176,126,211,191,73,243,20,191,14,190,251,181,127,141,175,254,164,223,60,229,28,217,223,244,235,72,190,247,15,146,191,127,141,191,233,215,230,20,16,231,29,188,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,254,99,154,91,251,53,56,207,231,242,140,191,166,254,253,235,114,110,67,250,254,45,188,190,241,217,111,225,245,253,107,105,31,238,115,233,187,255,185,244,253,107,217,190,145,55,252,207,248,111,233,251,215,226,190,127,173,78,223,191,101,167,239,223,114,160,239,223,114,160,239,223,50,218,247,175,211,233,251,215,177,125,255,154,60,79,191,1,125,255,127,255,73,63,38,52,249,135,116,93,201,228,144,249,239,95,211,254,253,235,240,223,191,150,203,33,243,223,191,182,254,77,9,26,206,5,253,250,246,111,166,49,230,91,255,230,113,35,135,169,127,51,46,200,99,35,167,100,214,158,108,94,24,57,118,29,31,231,158,100,12,146,159,254,221,152,247,36,247,36,227,250,13,248,251,95,139,251,231,156,39,198,197,99,68,222,246,191,166,28,229,175,195,60,246,27,112,222,250,215,224,60,237,87,156,155,254,53,180,45,190,255,181,181,159,95,139,254,254,181,25,87,201,167,153,207,208,47,114,196,191,182,246,251,107,11,95,241,24,229,111,158,107,30,163,252,205,244,231,49,226,221,95,207,123,23,60,248,235,202,119,148,243,149,191,105,190,9,215,191,230,47,74,130,191,191,250,139,82,11,219,229,159,241,253,175,181,225,253,95,219,123,223,228,167,127,13,111,92,183,201,79,255,122,68,27,188,111,230,83,250,114,243,137,191,77,126,26,243,137,191,77,126,154,114,243,255,17,254,254,181,184,175,95,255,63,146,220,162,205,213,255,75,255,181,230,141,137,254,255,146,201,79,255,154,157,252,52,230,215,228,167,177,206,242,107,90,120,50,182,223,76,243,211,191,166,151,159,254,117,108,254,210,180,249,74,97,255,58,220,198,101,12,127,148,159,254,81,126,250,103,47,63,141,199,207,79,255,83,132,144,228,167,115,203,95,191,255,175,41,159,225,135,225,175,223,155,254,216,249,53,24,56,231,167,15,232,231,183,127,141,31,229,162,111,251,124,136,207,243,155,179,207,243,254,235,203,63,198,252,248,107,254,67,234,99,88,251,137,191,125,251,169,182,216,218,79,252,109,236,167,216,161,255,236,79,50,246,83,244,23,120,219,194,227,191,141,253,252,53,196,182,252,73,190,253,252,53,58,246,211,200,129,172,117,134,246,243,215,82,217,248,13,92,223,252,255,174,253,132,29,249,205,85,207,250,246,19,116,232,218,79,35,219,176,149,234,223,252,218,166,111,99,63,127,29,149,45,244,171,62,194,159,100,236,167,250,8,127,146,177,159,234,35,240,24,141,237,245,223,53,235,179,191,161,254,13,217,255,205,73,223,39,193,223,191,198,95,148,254,26,178,126,139,191,125,251,169,182,58,176,159,230,253,95,199,254,253,107,4,246,243,125,215,119,241,254,143,41,62,254,250,46,198,234,175,239,98,172,254,250,46,236,167,89,223,141,217,79,192,149,223,191,89,251,137,121,189,201,126,254,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs1.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs1.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs1.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs1.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs3' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 69 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs3 : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex
	{
		/// <summary>Construct an instance of the 'vs3' shader</summary>
		public vs3()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs3.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs3.cid0 = state.GetNameUniqueID("v_SH");
			vs3.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs3.cid2 = state.GetNameUniqueID("v_lights");
			vs3.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs3.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs3.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs3.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs3.tid0 = state.GetNameUniqueID("CustomTexture");
			vs3.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs3.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[21], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[20], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[13], ref this.vreg[14], ref this.vreg[15], ref this.vreg[16], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[9], ref this.vreg[10], ref this.vreg[11], ref this.vreg[12], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs3.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs3.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs3.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs3.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs3.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs3.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs3.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs3.fx, vs3.fxb, 65, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 3;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3.vin[i]));
			index = vs3.vin[(i + 3)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[17] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[18] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[19] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[22] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 9)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[23];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,252,135,0,1,3,131,0,5,1,0,0,1,144,135,0,1,23,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,196,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,216,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,128,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,232,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,12,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,48,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,156,1,0,1,0,1,1,1,184,138,0,0,1,1,1,228,1,0,1,0,1,2,139,0,0,1,15,1,140,1,0,1,0,1,15,1,168,138,0,0,1,15,1,244,1,0,1,0,1,16,1,8,138,0,0,1,16,1,24,1,0,1,0,1,16,1,44,138,0,0,1,16,1,240,135,0,0,1,3,1,0,1,0,1,16,1,108,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,64,1,0,1,0,1,16,1,60,131,0,0,1,93,134,0,0,1,16,1,88,1,0,1,0,1,16,1,84,1,0,1,0,1,16,1,160,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,116,1,0,1,0,1,16,1,112,131,0,0,1,93,134,0,0,1,16,1,140,1,0,1,0,1,16,1,136,1,0,1,0,1,16,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,180,1,0,1,0,1,16,1,176,131,0,0,1,93,134,0,0,1,16,1,204,1,0,1,0,1,16,1,200,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,7,1,80,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,252,1,0,1,0,1,4,1,84,135,0,0,1,36,1,0,1,0,1,2,1,96,1,0,1,0,1,2,1,136,138,0,0,1,2,1,56,131,0,0,1,28,1,0,1,0,1,2,1,43,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,2,1,36,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,4,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,4,1,20,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,7,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,9,1,0,1,0,1,48,1,10,1,0,1,0,1,80,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,85,1,0,1,0,1,16,1,58,1,0,1,0,1,16,1,33,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,34,1,0,1,0,1,16,1,32,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,9,1,16,1,15,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,96,1,48,1,96,1,54,1,18,1,0,1,18,133,0,0,1,96,1,60,1,96,1,66,1,18,1,0,1,18,133,0,0,1,96,1,72,1,96,1,78,1,18,1,0,1,18,133,0,0,1,32,1,84,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,2,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,3,1,4,1,200,1,15,1,0,1,5,1,0,1,108,1,248,1,148,1,235,1,5,1,1,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,23,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,24,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,25,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,26,1,0,1,200,1,7,1,0,1,2,1,0,1,198,1,180,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,3,1,2,1,200,1,14,131,0,0,1,27,1,252,1,140,1,235,1,0,1,1,1,0,1,200,1,1,131,0,0,1,195,1,195,1,0,1,240,131,0,0,1,200,1,7,1,0,1,1,1,4,1,103,1,27,1,98,1,139,1,5,1,3,1,3,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,5,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,20,1,27,1,192,1,139,1,5,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,20,1,192,1,108,1,160,1,5,1,20,1,128,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,5,1,5,1,0,1,200,1,7,1,128,1,4,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,5,1,20,1,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,190,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,190,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,190,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,190,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,190,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,62,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,62,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,62,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,21,1,168,1,16,1,42,1,17,1,1,1,0,1,0,1,16,1,52,1,0,1,0,1,5,1,116,135,0,0,1,36,1,0,1,0,1,15,1,160,1,0,1,0,1,15,1,200,138,0,0,1,15,1,120,131,0,0,1,28,1,0,1,0,1,15,1,107,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,100,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,216,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,5,1,52,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,5,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,10,1,0,1,0,1,48,1,11,1,0,1,0,1,80,1,12,1,0,1,0,1,16,1,13,1,0,1,48,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,109,1,0,1,0,1,16,1,82,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,59,1,0,1,0,1,16,1,52,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,241,1,85,1,80,1,10,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,16,1,39,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,96,1,82,1,18,1,0,1,18,133,0,0,1,96,1,88,1,96,1,94,1,18,1,0,1,18,133,0,0,1,96,1,100,1,64,1,106,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,148,1,177,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,6,1,0,1,27,1,27,1,198,1,161,1,1,1,12,1,7,1,200,1,15,1,0,1,0,1,160,1,27,1,136,1,0,1,161,1,5,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,5,1,24,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,5,1,25,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,5,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,171,1,5,1,23,1,0,1,92,1,2,1,0,1,7,1,0,131,27,0,1,161,1,1,1,9,1,7,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,148,1,171,1,5,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,5,1,25,1,4,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,108,1,161,1,1,1,10,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,5,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,108,1,255,1,143,1,171,1,5,1,24,1,3,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,5,1,23,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,5,1,1,1,0,1,200,1,4,131,0,0,1,248,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,6,1,0,1,195,1,190,1,0,1,176,1,0,1,11,1,0,1,200,1,4,1,0,1,6,1,0,1,195,1,190,1,0,1,176,1,0,1,12,1,0,1,20,1,17,1,0,1,7,1,0,1,195,1,190,1,27,1,176,1,0,1,9,1,1,1,168,1,36,1,6,1,7,1,0,1,195,1,190,1,0,1,144,1,0,1,10,1,11,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,7,1,7,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,6,1,6,1,0,1,200,1,1,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,5,1,2,1,0,1,200,1,2,1,0,1,3,1,0,1,195,1,190,1,0,1,240,1,3,1,2,1,0,1,200,1,4,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,4,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,13,1,1,1,168,1,18,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,14,1,13,1,20,1,20,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,15,1,1,1,168,1,40,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,16,1,14,1,20,1,18,131,0,0,1,190,1,190,1,27,1,176,1,3,1,13,1,1,1,168,1,68,1,4,1,0,1,0,1,190,1,190,1,0,1,144,1,3,1,15,1,15,1,20,1,24,131,0,0,1,190,1,190,1,27,1,176,1,3,1,14,1,1,1,168,1,136,1,4,1,1,1,0,1,18,1,18,1,0,1,208,1,0,1,0,1,16,1,200,1,15,1,0,1,3,1,0,1,167,1,167,1,0,1,224,1,2,1,4,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,132,0,0,1,224,1,2,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,1,1,4,1,201,1,27,1,98,1,139,131,3,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,186,1,27,1,192,1,139,1,3,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,186,1,192,1,27,1,160,1,3,1,20,1,129,1,200,1,7,1,128,1,4,1,0,1,201,1,108,1,0,1,225,131,0,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,6,1,152,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,128,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,1,1,244,1,0,1,0,1,2,1,28,138,0,0,1,1,1,204,131,0,0,1,28,1,0,1,0,1,1,1,191,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,184,131,0,0,1,48,1,0,1,2,131,0,0,1,23,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,3,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,32,1,80,1,10,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,23,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,22,176,0,0,1,63,1,128,142,0,0,1,112,1,21,1,48,1,8,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,96,1,75,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,9,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,10,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,11,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,12,1,0,1,200,1,1,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,13,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,15,1,0,1,200,1,4,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,14,1,0,1,200,1,1,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,13,1,0,1,200,1,2,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,14,1,0,1,200,1,4,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,15,1,0,1,200,1,8,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,1,1,16,1,0,1,20,1,247,1,192,1,5,131,0,0,1,198,1,194,1,0,1,0,1,22,1,200,1,15,1,128,1,2,132,0,0,1,226,1,3,1,3,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,192,1,27,1,192,1,139,1,3,1,0,1,0,1,200,1,1,131,0,0,1,205,1,205,1,0,1,240,1,5,1,5,1,0,1,200,1,14,1,0,1,1,1,4,1,118,1,27,1,118,1,139,131,3,0,1,200,1,7,1,0,1,3,1,4,1,192,1,192,1,0,1,160,1,3,1,20,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,88,1,17,1,0,1,1,1,0,1,201,1,201,1,108,1,240,1,1,1,1,1,128,1,172,1,36,1,9,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,5,1,168,1,24,1,9,1,2,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,200,1,7,1,128,1,4,1,0,1,180,1,108,1,0,1,225,1,5,1,0,1,0,1,88,1,132,1,2,1,9,1,0,131,27,0,1,161,1,2,1,8,1,130,1,176,1,23,1,0,1,7,1,0,1,192,1,108,1,65,1,193,1,5,1,0,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,108,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,5,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,166,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {36,59,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,141,223,92,126,255,181,241,55,253,255,79,250,53,229,239,223,150,254,255,235,232,103,63,122,126,184,207,175,71,255,255,253,47,155,223,127,250,107,184,121,249,183,116,34,126,173,95,227,246,243,194,112,86,33,156,63,232,55,149,239,254,173,95,227,246,112,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,252,250,191,6,199,123,19,4,106,38,78,251,175,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,111,244,155,69,218,80,204,216,236,184,54,59,67,109,118,127,141,63,8,120,225,235,95,71,190,178,15,226,84,12,161,251,185,140,227,187,191,5,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,1,34,253,186,3,239,35,230,141,189,255,27,210,255,207,150,77,155,45,167,128,192,99,120,61,207,102,121,253,107,60,194,59,191,166,182,193,231,120,55,245,222,253,243,232,203,191,203,155,128,255,12,191,255,90,246,207,95,227,143,163,14,255,42,157,47,60,191,156,126,255,13,126,51,247,247,111,71,191,143,188,191,127,185,254,14,26,148,250,59,192,253,41,250,253,239,73,159,61,166,255,255,169,250,247,239,77,191,191,161,255,255,101,145,182,239,232,179,214,107,251,39,209,239,127,28,253,255,63,139,180,253,187,232,179,191,205,107,251,47,209,239,255,156,182,251,245,228,7,183,255,191,233,49,195,125,140,15,126,237,255,251,255,254,191,254,239,223,227,215,56,121,115,252,228,119,162,63,255,201,95,67,62,3,254,191,19,183,250,53,210,127,136,254,249,189,245,253,95,139,254,251,3,232,231,138,254,255,39,253,26,134,167,127,173,95,227,207,82,152,127,21,127,246,107,210,127,191,222,175,241,55,233,103,146,167,248,107,255,218,95,147,191,249,117,124,242,110,124,148,87,255,218,95,135,184,245,215,228,255,188,207,119,251,159,211,199,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,220,144,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,191,11,13,139,120,238,15,34,14,249,147,240,123,242,107,128,247,127,211,63,73,62,255,53,255,160,95,75,127,255,53,48,228,223,224,55,253,139,204,239,191,38,253,254,132,73,240,155,82,155,255,140,190,251,207,254,34,130,243,107,255,154,191,198,175,79,176,254,51,254,255,175,203,223,255,250,4,143,255,70,10,238,215,250,53,127,141,223,146,218,255,15,127,210,175,171,239,162,221,175,249,107,124,165,109,205,223,255,217,159,244,235,48,187,50,172,191,232,215,100,252,240,57,245,253,27,252,6,244,251,255,253,7,61,225,190,164,239,95,147,250,54,237,127,77,121,255,47,66,251,223,148,251,251,53,169,253,175,161,191,255,90,244,251,87,250,251,175,67,191,255,53,29,28,255,239,191,232,55,225,62,228,29,249,93,222,145,223,229,157,255,251,255,22,154,27,158,250,53,244,249,187,192,108,191,246,255,69,60,245,103,89,158,250,228,215,146,207,240,195,240,212,239,70,127,60,213,247,127,91,250,247,57,253,252,125,233,255,255,28,15,240,183,101,57,253,215,126,77,145,71,201,151,57,254,249,109,25,196,143,158,31,246,163,246,197,206,67,87,15,127,221,231,242,107,202,237,79,144,169,248,29,127,141,223,244,47,34,54,253,61,72,179,254,158,6,222,14,155,144,223,244,127,250,181,205,7,250,168,220,254,65,191,134,202,243,175,29,200,249,175,225,201,249,111,244,7,253,218,246,247,223,248,15,250,117,236,239,191,9,201,138,249,253,55,253,131,126,61,167,23,0,243,63,50,112,72,254,249,247,68,96,234,231,191,38,96,234,239,191,22,96,234,239,191,54,96,234,239,191,14,193,252,245,255,35,22,1,145,71,214,17,162,79,190,162,119,140,78,248,13,255,32,244,249,107,255,26,127,25,233,147,191,236,15,114,122,2,178,76,122,232,215,248,229,127,208,239,198,242,45,122,72,224,177,94,97,120,191,22,255,238,224,201,223,128,247,159,253,73,164,75,254,32,247,153,192,51,159,9,140,255,155,112,148,207,126,140,245,198,175,249,31,161,143,223,150,244,141,252,253,107,241,223,191,157,253,251,215,225,191,127,123,251,247,111,192,127,255,14,244,247,175,101,113,249,207,254,224,223,138,254,254,13,232,239,95,155,245,237,127,198,255,255,245,121,142,64,55,246,69,104,60,191,193,31,244,59,254,26,191,6,195,249,181,137,134,208,87,191,185,194,253,181,137,118,248,251,183,208,191,209,22,127,255,150,162,59,127,173,95,135,232,252,107,255,26,255,245,31,36,191,163,237,255,205,191,255,218,12,243,175,249,139,126,33,187,9,255,217,255,4,250,252,58,244,217,175,77,223,255,142,191,198,87,127,209,152,105,247,107,254,77,191,14,253,77,4,248,245,126,93,163,219,211,255,251,47,38,154,253,77,191,70,10,61,251,107,252,77,191,129,190,247,235,178,206,23,220,127,93,250,27,239,1,38,222,147,239,24,206,175,67,243,204,99,196,216,240,57,230,235,215,167,207,136,182,127,208,111,192,237,127,115,254,252,215,212,191,127,61,250,251,215,215,191,127,77,110,251,107,50,45,8,214,175,139,126,127,173,244,255,102,60,208,31,245,253,7,165,212,7,248,236,215,3,237,244,187,95,143,199,238,227,244,107,115,31,250,55,181,255,141,241,147,96,253,105,10,235,215,248,117,129,247,175,169,99,252,117,217,70,253,111,127,16,230,237,215,161,207,127,29,29,43,254,6,29,133,102,191,198,95,244,241,175,193,196,4,255,253,71,191,142,226,143,249,192,120,127,107,157,119,153,159,255,251,15,250,109,168,253,175,203,239,255,154,250,247,87,60,95,191,22,189,11,88,242,251,111,240,31,253,54,52,71,50,95,191,246,127,196,246,142,199,98,105,240,235,80,255,255,145,190,255,23,255,58,202,47,196,19,255,145,225,29,200,155,145,5,200,219,175,165,191,139,188,253,103,214,158,209,103,129,143,244,109,72,247,175,21,241,145,126,173,255,207,250,72,123,95,71,215,58,61,247,235,255,77,158,206,179,250,143,244,168,249,124,208,71,34,58,255,77,240,145,158,240,252,203,223,240,91,68,39,169,92,253,26,206,103,250,181,228,239,191,73,120,224,55,167,246,127,141,254,254,91,128,87,254,38,223,95,250,181,58,254,211,175,97,117,27,195,5,207,241,231,248,12,122,209,248,72,232,227,55,101,152,224,191,95,67,127,135,110,249,74,127,135,174,16,31,233,215,180,56,169,143,164,239,200,239,242,142,252,46,239,0,87,162,5,247,219,229,47,157,142,95,35,253,173,233,159,95,11,254,210,127,245,107,27,254,122,251,155,202,103,32,160,225,175,217,111,186,217,95,250,183,126,141,31,249,75,255,111,123,52,238,183,243,240,111,221,248,198,237,159,31,181,252,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,155,159,203,175,153,3,249,9,202,135,253,143,191,6,242,205,191,231,239,41,57,103,121,118,62,48,223,140,28,130,201,55,35,79,129,124,179,201,101,32,71,251,63,82,142,75,242,144,191,233,223,164,249,17,206,197,254,218,191,198,87,127,210,111,207,185,185,175,56,87,135,207,126,123,205,213,253,218,156,122,226,124,135,247,249,95,67,159,255,53,145,207,255,111,250,252,255,230,207,127,140,243,28,191,206,31,132,252,137,233,235,215,210,190,126,91,175,47,124,246,219,122,125,105,142,216,251,92,250,234,127,46,125,153,252,177,172,77,73,62,249,215,229,60,158,244,245,219,121,125,225,179,223,206,235,235,215,86,152,238,115,233,171,255,185,244,245,107,219,190,126,45,238,11,127,75,126,242,55,160,191,255,239,63,9,223,33,47,138,156,208,111,102,243,208,156,95,230,182,242,247,175,201,127,255,90,246,111,206,55,51,141,126,3,158,171,95,231,15,66,219,223,84,223,71,110,8,127,255,198,246,239,95,139,255,254,77,232,239,223,141,231,89,242,93,146,155,252,245,255,35,147,143,164,132,209,31,244,63,82,14,244,199,20,6,62,71,14,91,112,100,28,24,166,252,45,57,240,223,68,255,70,31,104,111,114,226,192,9,127,155,156,184,228,189,5,71,201,217,50,127,253,193,200,189,163,111,172,79,0,71,224,135,188,175,161,211,175,199,184,254,211,146,207,98,252,194,124,57,112,198,186,128,227,211,95,243,111,250,181,52,95,142,156,54,114,192,177,124,57,222,67,78,91,254,47,185,120,125,239,215,249,13,232,61,124,254,107,115,110,90,112,250,49,250,236,55,80,122,35,183,254,99,191,134,172,19,252,134,250,247,175,203,56,252,53,127,81,18,252,45,249,228,223,128,104,131,223,133,23,169,31,205,137,163,191,223,128,242,118,41,247,249,107,241,59,126,190,156,219,106,190,252,215,247,112,18,30,16,252,13,14,38,7,110,112,248,13,152,7,4,7,121,255,215,102,252,21,222,175,243,235,83,190,253,215,239,228,219,209,135,201,183,255,250,132,215,175,255,107,252,111,127,16,230,10,115,128,181,1,233,15,115,107,104,254,149,205,183,83,206,244,63,66,27,225,163,223,148,115,239,202,71,255,208,175,201,191,91,62,225,191,19,199,39,252,247,111,104,255,254,13,248,239,223,72,249,130,224,254,75,134,142,244,221,191,100,114,241,191,166,230,226,127,3,233,131,249,197,228,247,241,55,161,197,249,125,121,207,210,159,242,175,191,193,127,36,223,125,245,23,99,29,234,215,13,218,127,165,176,127,29,110,227,50,165,63,202,203,255,40,47,255,179,151,151,199,227,231,229,255,33,2,44,121,249,95,98,249,235,31,252,53,229,51,252,48,252,245,119,209,31,59,191,6,3,231,188,252,1,253,252,246,175,241,163,28,252,255,91,158,15,241,245,126,91,246,245,224,231,253,158,191,167,129,183,243,1,190,222,111,160,122,14,126,131,239,23,224,239,223,196,254,45,126,5,108,52,108,158,191,134,15,63,193,172,255,194,119,249,109,117,45,92,97,90,63,1,50,243,107,104,31,242,247,175,197,127,27,63,1,178,243,107,104,31,106,15,248,125,223,111,192,223,198,111,16,251,254,159,253,73,240,141,160,219,225,55,252,90,3,126,3,214,133,141,223,32,107,229,206,111,248,109,127,141,208,111,80,255,139,62,119,235,236,88,195,133,223,96,214,199,99,126,3,222,131,157,19,123,40,126,131,190,247,235,152,53,244,95,155,255,22,156,140,47,129,119,225,231,253,6,140,159,216,108,179,30,14,220,146,224,111,177,91,88,103,199,239,176,205,188,134,173,190,1,250,163,190,255,160,148,251,252,181,248,29,223,111,48,235,219,24,167,177,221,190,223,240,235,121,56,24,191,193,224,128,62,127,109,197,65,222,255,181,25,127,133,247,235,252,122,228,55,252,122,29,191,1,125,24,191,225,215,35,125,247,235,253,26,255,219,31,132,185,194,28,192,127,66,127,248,219,248,13,128,253,241,175,225,252,134,95,151,225,139,223,96,124,115,248,13,152,119,223,111,192,223,190,223,128,191,125,191,1,127,251,126,131,161,227,215,245,27,16,31,40,253,3,191,129,190,187,209,111,248,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs3.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs3.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs3.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs3.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs0c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 32 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs0c : Xen.Graphics.ShaderSystem.BaseShader, IMS_Base, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs0c' shader</summary>
		public vs0c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs0c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs0c.cid0 = state.GetNameUniqueID("v_SH");
			vs0c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs0c.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			vs0c.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs0c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs0c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs0c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs0c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs0c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs0c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs0c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs0c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs0c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs0c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs0c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs0c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs0c.fx, vs0c.fxb, 35, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs0c.vin[i]));
			index = vs0c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,108,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,72,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,240,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,88,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,124,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,160,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,84,1,0,1,0,1,1,1,112,138,0,0,1,14,1,252,1,0,1,0,1,15,1,24,138,0,0,1,15,1,100,1,0,1,0,1,15,1,120,138,0,0,1,15,1,136,1,0,1,0,1,15,1,156,138,0,0,1,16,1,96,135,0,0,1,3,1,0,1,0,1,15,1,220,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,176,1,0,1,0,1,15,1,172,131,0,0,1,93,134,0,0,1,15,1,200,1,0,1,0,1,15,1,196,1,0,1,0,1,16,1,16,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,228,1,0,1,0,1,15,1,224,131,0,0,1,93,134,0,0,1,15,1,252,1,0,1,0,1,15,1,248,1,0,1,0,1,16,1,80,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,36,1,0,1,0,1,16,1,32,131,0,0,1,93,134,0,0,1,16,1,60,1,0,1,0,1,16,1,56,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,4,1,152,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,120,1,0,1,0,1,2,1,32,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,224,1,0,1,81,1,0,1,7,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,12,1,0,1,9,1,0,1,13,1,0,1,10,1,0,1,14,1,0,1,11,1,0,1,47,1,0,1,12,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,33,131,0,0,1,34,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,32,1,11,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,13,1,194,1,0,1,18,133,0,0,1,32,1,19,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,7,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,7,1,3,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,7,1,6,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,7,1,2,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,3,1,0,1,177,1,180,1,0,1,225,1,1,1,3,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,6,1,3,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,18,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,176,1,0,1,0,1,3,1,64,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,0,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,7,1,0,1,0,1,48,1,8,1,0,1,0,1,160,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,16,1,11,1,0,1,32,1,32,1,12,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,57,131,0,0,1,58,1,0,1,0,1,16,1,59,1,0,1,0,1,16,1,62,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,50,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,7,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,16,1,37,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,38,1,96,1,44,1,18,1,0,1,18,133,0,0,1,96,1,50,1,96,1,56,1,18,1,0,1,18,133,0,0,1,16,1,62,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,9,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,7,1,14,1,0,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,7,1,15,1,0,1,92,1,15,1,0,1,6,1,160,1,27,1,136,1,177,1,161,1,7,1,16,1,9,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,171,1,7,1,16,1,6,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,7,1,14,1,4,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,0,1,9,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,7,1,14,1,4,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,6,1,160,1,177,1,52,1,148,1,171,1,7,1,16,1,6,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,9,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,7,1,16,1,6,1,200,1,15,1,0,1,2,1,160,1,108,1,255,1,143,1,171,1,7,1,15,1,2,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,7,1,14,1,4,1,200,1,2,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,4,1,0,1,4,1,0,1,248,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,8,1,0,1,4,1,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,1,1,0,1,8,1,0,1,195,1,190,1,0,1,176,1,4,1,2,1,0,1,200,1,4,1,0,1,8,1,0,1,195,1,190,1,0,1,176,1,4,1,3,1,0,1,20,1,17,1,0,1,9,1,0,1,195,1,190,1,27,1,176,1,4,1,0,1,1,1,168,1,36,1,8,1,9,1,0,1,195,1,190,1,0,1,144,1,4,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,8,1,8,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,3,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,2,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,6,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,4,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,195,1,190,1,0,1,144,1,4,1,7,1,5,1,20,1,17,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,4,1,1,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,1,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,1,1,1,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,3,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,177,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,3,1,212,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,252,1,0,1,0,1,1,1,216,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,152,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,8,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,0,1,160,1,6,1,0,1,32,1,80,1,7,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,245,1,160,131,0,0,1,28,131,0,0,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,32,1,0,1,0,1,16,1,20,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,26,1,0,1,0,1,16,1,19,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,4,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,8,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,12,1,96,1,18,1,18,1,0,1,18,133,0,0,1,96,1,24,1,48,1,30,1,18,1,0,1,34,131,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,1,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,4,1,0,1,200,1,2,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,167,1,167,1,0,1,175,1,4,1,6,1,0,1,20,1,24,1,0,1,2,1,0,1,167,1,167,1,27,1,175,1,4,1,7,1,3,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,3,1,3,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,2,1,2,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,2,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,192,1,0,1,160,1,2,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {236,51,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,86,191,153,252,254,107,227,239,95,195,252,243,107,252,26,191,9,253,255,215,113,127,254,255,250,249,245,232,255,191,255,101,243,251,79,127,13,71,135,111,235,192,127,173,95,227,246,116,96,56,171,16,206,255,244,155,200,119,255,214,175,113,123,56,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,121,126,253,95,131,227,189,9,2,53,19,167,253,222,191,169,124,247,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,159,209,126,130,54,20,51,54,59,174,205,95,52,212,102,247,215,184,0,94,191,153,182,243,31,196,169,120,173,251,185,140,99,249,251,98,156,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,0,254,235,14,188,143,152,55,246,254,111,72,255,63,91,54,109,182,156,2,2,143,225,245,60,155,229,245,175,241,235,224,157,95,83,219,224,115,188,155,122,239,254,70,244,229,150,55,1,111,232,247,149,247,247,255,65,49,245,111,231,209,104,70,191,191,243,254,254,163,232,247,63,207,255,254,55,147,159,160,193,191,167,159,131,94,127,138,126,255,55,209,103,127,29,253,255,79,213,191,255,41,250,253,31,163,255,255,86,250,158,223,246,191,162,207,255,51,175,45,136,242,127,208,223,111,34,109,183,232,179,223,237,55,115,109,127,79,250,253,177,182,251,245,228,7,183,255,191,233,49,195,123,140,15,126,237,255,251,255,254,191,254,239,223,227,215,56,121,115,252,228,119,162,63,255,201,95,67,62,3,254,191,19,183,250,53,210,127,136,254,249,189,245,253,95,139,254,251,3,232,231,138,254,255,39,253,26,134,167,127,173,95,227,207,82,152,127,21,127,246,107,210,127,191,222,175,241,55,233,103,146,167,248,107,255,218,95,147,191,249,117,24,206,109,30,229,213,191,246,215,33,110,253,53,249,63,239,243,221,254,231,244,241,189,223,127,231,215,248,162,152,214,85,83,157,183,233,214,171,59,233,183,159,191,126,158,10,55,164,39,213,98,85,148,244,203,195,241,222,167,227,135,247,247,198,123,7,251,251,191,198,239,66,195,34,158,251,131,136,67,254,36,252,158,208,239,191,230,175,241,155,254,73,242,249,175,249,7,253,90,250,251,175,129,33,255,6,191,233,95,100,126,255,53,233,247,39,76,130,223,148,218,252,103,244,221,127,246,23,17,156,95,251,215,252,53,126,125,130,245,159,241,255,127,93,254,254,215,39,120,252,247,159,68,184,254,90,191,230,175,241,91,82,251,255,225,79,250,117,245,93,180,251,53,127,141,175,180,173,249,251,63,251,147,126,29,102,87,134,245,23,253,154,140,31,62,167,190,127,131,223,128,126,255,191,255,160,39,220,151,244,253,107,82,223,166,253,175,41,239,255,69,104,255,155,114,127,191,38,181,255,53,244,247,95,139,126,255,74,127,255,117,232,247,191,166,131,227,255,253,23,253,38,220,135,188,35,191,203,59,242,187,188,243,127,255,223,66,115,195,83,191,134,62,127,22,4,236,215,254,191,136,167,90,203,83,127,238,175,41,159,161,173,225,169,63,141,62,123,170,239,255,38,191,198,71,191,198,115,250,249,251,210,255,31,243,0,127,19,150,211,167,191,166,200,163,228,203,28,255,104,154,235,255,247,143,234,115,59,238,174,222,251,186,207,229,215,148,147,159,96,213,252,155,254,69,196,22,191,135,15,79,229,225,15,250,53,84,78,126,109,79,126,32,75,70,126,32,99,191,182,149,165,223,232,15,250,117,236,239,191,49,241,160,249,253,55,249,131,126,61,251,251,111,250,7,253,250,78,246,0,255,63,50,112,72,198,254,35,15,190,126,254,107,2,190,254,254,107,1,190,254,254,107,3,190,254,254,235,16,252,95,255,63,98,54,19,89,99,57,252,53,249,119,200,160,200,157,252,253,107,16,12,200,236,127,246,7,185,207,254,26,122,223,125,38,48,254,111,194,83,62,251,49,150,165,95,243,63,130,236,253,38,36,131,242,247,175,245,31,137,44,154,191,127,29,254,251,55,179,127,255,6,252,247,111,46,114,254,107,65,127,252,154,138,215,175,197,191,251,120,253,134,208,1,212,247,95,246,39,253,90,191,198,95,166,120,161,141,193,235,151,255,65,191,27,193,248,181,84,158,127,77,254,253,55,192,88,184,47,210,5,255,17,233,139,63,232,55,208,190,73,31,240,223,63,102,255,254,117,248,239,68,113,1,173,240,183,209,107,208,53,248,127,34,184,253,71,162,51,126,141,191,72,112,253,13,254,163,223,248,215,248,107,254,162,95,235,215,248,191,89,207,253,218,191,198,175,253,31,253,218,220,222,208,247,63,251,131,127,67,133,139,185,249,53,24,15,166,23,227,250,27,233,119,152,43,252,253,107,233,119,152,135,223,152,250,16,218,240,223,172,235,126,109,166,27,190,251,234,47,6,77,126,221,160,253,87,220,254,215,102,90,255,26,86,95,65,21,249,54,240,219,108,212,34,54,240,215,250,255,172,13,220,251,58,178,237,100,236,215,255,155,186,242,140,223,105,254,204,231,131,54,144,230,236,111,130,13,124,162,243,141,191,97,151,12,31,119,109,226,175,37,127,255,77,194,163,191,57,120,88,127,255,45,232,247,255,251,111,242,237,225,175,213,177,143,191,134,202,131,194,37,158,251,53,248,115,39,15,98,3,209,199,111,202,48,193,99,191,134,254,254,107,253,65,144,41,249,253,215,65,191,62,127,255,65,214,6,234,59,242,187,188,35,191,203,59,192,149,104,193,253,118,249,75,167,227,215,248,247,126,11,250,231,215,130,61,252,199,126,109,195,95,255,238,111,34,159,129,128,134,191,254,181,223,196,183,135,191,86,207,30,254,91,191,198,143,236,161,198,81,118,220,255,214,141,111,252,232,249,209,243,163,231,135,241,252,168,143,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,159,63,207,229,215,204,57,252,4,229,19,255,11,206,39,254,158,191,167,159,83,236,230,31,110,147,79,148,156,152,252,142,92,0,242,137,38,95,128,220,217,127,65,57,163,49,195,253,77,255,38,205,65,112,238,238,215,249,53,190,250,147,126,147,20,185,242,175,254,166,95,71,242,155,127,144,252,253,107,224,239,63,73,115,10,222,231,127,13,125,254,215,68,62,255,191,233,243,255,155,63,215,60,219,31,132,28,69,39,199,245,39,153,190,127,45,237,251,55,245,250,198,103,191,169,215,247,175,165,125,184,207,165,239,254,231,210,247,175,101,251,254,181,184,239,95,203,246,253,107,113,223,154,199,179,125,255,102,157,190,127,179,129,190,127,179,129,190,127,179,104,223,191,78,167,239,95,199,246,45,249,187,223,128,190,255,191,255,164,31,19,154,252,67,186,46,98,242,164,255,144,201,219,200,223,191,14,255,253,107,185,60,41,255,77,57,197,191,8,176,145,211,145,121,48,127,243,184,49,223,250,55,227,130,188,232,95,244,187,241,220,75,126,135,83,42,132,199,127,65,57,66,197,227,63,146,121,10,243,181,38,39,106,242,181,38,39,250,235,80,222,179,147,199,194,248,56,39,74,127,255,75,248,14,176,229,251,223,224,95,66,62,20,121,81,25,191,228,68,181,95,206,83,253,58,174,95,254,251,215,117,253,242,223,191,158,253,251,55,224,191,127,125,201,119,245,114,170,200,131,15,229,84,145,23,31,202,169,162,95,224,43,185,51,151,83,253,53,108,206,205,180,151,156,234,175,201,244,112,57,85,60,63,202,169,254,40,167,250,179,149,83,197,227,231,84,127,6,204,193,57,213,223,199,242,215,221,95,83,62,195,15,195,95,91,244,199,206,175,193,192,57,167,122,64,63,191,253,107,252,252,205,159,126,136,157,254,77,216,78,127,216,186,159,234,188,127,72,237,162,213,249,248,219,215,249,106,63,172,206,199,223,70,231,27,59,106,116,190,240,16,214,202,204,223,98,111,140,206,55,107,241,162,183,126,3,240,154,213,249,224,103,95,231,227,111,95,231,227,111,95,231,139,110,30,214,249,128,125,27,157,255,107,40,254,218,47,255,237,235,252,95,67,241,215,241,243,223,223,180,206,135,127,2,124,187,58,31,178,121,147,206,255,127,2,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs0c.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs0c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs0c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs0c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs0c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs1c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 57 instruction slots used, 17 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs1c : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs1c' shader</summary>
		public vs1c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs1c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs1c.cid0 = state.GetNameUniqueID("v_SH");
			vs1c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs1c.cid2 = state.GetNameUniqueID("v_lights");
			vs1c.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs1c.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs1c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs1c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs1c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs1c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs1c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[15], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[14], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs1c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs1c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs1c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs1c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs1c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs1c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs1c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs1c.fx, vs1c.fxb, 56, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs1c.vin[i]));
			index = vs1c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[11] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[12] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[16] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 8)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[17];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,156,135,0,1,3,131,0,5,1,0,0,1,48,135,0,1,17,131,0,1,4,131,0,1,1,229,0,0,229,0,0,201,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,60,1,0,1,0,1,1,1,88,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,16,1,144,135,0,0,1,3,1,0,1,0,1,16,1,12,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,224,1,0,1,0,1,15,1,220,131,0,0,1,93,134,0,0,1,15,1,248,1,0,1,0,1,15,1,244,1,0,1,0,1,16,1,64,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,20,1,0,1,0,1,16,1,16,131,0,0,1,93,134,0,0,1,16,1,44,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,128,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,84,1,0,1,0,1,16,1,80,131,0,0,1,93,134,0,0,1,16,1,108,1,0,1,0,1,16,1,104,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,5,1,128,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,160,1,0,1,0,1,2,1,224,135,0,0,1,36,1,0,1,0,1,2,131,0,0,1,2,1,40,138,0,0,1,1,1,216,131,0,0,1,28,1,0,1,0,1,1,1,203,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,196,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,4,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,160,1,0,1,81,1,0,1,7,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,12,1,0,1,10,1,0,1,13,1,0,1,11,1,0,1,14,1,0,1,12,1,0,1,47,1,0,1,13,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,32,1,0,1,0,1,16,1,31,1,0,1,0,1,16,1,29,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,32,1,12,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,14,1,194,1,0,1,18,133,0,0,1,32,1,20,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,96,1,40,1,18,1,0,1,18,133,0,0,1,96,1,46,1,48,1,52,1,18,1,0,1,34,131,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,5,1,0,1,27,1,0,1,0,1,225,1,7,1,5,1,0,1,200,1,15,1,0,1,5,1,0,1,198,1,0,1,0,1,235,1,7,1,3,1,5,1,200,1,15,1,0,1,5,1,0,1,177,1,148,1,148,1,235,1,7,1,4,1,5,1,200,1,15,1,0,1,5,1,0,1,108,1,248,1,148,1,235,1,7,1,2,1,5,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,17,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,18,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,19,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,20,1,0,1,200,1,7,1,0,1,3,1,0,1,177,1,180,1,0,1,225,1,1,1,3,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,4,1,3,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,1,1,2,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,1,5,1,8,1,8,1,88,1,136,1,0,1,3,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,30,1,0,1,1,1,4,1,12,1,252,1,27,1,160,1,5,1,14,1,6,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,6,1,6,1,16,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,5,1,5,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,5,1,14,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,27,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,200,1,7,131,0,0,1,21,1,108,1,0,1,225,1,1,1,0,1,0,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,149,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,19,1,216,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,216,1,0,1,0,1,4,136,0,0,1,36,1,0,1,0,1,15,1,64,1,0,1,0,1,15,1,104,138,0,0,1,15,1,24,131,0,0,1,28,1,0,1,0,1,15,1,11,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,4,131,0,0,1,68,1,0,1,2,131,0,0,1,17,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,108,1,0,1,2,1,0,1,17,1,0,1,216,132,0,0,1,1,1,116,1,0,1,0,1,1,1,132,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,192,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,16,1,12,1,0,1,32,1,32,1,13,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,52,1,0,1,0,1,16,1,53,1,0,1,0,1,16,1,56,1,0,1,0,1,16,1,51,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,16,1,38,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,39,1,96,1,45,1,18,1,0,1,18,133,0,0,1,96,1,51,1,96,1,57,1,18,1,0,1,18,133,0,0,1,96,1,63,1,96,1,69,1,18,1,0,1,18,133,0,0,1,64,1,75,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,8,1,0,1,27,1,27,1,198,1,161,1,1,1,2,1,9,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,7,1,17,1,0,1,200,1,15,1,0,1,6,1,160,1,27,1,136,1,0,1,161,1,7,1,18,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,7,1,19,1,9,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,7,1,19,1,4,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,7,1,17,1,2,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,0,1,9,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,7,1,17,1,2,1,200,1,15,1,0,1,6,1,160,1,177,1,52,1,148,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,7,1,19,1,4,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,9,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,7,1,19,1,4,1,200,1,15,1,0,1,6,1,160,1,108,1,255,1,143,1,171,1,7,1,18,1,6,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,7,1,17,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,248,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,8,1,0,1,190,1,190,1,0,1,176,1,2,1,3,1,0,1,200,1,4,1,0,1,8,1,0,1,190,1,190,1,0,1,176,1,2,1,2,1,0,1,20,1,17,1,0,1,9,1,0,1,190,1,190,1,27,1,176,1,2,1,0,1,1,1,168,1,36,1,8,1,9,1,0,1,190,1,190,1,0,1,144,1,2,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,8,1,8,1,0,1,200,1,1,1,0,1,6,1,0,1,191,1,190,1,0,1,240,1,7,1,3,1,0,1,200,1,2,1,0,1,6,1,0,1,195,1,190,1,0,1,240,1,6,1,3,1,0,1,200,1,4,1,0,1,6,1,0,1,191,1,190,1,0,1,240,1,4,1,3,1,0,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,18,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,4,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,40,1,4,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,7,1,5,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,6,1,4,1,1,1,168,1,66,1,4,1,2,1,0,1,190,1,190,1,0,1,144,1,6,1,5,1,6,1,20,1,20,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,6,1,6,1,1,1,168,1,136,1,4,1,0,1,0,1,190,1,190,1,0,1,208,1,2,1,2,1,7,1,20,1,31,1,0,1,1,1,0,1,167,1,167,1,27,1,224,1,3,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,16,1,200,1,15,1,128,1,2,132,0,0,1,224,1,3,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,1,1,14,1,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,1,1,8,1,8,1,88,1,30,1,0,1,1,1,4,1,150,1,252,1,27,1,160,1,1,1,14,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,0,1,225,1,2,1,0,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,27,1,27,1,108,1,139,1,0,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,27,1,160,1,0,1,16,1,128,1,168,1,129,1,0,1,2,1,0,1,195,1,195,1,128,1,208,1,1,1,1,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,150,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,4,1,188,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,36,1,0,1,0,1,2,1,152,135,0,0,1,36,1,0,1,0,1,1,1,148,1,0,1,0,1,1,1,188,138,0,0,1,1,1,108,131,0,0,1,28,1,0,1,0,1,1,1,95,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,17,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,17,229,0,0,229,0,0,204,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,88,1,0,1,81,1,0,1,4,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,32,1,80,1,8,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,21,1,0,1,0,1,16,1,22,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,20,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,9,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,13,1,96,1,19,1,18,1,0,1,18,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,34,131,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,4,1,3,1,0,1,200,1,1,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,4,1,6,1,0,1,20,1,24,1,0,1,1,1,0,1,167,1,167,1,27,1,175,1,4,1,7,1,2,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,2,1,2,1,16,1,200,1,15,1,128,1,2,132,0,0,1,226,1,1,1,1,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,1,1,14,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,1,1,8,1,8,1,200,1,14,1,0,1,1,1,4,1,252,1,252,1,0,1,160,1,1,1,14,1,0,1,200,1,1,1,0,1,2,1,0,1,195,1,195,1,0,1,240,1,1,1,1,1,0,1,200,1,1,131,0,0,1,195,1,190,1,0,1,176,1,1,1,15,1,0,1,88,1,130,1,0,1,2,1,0,1,190,1,190,1,27,1,240,1,4,1,4,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,1,1,0,1,1,1,0,1,177,1,27,1,108,1,139,1,2,1,10,1,255,1,88,1,33,1,2,1,0,1,0,1,108,1,108,1,177,1,160,1,0,1,16,1,130,1,168,1,135,1,0,1,3,1,0,1,192,1,27,1,128,1,193,1,3,1,0,1,16,1,88,1,30,1,0,1,2,1,0,1,252,1,177,1,108,1,225,1,4,1,2,1,130,1,200,1,14,1,0,1,1,1,0,1,1,1,108,1,1,1,235,1,1,1,0,1,2,1,184,1,17,1,0,1,2,1,0,1,195,1,195,1,67,1,208,1,1,1,1,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,131,0,0,1,89,1,24,1,0,1,4,1,0,1,195,1,190,1,108,1,240,1,2,1,3,1,130,1,36,1,135,1,3,1,0,1,0,1,21,1,108,1,108,1,225,1,1,1,0,1,128,1,77,1,33,1,4,1,0,1,0,1,190,1,190,1,108,1,240,1,0,1,3,1,1,1,64,1,20,1,4,1,4,1,0,1,177,1,108,1,108,1,161,1,4,1,10,1,0,1,8,1,17,1,1,1,2,1,0,1,62,1,62,1,203,1,111,1,12,1,3,1,4,1,8,1,35,1,1,1,0,1,0,1,176,1,199,1,17,1,161,1,4,1,9,1,4,1,56,1,28,1,0,1,1,1,0,1,177,1,241,1,108,1,161,1,1,1,10,1,0,1,20,1,2,1,0,1,2,1,0,1,62,1,62,1,177,1,111,1,13,1,3,1,0,1,12,1,132,131,0,0,1,108,1,177,1,108,1,225,1,0,1,4,1,0,1,168,1,20,1,0,1,2,1,0,1,62,1,62,1,66,1,79,1,11,1,3,1,9,1,168,1,39,1,0,1,1,1,0,1,190,1,20,1,130,1,192,1,2,1,1,1,9,1,200,1,7,1,128,1,0,1,0,1,192,1,16,1,0,1,224,1,1,141,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {60,56,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,162,223,76,126,255,181,241,55,253,127,231,215,148,191,127,115,250,255,175,163,159,253,232,9,159,95,143,254,255,251,95,54,191,255,244,215,112,116,123,167,132,250,181,126,141,219,211,141,225,172,66,56,233,111,42,223,253,91,191,198,237,225,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,230,249,245,127,13,142,247,38,8,212,76,156,246,71,105,156,246,235,232,255,191,137,56,77,251,41,208,207,111,244,107,8,220,191,78,251,9,218,80,204,216,236,184,54,255,210,80,155,221,95,227,15,2,94,191,153,182,243,31,196,169,120,173,251,185,140,227,187,191,5,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,1,34,253,186,3,239,35,230,141,189,255,27,210,255,207,150,77,155,45,167,128,192,99,120,61,207,102,121,253,107,60,194,59,191,166,182,193,231,120,55,245,222,125,76,95,254,222,222,4,252,97,244,251,95,228,253,61,162,14,191,237,209,232,79,163,223,255,42,239,239,191,139,126,255,231,252,239,127,51,249,9,26,252,70,250,59,232,245,167,232,247,255,17,181,253,247,232,255,127,170,254,253,191,209,239,191,156,254,255,52,210,246,183,163,207,126,171,223,204,181,221,161,223,71,244,255,63,44,210,246,247,166,207,222,120,109,87,244,123,169,237,126,61,249,193,237,255,111,122,204,240,30,227,131,95,251,255,254,191,255,175,255,251,247,248,53,78,222,28,63,249,157,232,207,127,242,215,144,207,128,255,239,196,173,126,141,244,31,162,127,126,111,125,255,215,162,255,254,0,250,185,162,255,255,73,191,134,225,233,95,235,215,248,179,20,230,95,197,159,253,154,244,223,175,247,107,252,77,250,153,228,41,254,218,191,246,215,228,111,126,29,134,115,155,71,121,245,175,253,117,136,91,127,77,254,207,251,124,183,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,13,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,187,208,176,136,231,254,32,226,144,63,9,191,39,191,6,120,255,55,253,147,228,243,95,243,15,250,181,244,247,95,3,67,254,13,126,211,191,200,252,254,107,210,239,79,152,4,191,41,181,249,207,232,187,255,236,47,34,56,191,246,175,249,107,252,250,4,235,63,227,255,255,186,252,253,175,79,240,248,239,63,137,112,253,181,126,205,95,227,183,164,246,255,195,159,244,235,234,187,104,247,107,254,26,95,105,91,243,247,127,246,39,253,58,204,174,12,11,44,169,159,83,223,191,193,111,64,191,255,223,127,208,19,238,75,250,254,53,169,111,211,254,215,148,247,255,34,180,255,77,185,191,95,147,218,255,26,250,251,175,69,191,127,165,191,255,58,244,251,95,211,193,241,255,254,139,126,19,238,67,222,145,223,229,29,249,93,222,249,191,255,111,161,185,225,169,95,67,159,127,11,194,251,107,255,95,196,83,127,144,229,169,127,246,215,148,207,208,214,240,212,63,70,159,61,213,247,127,243,95,227,163,95,227,57,253,252,125,233,255,37,15,240,55,103,57,109,127,77,145,71,201,151,57,254,249,205,77,103,63,122,130,71,245,191,165,83,87,79,126,221,231,242,107,202,213,79,176,42,255,77,255,34,98,163,223,195,135,167,242,243,7,253,26,42,87,191,182,39,111,144,61,35,111,144,201,95,219,202,222,111,244,7,253,58,246,247,223,152,120,214,252,254,155,252,65,191,158,253,253,55,253,131,126,125,39,171,128,255,31,25,56,36,147,255,145,7,95,63,255,53,1,95,127,255,181,0,95,127,255,181,1,95,127,255,117,8,254,175,255,31,49,91,138,108,178,220,254,154,252,59,100,86,228,84,254,254,53,8,6,100,252,63,251,131,220,103,127,13,189,239,62,19,24,255,55,225,41,159,253,24,203,222,175,249,31,65,86,127,115,146,89,249,251,215,226,191,127,11,251,247,175,195,127,255,150,246,239,223,128,255,254,173,126,13,145,121,163,111,126,131,95,227,255,254,139,127,3,250,236,55,96,252,126,3,163,7,88,103,252,90,162,3,184,61,233,240,63,40,33,57,255,53,9,15,26,20,225,2,93,128,246,255,247,31,36,99,51,58,228,255,38,220,229,187,95,139,198,74,109,127,237,95,91,104,240,7,255,38,162,147,126,45,208,76,250,230,113,16,61,255,51,254,255,175,207,244,18,29,98,244,18,62,255,53,120,46,254,179,63,232,119,227,119,5,111,161,45,247,201,180,253,181,104,78,133,182,127,146,234,192,223,80,225,252,101,127,210,175,245,107,252,215,22,158,161,45,89,80,134,247,235,90,58,0,151,223,28,115,129,249,249,131,82,250,251,215,97,189,247,107,16,189,255,111,166,15,105,17,198,227,215,229,255,163,253,175,205,227,253,117,236,223,191,49,183,79,126,141,63,205,234,213,31,99,157,250,21,125,254,191,49,206,191,46,209,5,52,197,156,64,199,2,214,111,168,115,4,61,139,191,127,35,251,247,175,195,127,255,198,74,55,240,20,254,254,181,248,187,95,255,63,18,58,56,123,1,157,142,255,39,76,15,249,30,125,9,125,126,131,255,232,55,251,53,254,154,191,232,215,250,53,254,239,63,9,176,126,237,95,227,215,254,143,136,182,127,146,63,7,191,169,246,3,62,254,181,181,31,51,31,191,153,242,193,175,205,124,132,191,191,250,139,193,7,191,110,208,230,171,191,72,96,255,58,220,198,104,120,250,44,240,33,190,13,73,251,181,34,62,196,175,245,255,89,31,98,239,235,232,58,167,115,126,253,191,201,211,63,86,23,145,46,48,159,15,250,16,52,255,127,19,124,8,252,253,107,234,223,176,235,50,231,194,219,190,79,241,107,201,223,127,147,200,55,248,249,175,209,223,127,11,240,242,223,228,251,19,191,86,199,191,128,30,19,93,192,112,255,34,204,63,62,55,250,196,248,16,232,227,55,85,253,241,107,170,15,1,253,241,107,170,15,241,107,17,95,255,154,234,67,252,154,22,39,245,33,244,29,249,93,222,145,223,229,29,150,251,223,64,240,233,242,151,78,199,175,241,252,183,162,127,126,45,248,19,255,210,175,109,248,235,55,252,77,229,51,16,208,240,215,175,243,155,250,254,196,175,213,243,39,254,173,95,227,71,254,196,251,62,26,183,90,58,253,91,55,190,241,163,231,255,47,207,143,198,241,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,255,59,158,203,175,153,163,248,9,202,199,254,215,156,143,253,61,127,79,63,39,219,205,87,220,38,31,139,184,222,228,99,37,119,244,155,254,73,38,191,128,156,232,127,77,57,166,49,195,253,77,255,38,205,89,252,58,248,238,215,249,53,190,250,147,126,243,148,243,104,127,211,175,35,249,225,63,72,254,254,53,240,247,159,164,57,8,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,255,152,230,223,126,13,206,5,186,92,228,175,169,127,255,186,156,231,144,190,127,11,175,111,124,246,91,120,125,255,90,218,135,251,92,250,238,127,46,125,255,90,182,111,228,22,57,95,167,125,255,90,220,247,175,213,233,251,183,236,244,253,91,14,244,253,91,14,244,253,91,70,251,254,117,58,125,255,58,182,239,95,147,231,233,55,160,239,255,239,63,233,199,132,38,255,144,174,67,153,60,51,255,253,107,218,191,127,29,254,251,215,114,121,102,254,251,215,214,191,41,89,195,121,161,95,223,254,205,52,38,252,204,223,60,110,204,191,254,205,184,32,71,139,252,146,89,171,178,185,99,228,225,117,124,156,135,146,49,72,14,251,119,99,62,148,60,148,140,235,55,224,239,127,45,238,31,239,242,184,120,140,200,237,254,215,148,175,252,117,152,199,126,3,206,109,255,26,156,203,253,138,243,215,191,134,182,197,247,191,182,246,67,185,83,206,147,154,220,154,249,12,253,34,143,252,107,107,191,191,182,240,21,143,81,254,230,185,230,49,202,223,76,127,30,35,222,253,245,188,119,193,131,191,174,124,71,121,97,151,91,253,175,41,119,155,4,127,127,245,23,165,22,182,203,81,227,251,95,107,195,251,191,182,247,190,201,97,255,26,222,184,110,147,195,254,245,136,54,120,223,204,167,244,229,230,19,127,155,28,54,230,19,127,155,28,54,229,239,255,35,252,253,107,113,95,191,254,127,36,121,198,120,14,155,254,254,151,240,189,195,245,55,248,151,144,191,70,30,91,248,52,204,97,99,222,77,14,27,107,52,191,166,237,71,198,252,155,105,14,251,215,244,114,216,191,142,205,113,154,54,95,41,236,95,135,219,184,172,226,143,114,216,63,202,97,255,236,229,176,241,248,57,236,255,142,16,146,28,118,110,249,235,247,255,53,229,51,252,48,252,245,123,211,31,59,191,6,3,231,28,246,1,253,252,246,175,241,163,124,245,109,159,15,241,139,126,115,246,139,62,108,157,250,199,152,55,127,205,127,72,253,16,107,99,241,183,111,99,213,94,91,27,139,191,141,141,21,91,245,159,253,73,198,198,138,46,3,159,91,120,252,183,177,177,191,134,216,159,63,201,183,177,191,70,199,198,26,153,144,53,211,208,198,254,90,42,39,191,129,235,155,255,223,181,177,176,53,191,185,234,92,223,198,130,38,93,27,107,228,28,246,212,183,7,230,51,244,251,235,168,156,161,95,245,35,254,36,99,99,213,143,248,147,140,141,85,63,130,199,104,236,179,255,174,89,231,253,13,245,111,232,129,223,156,116,127,18,252,253,107,252,69,233,175,33,235,192,248,219,183,177,106,207,3,27,107,222,255,117,236,223,178,246,250,107,168,141,125,223,117,98,188,255,99,138,143,191,78,140,177,250,235,196,24,171,191,78,12,27,107,214,137,111,107,99,29,174,223,188,141,197,124,223,100,99,255,159,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs1c.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs1c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs1c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs1c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs1c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'vs3c' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 71 instruction slots used, 23 registers</para><para>Pixel Shader: approximately 18 instruction slots used (2 texture, 16 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class vs3c : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerVertex, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'vs3c' shader</summary>
		public vs3c()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			vs3c.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			vs3c.cid0 = state.GetNameUniqueID("v_SH");
			vs3c.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			vs3c.cid2 = state.GetNameUniqueID("v_lights");
			vs3c.cid3 = state.GetNameUniqueID("p_EmissiveColour");
			vs3c.cid4 = state.GetNameUniqueID("p_fogColourAndGamma");
			vs3c.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			vs3c.sid1 = state.GetNameUniqueID("CustomTextureSampler");
			vs3c.tid0 = state.GetNameUniqueID("CustomTexture");
			vs3c.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != vs3c.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[21], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[20], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[13], ref this.vreg[14], ref this.vreg[15], ref this.vreg[16], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[9], ref this.vreg[10], ref this.vreg[11], ref this.vreg[12], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				vs3c.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				vs3c.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(vs3c.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					vs3c.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref vs3c.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((vs3c.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			vs3c.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out vs3c.fx, vs3c.fxb, 68, 23);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 4;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(vs3c.vin[i]));
			index = vs3c.vin[(i + 4)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[17] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[18] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[19] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[22] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'v_lights'</summary>
		private static int cid2;
		/// <summary>Set the shader array value 'float4 v_lights[9]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetV_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 9)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 9)); i = (i + 1))
			{
				val = value[ri];
				this.vreg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.vreg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 v_lights[9]'</summary>
		public Microsoft.Xna.Framework.Vector4[] V_lights
		{
			set
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[1] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid4;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[23];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,252,135,0,1,3,131,0,5,1,0,0,1,144,135,0,1,23,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,196,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,216,135,0,0,1,2,131,0,0,1,4,131,0,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,128,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,232,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,12,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,48,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,156,1,0,1,0,1,1,1,184,138,0,0,1,1,1,228,1,0,1,0,1,2,139,0,0,1,15,1,140,1,0,1,0,1,15,1,168,138,0,0,1,15,1,244,1,0,1,0,1,16,1,8,138,0,0,1,16,1,24,1,0,1,0,1,16,1,44,138,0,0,1,16,1,240,135,0,0,1,3,1,0,1,0,1,16,1,108,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,64,1,0,1,0,1,16,1,60,131,0,0,1,93,134,0,0,1,16,1,88,1,0,1,0,1,16,1,84,1,0,1,0,1,16,1,160,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,116,1,0,1,0,1,16,1,112,131,0,0,1,93,134,0,0,1,16,1,140,1,0,1,0,1,16,1,136,1,0,1,0,1,16,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,180,1,0,1,0,1,16,1,176,131,0,0,1,93,134,0,0,1,16,1,204,1,0,1,0,1,16,1,200,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,2,132,255,0,138,0,0,1,7,1,108,1,16,1,42,1,17,1,1,1,0,1,0,1,3,131,0,0,1,4,1,108,135,0,0,1,36,1,0,1,0,1,2,1,96,1,0,1,0,1,2,1,136,138,0,0,1,2,1,56,131,0,0,1,28,1,0,1,0,1,2,1,43,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,2,1,36,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,4,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,4,1,44,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,8,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,9,1,0,1,0,1,48,1,10,1,0,1,0,1,160,1,11,1,0,1,0,1,80,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,15,1,0,1,47,1,0,1,16,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,87,1,0,1,0,1,16,1,60,1,0,1,0,1,16,1,35,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,34,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,9,1,32,1,15,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,17,1,194,1,0,1,18,133,0,0,1,32,1,23,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,25,1,96,1,31,1,18,1,0,1,18,133,0,0,1,96,1,37,1,96,1,43,1,18,1,0,1,18,133,0,0,1,96,1,49,1,96,1,55,1,18,1,0,1,18,133,0,0,1,96,1,61,1,96,1,67,1,18,1,0,1,18,133,0,0,1,96,1,73,1,96,1,79,1,18,1,0,1,18,133,0,0,1,48,1,85,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,2,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,3,1,4,1,200,1,15,1,0,1,6,1,0,1,108,1,248,1,148,1,235,1,5,1,1,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,23,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,24,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,25,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,6,1,26,1,0,1,200,1,7,1,0,1,2,1,0,1,198,1,180,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,3,1,2,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,0,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,7,1,0,1,1,1,4,1,103,1,27,1,98,1,139,1,6,1,3,1,3,1,200,1,7,1,0,1,4,1,4,1,20,1,27,1,192,1,139,131,6,0,1,200,1,7,1,0,1,2,1,4,1,20,1,27,1,192,1,139,1,6,1,0,1,0,1,88,1,40,1,0,1,7,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,6,1,20,1,9,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,9,1,9,1,22,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,6,1,6,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,6,1,20,1,0,1,200,1,7,1,0,1,7,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,36,1,9,1,0,1,0,1,190,1,190,1,0,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,2,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,198,1,161,1,1,1,5,1,128,1,176,1,72,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,23,1,0,1,6,1,0,1,192,1,27,1,108,1,225,1,4,1,2,1,128,1,88,1,29,1,0,1,4,1,0,1,240,1,108,1,27,1,225,1,2,1,0,1,129,1,88,1,29,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,108,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,192,1,235,1,3,1,0,1,6,1,168,1,75,1,8,1,0,1,0,1,190,1,108,1,130,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,27,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,108,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,190,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,190,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,108,1,0,1,225,1,3,1,0,1,0,1,21,1,1,131,0,0,1,205,1,190,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,190,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,190,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,62,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,62,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,62,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,148,0,0,1,1,132,255,0,138,0,0,1,21,1,184,1,16,1,42,1,17,1,1,1,0,1,0,1,16,1,56,1,0,1,0,1,5,1,128,135,0,0,1,36,1,0,1,0,1,15,1,160,1,0,1,0,1,15,1,200,138,0,0,1,15,1,120,131,0,0,1,28,1,0,1,0,1,15,1,107,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,15,1,100,131,0,0,1,68,1,0,1,2,131,0,0,1,23,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,204,1,0,1,2,1,0,1,23,1,0,1,216,132,0,0,1,1,1,212,1,0,1,0,1,1,1,228,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,5,1,64,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,6,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,10,1,0,1,0,1,48,1,11,1,0,1,0,1,160,1,12,1,0,1,0,1,80,1,13,1,0,1,0,1,16,1,14,1,0,1,48,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,110,1,0,1,0,1,16,1,83,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,55,1,0,1,0,1,16,1,60,1,0,1,0,1,16,1,53,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,10,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,16,1,96,1,22,1,18,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,16,1,40,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,41,1,96,1,47,1,18,1,0,1,18,133,0,0,1,96,1,53,1,96,1,59,1,18,1,0,1,18,133,0,0,1,96,1,65,1,96,1,71,1,18,1,0,1,18,133,0,0,1,96,1,77,1,96,1,83,1,18,1,0,1,18,133,0,0,1,96,1,89,1,96,1,95,1,18,1,0,1,18,133,0,0,1,96,1,101,1,64,1,107,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,9,1,0,1,148,1,177,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,7,1,0,1,27,1,27,1,198,1,161,1,1,1,12,1,9,1,200,1,15,1,0,1,0,1,160,1,27,1,136,1,0,1,161,1,6,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,6,1,24,1,0,1,92,1,15,1,0,1,4,1,160,1,27,1,136,1,177,1,161,1,6,1,25,1,9,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,6,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,171,1,6,1,23,1,0,1,92,1,2,1,0,1,9,1,0,131,27,0,1,161,1,1,1,9,1,9,1,200,1,15,1,0,1,0,1,160,1,177,1,52,1,148,1,171,1,6,1,23,1,0,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,6,1,25,1,4,1,92,1,8,1,0,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,10,1,9,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,6,1,25,1,4,1,200,1,15,1,0,1,3,1,160,1,108,1,255,1,143,1,171,1,6,1,24,1,3,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,6,1,23,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,6,1,1,1,0,1,200,1,4,131,0,0,1,248,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,1,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,0,1,11,1,0,1,200,1,4,1,0,1,7,1,0,1,195,1,190,1,0,1,176,1,0,1,12,1,0,1,20,1,17,1,0,1,9,1,0,1,195,1,190,1,27,1,176,1,0,1,9,1,1,1,168,1,36,1,7,1,9,1,0,1,195,1,190,1,0,1,144,1,0,1,10,1,11,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,9,1,9,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,7,1,7,1,0,1,200,1,1,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,6,1,2,1,0,1,200,1,2,1,0,1,3,1,0,1,195,1,190,1,0,1,240,1,3,1,2,1,0,1,200,1,4,1,0,1,3,1,0,1,191,1,190,1,0,1,240,1,4,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,13,1,1,1,168,1,18,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,14,1,13,1,20,1,20,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,15,1,1,1,168,1,40,1,4,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,16,1,14,1,20,1,18,131,0,0,1,190,1,190,1,27,1,176,1,3,1,13,1,1,1,168,1,68,1,4,1,0,1,0,1,190,1,190,1,0,1,144,1,3,1,15,1,15,1,20,1,24,131,0,0,1,190,1,190,1,27,1,176,1,3,1,14,1,1,1,168,1,136,1,4,1,1,1,0,1,18,1,18,1,0,1,208,1,0,1,0,1,16,1,20,1,31,1,0,1,3,1,0,1,167,1,167,1,27,1,224,1,2,1,4,1,5,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,5,1,5,1,22,1,200,1,15,1,128,1,2,132,0,0,1,224,1,2,1,4,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,1,1,4,1,201,1,27,1,98,1,139,131,3,0,1,200,1,7,1,0,1,4,1,4,1,186,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,7,1,0,1,2,1,4,1,186,1,27,1,192,1,139,1,3,1,0,1,0,1,88,1,23,1,0,1,3,1,4,1,186,1,192,1,27,1,160,1,3,1,20,1,129,1,200,1,7,1,128,1,4,1,0,1,201,1,108,1,0,1,225,131,0,0,1,200,1,7,1,0,1,7,1,0,1,21,1,108,1,0,1,225,131,0,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,240,1,2,1,2,1,0,1,168,1,33,1,9,1,0,1,0,1,190,1,190,1,2,1,208,1,4,1,4,1,2,1,168,1,24,1,9,1,1,1,0,1,180,1,180,1,0,1,208,1,1,1,1,1,8,1,88,1,132,1,2,1,9,1,0,1,27,1,27,1,108,1,161,1,1,1,5,1,128,1,176,1,24,131,0,0,1,190,1,190,1,65,1,208,1,3,1,3,1,22,1,88,1,39,1,0,1,6,1,0,1,192,1,27,1,198,1,225,1,4,1,2,1,128,1,88,1,45,1,0,1,4,1,0,1,240,1,177,1,27,1,225,1,2,1,0,1,129,1,88,1,45,1,0,1,1,1,0,1,240,1,177,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,177,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,177,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,177,1,192,1,235,1,3,1,0,1,6,1,168,1,78,1,8,1,0,1,0,1,252,1,108,1,128,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,198,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,27,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,252,1,16,1,42,1,17,131,0,0,1,1,1,24,131,0,0,1,228,135,0,0,1,36,135,0,0,1,236,139,0,0,1,196,131,0,0,1,28,131,0,0,1,182,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,175,131,0,0,1,88,1,0,1,2,131,0,0,1,2,133,0,0,1,96,131,0,0,1,112,131,0,0,1,144,1,0,1,3,131,0,0,1,1,133,0,0,1,152,135,0,0,1,168,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,152,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,228,1,16,1,0,1,5,132,0,0,1,8,134,0,0,1,44,1,99,1,0,1,3,1,0,1,7,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,242,1,160,1,0,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,96,1,11,1,18,1,0,1,18,133,0,0,1,16,1,17,1,0,1,0,1,34,133,0,0,1,16,1,24,1,80,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,48,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,22,1,135,1,4,1,4,1,0,1,192,1,192,1,198,1,225,1,3,1,3,1,1,1,22,1,135,1,0,1,5,1,0,1,192,1,192,1,27,1,161,1,5,1,1,1,1,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,192,1,171,1,4,1,0,1,5,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,4,1,0,1,0,1,200,1,7,131,0,0,1,180,1,27,1,0,1,225,131,0,0,1,200,1,7,131,0,0,1,180,1,192,1,192,1,235,1,0,1,2,1,1,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,27,1,198,1,225,1,3,1,0,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,131,0,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,2,149,0,0,132,255,0,138,0,0,1,6,1,168,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,132,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,1,1,244,1,0,1,0,1,2,1,28,138,0,0,1,1,1,204,131,0,0,1,28,1,0,1,0,1,1,1,191,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,184,131,0,0,1,48,1,0,1,2,131,0,0,1,23,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,23,229,0,0,229,0,0,229,0,0,199,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,81,1,0,1,9,138,0,0,1,88,1,198,131,0,0,1,1,131,0,0,1,4,131,0,0,1,6,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,32,1,80,1,11,1,0,1,0,1,112,1,80,1,0,1,1,1,241,1,81,1,0,1,2,1,242,1,82,1,0,1,3,1,243,1,83,1,0,1,4,1,116,1,84,1,0,1,5,1,245,1,160,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,54,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,25,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,23,176,0,0,1,63,1,128,142,0,0,1,240,1,85,1,64,1,8,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,12,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,16,1,96,1,22,1,18,1,0,1,18,133,0,0,1,96,1,28,1,96,1,34,1,18,1,0,1,18,133,0,0,1,96,1,40,1,96,1,46,1,18,1,0,1,18,133,0,0,1,96,1,52,1,96,1,58,1,18,1,0,1,18,133,0,0,1,96,1,64,1,96,1,70,1,18,1,0,1,18,133,0,0,1,96,1,76,1,0,1,0,1,34,133,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,4,1,71,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,9,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,10,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,11,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,2,1,12,1,0,1,200,1,1,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,13,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,15,1,0,1,200,1,4,1,0,1,5,1,0,1,195,1,190,1,0,1,176,1,0,1,14,1,0,1,200,1,1,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,13,1,0,1,200,1,2,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,14,1,0,1,200,1,4,1,0,1,3,1,0,1,167,1,167,1,0,1,175,1,2,1,15,1,0,1,20,1,24,1,0,1,3,1,0,1,167,1,167,1,27,1,175,1,2,1,16,1,1,1,169,1,135,1,128,1,5,1,0,131,192,0,1,193,1,1,1,1,1,22,1,200,1,15,1,128,1,2,132,0,0,1,226,1,3,1,3,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,3,1,20,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,27,1,192,1,139,1,3,1,6,1,6,1,200,1,14,1,0,1,1,1,4,1,118,1,27,1,118,1,139,131,3,0,1,200,1,4,131,0,0,1,205,1,205,1,0,1,240,1,5,1,5,1,0,1,200,1,7,1,0,1,2,1,4,1,192,1,27,1,192,1,139,1,3,1,0,1,0,1,200,1,7,1,0,1,3,1,4,1,192,1,192,1,0,1,160,1,3,1,20,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,21,1,0,1,88,1,65,131,0,0,1,190,1,190,1,198,1,240,1,2,1,2,1,128,1,168,1,33,1,9,1,1,1,0,1,201,1,201,1,0,1,208,1,1,1,1,1,2,1,172,1,24,1,9,1,2,1,0,1,190,1,190,1,0,1,208,1,4,1,4,1,5,1,200,1,7,1,128,1,4,1,0,1,180,1,198,1,0,1,225,1,5,1,0,1,0,1,88,1,132,1,2,1,9,1,0,131,27,0,1,161,1,2,1,8,1,130,1,176,1,71,1,0,1,7,1,0,1,192,1,198,1,65,1,193,1,5,1,0,1,22,1,88,1,23,1,0,1,6,1,0,1,192,1,27,1,108,1,225,1,4,1,2,1,128,1,88,1,29,1,0,1,4,1,0,1,240,1,108,1,108,1,225,1,2,1,0,1,129,1,88,1,29,1,0,1,1,1,0,1,5,1,108,1,27,1,225,1,1,1,0,1,128,1,200,1,14,1,0,1,2,1,0,1,118,1,108,1,12,1,235,1,3,1,0,1,1,1,200,1,7,1,0,1,5,1,0,1,192,1,108,1,20,1,235,1,3,1,0,1,4,1,200,1,7,1,0,1,3,1,0,1,192,1,108,1,192,1,235,1,3,1,0,1,6,1,168,1,75,1,8,1,0,1,0,1,180,1,108,1,130,1,128,1,9,1,255,1,22,1,76,1,40,1,4,1,8,1,4,1,198,1,108,1,27,1,160,1,8,1,255,1,0,1,77,1,34,1,0,1,1,1,0,1,190,1,205,1,177,1,240,1,6,1,7,1,0,1,76,1,68,1,6,1,0,1,0,1,177,1,177,1,108,1,225,1,1,1,0,1,0,1,201,1,8,131,0,0,1,207,1,205,1,0,1,240,1,4,1,7,1,0,1,201,1,1,1,0,1,2,1,0,1,200,1,205,1,0,1,240,1,1,1,7,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,201,1,201,1,0,1,240,1,2,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,8,1,8,1,0,1,88,1,72,1,1,1,4,1,0,1,27,1,177,1,198,1,225,1,0,1,4,1,129,1,88,1,30,1,1,1,2,1,0,1,209,1,198,1,108,1,225,1,2,1,1,1,129,1,88,1,29,1,0,1,1,1,0,1,132,1,108,1,108,1,225,1,5,1,1,1,128,1,36,1,135,1,7,1,3,1,0,1,180,1,108,1,108,1,225,1,3,1,0,1,128,1,21,1,1,131,0,0,1,205,1,205,1,108,1,240,1,3,1,7,1,2,1,13,1,132,1,6,1,1,1,0,1,30,1,205,1,198,1,240,1,1,1,7,1,6,1,65,1,17,1,4,1,1,1,0,1,21,1,205,1,198,1,240,1,2,1,7,1,1,1,64,1,44,1,6,1,1,1,0,1,172,1,219,1,108,1,161,1,4,1,1,1,1,1,64,1,19,1,0,1,8,1,0,1,197,1,111,1,108,1,161,1,6,1,4,1,0,1,168,1,30,1,1,1,5,1,0,1,17,1,252,1,65,1,129,1,4,1,2,1,7,1,168,1,30,1,0,1,2,1,0,1,193,1,252,1,0,1,129,1,0,1,8,1,7,1,20,1,14,1,0,1,3,1,0,1,22,1,252,1,177,1,161,1,6,1,5,1,2,1,12,1,17,1,2,1,3,1,0,1,177,1,108,1,177,1,225,1,3,1,2,1,1,1,56,1,129,1,0,1,5,1,0,1,177,1,27,1,108,1,225,1,5,1,0,1,0,1,56,1,17,1,0,1,1,1,0,1,108,1,27,1,108,1,225,1,1,1,0,1,8,1,56,1,66,1,1,1,1,1,0,1,177,1,108,1,198,1,225,1,8,1,0,1,1,1,20,1,1,1,0,1,6,1,0,1,62,1,13,1,108,1,111,1,18,1,7,1,0,1,12,1,20,1,0,1,4,1,0,1,27,1,198,1,198,1,225,1,1,1,1,1,6,1,20,1,2,1,0,1,6,1,0,1,62,1,13,1,198,1,111,1,19,1,7,1,1,1,12,1,72,131,0,0,1,27,1,177,1,177,1,225,1,0,1,0,1,4,1,168,1,20,1,4,1,6,1,0,1,62,1,13,1,66,1,79,1,17,1,7,1,1,1,168,1,39,1,4,1,5,1,0,1,190,1,20,1,130,1,192,1,6,1,5,1,1,1,168,1,71,1,1,1,4,1,0,1,192,1,192,1,128,1,192,1,5,1,4,1,4,1,168,1,135,1,1,1,3,1,0,1,192,1,20,1,192,1,192,1,4,1,3,1,4,1,168,1,39,1,1,1,0,1,0,1,192,1,21,1,131,1,192,1,3,1,1,1,7,1,168,1,71,1,1,1,0,1,0,1,192,1,20,1,195,1,192,1,0,1,2,1,7,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,224,1,0,1,1,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {144,59,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,141,223,92,126,255,181,241,55,253,255,79,250,53,229,239,223,150,254,255,235,232,103,63,122,126,184,207,175,71,255,255,253,47,155,223,127,250,107,184,121,249,183,116,34,126,173,95,227,246,243,194,112,86,33,156,63,232,55,149,239,254,173,95,227,246,112,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,252,250,191,6,199,123,19,4,106,38,78,251,175,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,111,244,155,69,218,80,204,216,236,184,54,59,67,109,118,127,141,63,8,120,225,235,95,71,190,178,15,226,84,12,161,251,185,140,227,245,111,131,113,254,102,145,239,241,119,236,189,31,163,255,63,41,243,229,172,88,94,224,239,95,247,215,136,191,143,152,55,246,254,111,72,255,63,91,54,109,182,156,50,4,140,225,245,60,155,229,245,175,241,107,227,157,95,83,219,224,115,188,155,122,239,254,121,244,229,223,229,77,192,127,134,223,127,45,251,231,175,241,199,81,135,127,149,206,23,158,95,78,191,255,6,191,153,251,251,183,163,223,71,222,223,191,92,127,7,13,74,253,29,224,254,20,253,254,247,164,207,30,211,255,255,84,253,251,247,166,223,223,208,255,255,178,72,219,119,244,89,235,181,253,147,232,247,63,142,254,255,159,69,218,254,93,244,217,223,230,181,253,151,232,247,127,78,219,253,122,242,131,219,255,223,244,152,225,62,198,7,191,246,255,253,127,255,95,255,247,239,241,107,156,188,57,126,242,59,209,159,255,228,175,33,159,1,255,223,137,91,253,26,233,63,68,255,252,222,250,254,175,69,255,253,1,244,115,69,255,255,147,126,13,195,211,191,214,175,241,103,41,204,191,138,63,251,53,233,191,95,239,215,248,155,244,51,201,83,252,181,127,237,175,201,223,252,58,62,121,55,62,202,171,127,237,175,67,220,250,107,242,127,222,231,187,253,207,233,227,123,191,255,206,175,241,69,49,173,171,166,58,111,211,173,87,119,210,111,63,127,253,60,21,110,72,79,170,197,170,40,233,151,135,227,189,79,199,15,239,239,141,247,14,246,247,127,141,223,133,134,69,60,247,7,17,135,252,73,248,61,249,53,192,251,191,233,159,36,159,255,154,127,208,175,165,191,255,26,24,242,111,240,155,254,69,230,247,95,147,126,127,194,36,248,77,169,205,127,70,223,253,103,127,17,193,249,181,127,205,95,227,215,39,88,255,25,255,255,215,229,239,127,125,130,199,127,35,5,247,107,253,154,191,198,111,73,237,255,135,63,233,215,213,119,209,238,215,252,53,190,210,182,230,239,255,236,79,250,117,152,93,25,214,95,244,107,50,126,248,156,250,254,13,126,3,250,253,255,254,131,158,112,95,210,247,175,73,125,155,246,191,166,188,255,23,161,253,111,202,253,253,154,212,254,215,208,223,127,45,250,253,43,253,253,215,161,223,255,154,14,142,255,247,95,244,155,112,31,242,142,252,46,239,200,239,242,206,255,253,127,11,205,13,79,253,26,250,252,123,96,182,95,251,255,34,158,250,179,44,79,125,242,107,201,103,248,97,120,234,119,163,63,158,234,251,191,45,253,251,156,126,254,190,244,255,127,142,7,248,219,178,156,254,107,191,166,200,163,228,203,28,255,252,182,166,179,31,61,63,212,71,237,139,157,135,174,30,254,186,207,229,215,148,219,159,32,83,241,59,254,26,191,233,95,68,108,250,123,144,102,253,61,13,188,29,54,33,191,233,255,244,107,155,15,244,81,185,253,131,126,13,149,231,95,219,147,115,200,188,145,115,232,130,95,219,202,252,111,244,7,253,58,246,247,223,152,100,197,252,254,155,252,65,191,158,253,253,55,253,131,126,125,167,35,0,255,63,50,112,72,23,252,71,30,124,253,252,215,4,124,253,253,215,2,124,253,253,215,6,124,253,253,215,33,248,191,254,127,196,226,32,178,201,250,66,116,11,116,133,209,15,191,225,31,132,62,127,157,95,227,47,35,221,242,151,253,65,78,103,252,53,244,62,233,164,95,227,151,255,65,191,27,203,186,232,36,129,199,58,134,225,253,90,252,187,131,39,127,3,222,127,246,39,145,94,249,131,220,103,2,207,124,38,48,254,111,26,183,124,246,99,172,67,126,205,255,8,125,252,182,164,123,228,239,95,139,255,254,237,236,223,191,14,255,253,219,219,191,127,3,254,251,119,160,191,127,45,139,203,127,246,7,255,86,244,247,111,64,127,255,218,172,123,255,51,254,255,175,207,243,5,186,177,95,66,227,249,13,254,160,223,241,215,248,53,24,206,175,77,52,132,238,250,205,21,238,175,77,180,195,223,191,133,254,141,182,248,251,183,20,61,250,107,253,58,68,231,95,251,215,248,175,255,32,249,29,109,255,111,254,253,215,102,152,127,205,95,244,11,217,101,248,207,254,39,208,231,215,161,207,126,109,250,254,119,252,53,190,250,139,198,76,187,95,243,111,250,117,232,111,34,192,175,247,235,26,61,159,254,223,127,49,209,236,111,250,53,82,232,220,95,227,111,250,13,244,189,95,151,245,191,224,254,235,210,223,120,15,48,241,158,124,199,112,126,29,154,103,30,35,198,134,207,49,95,191,62,125,70,244,254,131,126,3,110,255,155,243,231,191,166,254,253,235,209,223,191,190,254,253,107,114,219,95,147,105,65,176,126,93,244,251,107,165,255,55,227,241,235,240,252,252,26,127,80,74,125,128,207,126,61,208,78,191,251,245,120,236,62,78,191,54,247,161,127,83,123,240,58,241,108,250,167,41,172,95,227,215,5,222,191,166,142,241,215,101,158,249,223,254,32,204,219,175,67,159,255,58,58,86,252,13,58,10,205,126,141,191,232,227,95,131,137,9,254,251,143,126,29,197,31,243,129,241,254,214,58,239,50,63,255,247,31,244,219,80,251,95,151,223,255,53,245,239,175,244,239,223,132,218,255,73,127,18,254,159,48,159,252,250,255,209,175,253,107,252,42,134,47,60,252,27,252,71,191,214,175,241,127,255,73,191,13,205,157,204,227,175,77,223,139,173,253,117,28,109,126,29,194,235,63,82,184,127,241,175,163,124,68,188,242,31,25,158,130,28,26,25,129,28,254,90,250,187,200,225,127,102,109,30,125,22,248,81,223,134,212,255,90,17,63,234,215,250,255,172,31,181,247,117,244,177,211,127,191,254,223,228,233,66,171,23,73,215,154,207,7,253,40,162,243,223,4,63,234,9,243,133,252,13,223,70,230,89,229,237,215,112,126,213,175,37,127,255,77,152,167,95,139,228,226,215,252,53,254,26,253,253,183,0,15,253,77,190,79,245,107,117,124,172,95,195,234,60,134,11,94,228,207,241,25,244,165,241,163,208,199,111,202,48,193,151,191,134,254,14,157,243,149,254,14,29,34,126,212,175,105,113,82,63,74,223,145,223,229,29,249,93,222,1,174,68,11,238,183,203,95,58,29,191,198,211,223,154,254,249,181,224,83,253,87,191,182,225,175,183,191,169,124,6,2,26,254,154,253,166,155,125,170,127,235,215,248,145,79,245,255,182,71,115,3,118,30,254,173,27,223,144,231,71,255,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,55,243,92,126,205,28,200,79,80,158,236,127,252,53,144,147,254,61,127,79,201,75,203,179,243,13,230,164,145,79,48,57,105,228,44,144,147,54,121,13,228,113,255,71,202,119,73,174,242,55,253,155,52,87,194,249,218,95,231,215,248,234,79,250,237,57,127,247,21,231,243,240,217,111,175,249,188,95,135,211,80,156,251,240,62,255,107,232,243,191,38,242,249,255,141,220,34,127,254,99,156,243,248,117,254,32,228,82,76,95,191,150,246,245,219,122,125,225,179,223,214,235,75,243,200,222,231,210,87,255,115,233,203,228,152,101,45,75,114,206,191,46,231,244,164,175,223,206,235,11,159,253,118,94,95,191,182,194,116,159,75,95,253,207,165,175,95,219,246,245,107,113,95,248,91,114,152,191,1,253,253,127,255,73,248,14,185,83,228,135,126,51,155,171,230,28,52,183,149,191,127,77,254,251,215,178,127,115,78,154,105,244,27,240,92,253,58,127,16,218,254,166,250,62,242,68,248,251,55,182,127,255,90,252,247,111,66,127,255,110,60,207,146,251,146,60,229,175,255,31,153,220,36,37,143,254,160,255,145,242,164,63,166,48,240,57,242,220,130,35,227,192,48,229,111,201,147,255,38,250,55,250,64,123,147,55,7,78,248,219,228,205,37,55,46,56,74,94,23,180,150,252,60,250,198,26,6,112,4,126,200,13,27,58,253,122,140,235,63,45,185,45,198,47,204,169,3,103,172,29,56,62,253,53,255,166,95,75,115,234,200,123,35,79,28,203,169,227,61,228,189,229,255,146,175,215,247,126,157,223,128,222,195,231,191,54,231,175,5,167,31,163,207,126,3,165,55,242,239,63,246,107,200,90,194,111,168,127,255,186,140,195,95,243,23,37,193,223,95,241,216,126,3,162,13,126,23,94,164,126,52,111,142,254,126,3,202,225,165,220,231,175,197,239,248,57,117,110,171,57,245,95,223,195,73,120,64,240,55,56,152,60,185,193,225,55,96,30,16,28,228,253,95,155,241,87,120,191,206,175,255,107,252,198,156,207,247,115,242,232,195,228,228,127,125,194,235,215,255,53,254,183,63,8,115,133,57,192,250,129,244,135,185,53,52,255,202,230,228,41,127,250,31,161,141,240,209,111,250,31,129,238,202,71,255,208,175,201,191,91,62,225,191,19,199,39,252,247,111,104,255,254,13,248,239,223,232,215,144,60,45,253,253,47,249,249,248,95,83,243,241,191,129,192,102,62,49,185,127,252,77,232,216,220,63,214,213,252,92,63,225,248,47,253,26,148,235,55,243,242,107,184,121,161,28,237,111,240,31,201,187,95,253,197,178,134,229,195,251,74,251,254,117,184,141,203,166,254,40,119,255,163,220,253,207,94,238,30,143,159,187,255,207,8,176,228,238,127,137,229,175,127,240,215,148,207,240,195,240,215,223,69,127,236,252,26,12,156,115,247,7,244,243,219,191,198,143,242,244,255,111,121,62,196,31,252,109,217,31,132,47,248,123,254,158,6,222,206,55,228,15,254,6,170,243,224,91,248,190,3,254,254,77,236,223,226,123,192,142,195,46,130,207,125,95,194,172,35,195,191,33,254,178,190,132,89,51,199,223,144,159,95,67,251,144,191,127,45,254,219,248,18,144,163,95,67,251,80,155,193,239,251,190,5,254,54,190,133,248,0,255,217,159,4,255,9,118,0,190,197,175,53,224,91,96,125,217,248,22,178,230,238,124,139,223,246,215,8,125,11,245,209,232,115,183,94,143,53,95,248,22,102,157,61,230,91,224,61,216,66,177,153,226,91,232,123,191,142,89,139,255,181,249,111,193,201,248,27,120,23,190,224,111,192,248,137,93,55,235,234,192,45,9,254,254,53,120,108,88,175,199,239,176,223,188,22,174,254,3,250,163,190,255,160,148,251,252,181,248,29,223,183,48,235,228,24,167,177,239,190,111,241,235,121,56,24,223,194,224,128,62,127,109,197,65,222,255,181,25,127,133,247,235,252,122,228,91,252,122,29,223,2,125,24,223,226,215,35,221,247,235,253,26,255,219,31,132,185,194,28,192,199,66,127,248,219,248,22,128,253,241,175,225,124,139,95,151,225,139,111,97,252,119,248,22,152,119,223,183,192,223,190,111,129,191,125,223,2,127,255,108,250,22,102,94,16,91,232,188,4,190,5,108,192,77,190,197,255,19,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid3))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == vs3c.cid4))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.cid2))
			{
				this.SetV_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == vs3c.sid1))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((vs3c.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == vs3c.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == vs3c.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps1n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class ps1n : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel
	{
		/// <summary>Construct an instance of the 'ps1n' shader</summary>
		public ps1n()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps1n.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps1n.cid0 = state.GetNameUniqueID("v_SH");
			ps1n.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps1n.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps1n.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps1n.cid4 = state.GetNameUniqueID("p_lights");
			ps1n.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps1n.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps1n.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps1n.tid0 = state.GetNameUniqueID("CustomTexture");
			ps1n.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps1n.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps1n.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps1n.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps1n.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps1n.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps1n.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps1n.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps1n.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps1n.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps1n.fx, ps1n.fxb, 45, 54);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 5;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1n.vin[i]));
			index = ps1n.vin[(i + 5)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[4] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[3] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,4,5,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,192,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,244,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,15,1,220,1,0,1,0,1,15,1,240,138,0,0,1,16,1,180,135,0,0,1,3,1,0,1,0,1,16,1,48,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,4,1,0,1,0,1,16,132,0,0,1,93,134,0,0,1,16,1,28,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,100,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,56,1,0,1,0,1,16,1,52,131,0,0,1,93,134,0,0,1,16,1,80,1,0,1,0,1,16,1,76,1,0,1,0,1,16,1,164,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,120,1,0,1,0,1,16,1,116,131,0,0,1,93,134,0,0,1,16,1,144,1,0,1,0,1,16,1,140,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,48,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,140,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,0,1,113,1,0,1,9,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,9,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,0,1,96,1,10,1,0,1,12,1,0,1,11,1,0,1,13,1,0,1,12,1,0,1,14,1,0,1,13,1,0,1,47,1,0,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,44,131,0,0,1,45,1,0,1,0,1,16,1,46,1,0,1,0,1,16,1,49,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,36,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,48,1,12,1,18,1,3,1,18,1,0,1,112,1,21,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,32,1,21,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,48,1,47,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,80,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,7,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,7,1,2,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,7,1,8,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,7,1,4,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,7,1,0,1,177,1,180,1,0,1,225,1,6,1,2,1,0,1,200,1,7,1,0,1,9,1,0,1,177,1,180,1,0,1,225,1,5,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,180,1,0,1,225,1,1,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,108,1,180,1,192,1,235,1,1,1,8,1,2,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,5,1,8,1,9,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,8,1,7,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,6,1,4,1,6,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,5,1,4,1,5,1,200,1,7,1,0,1,4,1,0,1,27,1,192,1,180,1,235,1,1,1,4,1,2,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,5,1,5,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,5,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,4,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,220,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,196,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,7,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,112,1,11,1,0,1,0,1,96,1,12,1,0,1,0,1,16,1,13,1,0,1,32,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,75,131,0,0,1,76,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,70,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,64,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,16,1,14,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,16,1,39,1,18,1,0,1,18,135,0,0,1,96,1,40,1,196,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,80,1,76,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,144,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,10,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,10,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,8,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,8,1,15,1,0,1,92,1,15,1,0,1,7,1,160,1,27,1,136,1,177,1,161,1,8,1,16,1,10,1,200,1,15,1,0,1,7,1,160,1,198,1,136,1,0,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,8,1,14,1,3,1,92,1,2,1,0,1,10,1,0,131,27,0,1,161,1,1,1,0,1,10,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,8,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,7,1,160,1,177,1,52,1,148,1,171,1,8,1,16,1,7,1,92,1,8,1,0,1,10,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,10,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,8,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,10,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,10,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,10,1,10,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,9,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,9,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,7,1,9,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,7,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,5,1,6,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,120,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,16,1,0,1,0,1,2,1,104,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,40,1,0,1,113,1,0,1,5,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,5,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,0,1,112,1,8,1,0,1,32,1,96,1,9,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,40,131,0,0,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,44,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,241,1,85,1,80,1,5,1,0,1,0,1,18,1,1,1,194,133,0,0,1,64,1,10,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,16,1,44,1,18,1,0,1,34,131,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,6,1,0,1,200,1,8,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,7,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {180,61,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,177,223,76,126,255,181,241,247,175,97,254,249,53,126,141,223,132,254,255,235,184,63,255,127,253,252,122,244,255,223,255,178,249,253,167,191,134,163,195,59,29,248,175,251,107,252,236,209,129,251,93,133,253,166,191,169,124,247,111,253,26,63,123,253,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,248,243,235,255,26,28,31,78,16,168,153,56,237,143,210,56,237,215,209,255,127,19,113,154,246,83,160,159,223,232,215,16,184,127,157,246,19,180,161,152,177,217,113,109,254,165,161,54,187,174,205,47,31,106,179,247,107,252,193,192,253,55,211,118,254,243,107,209,255,241,90,247,115,25,235,127,246,7,129,22,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,0,142,216,58,246,62,226,226,216,251,191,33,253,255,108,217,180,217,114,10,8,60,134,215,243,108,150,215,242,59,240,194,120,241,59,222,77,189,119,127,35,250,114,203,155,164,63,140,126,255,139,188,191,71,212,225,183,61,26,253,105,244,251,95,229,253,253,119,209,239,255,156,247,247,191,71,191,255,79,254,247,191,153,252,4,77,118,244,119,208,239,79,209,239,127,29,124,70,255,255,83,245,239,223,137,126,255,237,232,255,243,72,219,199,244,217,129,215,246,13,253,254,146,254,255,87,69,218,254,12,125,246,206,107,251,167,209,239,127,146,182,251,245,228,7,183,255,191,233,49,195,253,25,16,231,215,254,191,255,239,255,235,255,254,201,95,227,228,205,241,147,223,137,254,252,241,95,83,62,195,87,191,147,52,75,127,39,250,172,212,247,127,93,250,183,165,159,127,24,253,255,95,251,53,140,28,252,90,191,198,191,167,48,255,59,254,236,215,164,255,126,189,95,227,151,235,103,191,206,175,137,207,126,45,250,44,97,250,227,145,124,199,95,251,215,254,154,220,250,215,97,30,248,217,120,84,70,254,218,95,135,56,226,215,228,255,188,207,119,7,62,223,235,127,78,31,223,251,253,119,126,141,47,138,105,93,53,213,121,155,110,189,186,147,126,251,249,235,231,169,112,94,122,82,45,86,69,73,191,60,28,239,125,58,126,120,127,111,188,119,176,191,255,107,252,4,145,236,215,253,53,126,211,191,136,64,252,131,191,198,175,241,7,253,30,6,175,223,133,200,73,99,254,131,136,75,255,36,252,158,208,239,191,230,175,241,155,254,73,242,249,175,249,7,253,90,246,247,95,139,228,235,215,215,223,127,237,63,232,215,177,191,255,58,127,208,175,107,127,255,117,255,160,95,207,254,254,235,253,65,191,190,254,78,221,252,73,191,198,111,240,155,254,69,230,247,95,211,251,253,215,162,223,127,3,158,190,95,147,96,254,103,127,18,254,255,235,243,119,191,38,225,244,107,208,103,16,157,223,132,250,254,147,254,36,226,154,191,152,94,225,246,191,38,127,255,171,248,255,104,79,115,79,120,3,119,252,254,27,16,222,255,247,95,244,235,240,148,255,154,244,217,255,205,223,253,186,191,198,87,127,209,175,199,223,255,154,250,55,250,253,77,254,32,232,142,95,243,215,248,234,15,146,246,191,9,253,68,95,191,6,127,254,187,81,251,95,235,215,248,245,233,251,95,245,7,61,161,246,191,246,175,241,155,18,236,255,140,198,240,159,253,69,191,22,227,193,184,1,214,95,244,235,242,247,104,251,215,16,29,48,150,95,227,215,145,191,191,34,28,255,179,63,233,215,38,120,166,15,224,244,235,82,63,120,23,125,252,218,218,135,208,226,55,71,31,127,16,218,227,239,95,139,254,198,56,241,119,202,127,255,90,76,27,130,241,23,201,24,126,109,30,15,222,113,99,250,138,62,251,147,148,6,191,62,190,251,139,116,76,140,23,205,183,194,4,109,254,51,30,219,175,169,99,251,53,104,108,191,46,247,243,235,243,119,191,166,194,253,53,249,157,255,140,251,249,53,121,142,126,75,250,253,127,248,147,126,93,125,23,237,208,175,255,247,175,233,245,247,107,43,14,191,166,121,255,55,248,13,152,14,126,223,191,22,245,109,218,163,221,175,195,239,252,103,127,208,111,170,243,134,247,229,247,95,139,251,146,223,127,29,250,253,175,209,177,203,123,52,174,191,232,55,225,62,228,29,249,93,222,145,223,229,157,255,251,255,254,53,248,49,58,233,215,208,231,15,131,34,248,181,255,47,210,73,173,213,73,127,238,175,41,159,161,173,209,73,127,26,125,246,84,223,255,77,126,141,143,126,141,231,244,243,247,165,255,63,230,1,254,38,172,247,159,210,239,111,126,77,147,211,117,186,230,55,97,16,255,255,127,212,135,176,227,254,117,220,87,31,244,92,126,128,46,252,53,88,23,58,61,136,71,117,210,31,244,107,168,206,251,181,3,93,8,249,250,77,85,159,253,70,196,95,230,247,223,152,120,212,252,254,155,16,15,154,223,127,83,210,1,242,59,233,39,146,127,249,157,244,15,201,180,105,195,125,253,71,6,62,201,23,255,158,72,95,250,249,175,137,190,244,247,95,11,125,233,239,191,54,250,210,223,127,29,232,93,253,253,215,133,222,213,223,127,61,234,235,215,255,143,68,86,127,83,214,175,190,28,255,250,191,198,87,127,18,190,163,190,32,155,44,167,248,238,215,135,94,86,185,199,247,208,121,191,110,240,253,95,195,186,12,223,255,6,12,239,55,208,182,128,41,250,87,244,219,175,241,107,255,250,220,255,127,102,255,54,125,255,6,212,183,129,247,27,120,253,185,207,110,223,199,111,208,235,227,55,229,62,126,13,219,7,254,238,246,129,207,92,31,66,163,223,128,62,251,191,189,119,254,111,214,227,248,254,199,196,70,113,63,191,9,233,36,249,251,215,226,191,127,83,251,247,175,195,127,255,102,246,239,223,128,255,254,205,127,13,209,167,191,134,142,253,215,84,188,68,87,9,94,248,220,125,38,120,249,246,71,222,195,239,192,241,215,96,248,164,15,255,35,188,251,27,104,127,164,19,249,239,31,179,127,255,58,252,119,66,127,227,93,240,136,209,221,4,243,63,2,28,133,249,31,253,198,191,198,95,195,191,255,218,191,198,175,141,54,127,18,108,27,120,134,240,255,131,127,67,125,31,188,231,230,227,215,100,156,126,35,253,14,188,40,182,65,108,57,125,246,7,253,198,10,95,245,54,235,245,95,155,250,250,53,248,187,175,254,98,180,249,117,181,189,126,166,56,252,58,220,198,104,99,250,44,240,23,255,40,40,144,95,43,226,47,254,90,63,242,23,35,254,226,222,215,213,145,67,254,226,175,193,122,235,215,255,155,60,29,102,245,25,201,141,253,252,215,242,218,252,218,222,239,191,142,247,251,175,235,253,254,235,185,223,55,250,139,79,28,111,254,77,240,195,158,48,63,202,223,191,134,254,253,107,233,223,240,39,126,3,254,251,55,128,142,251,155,240,127,232,15,252,77,62,34,203,28,124,175,95,11,239,178,127,41,237,127,109,105,207,255,71,251,95,135,255,102,63,146,120,157,223,53,252,76,99,248,191,249,59,227,95,254,218,218,214,248,131,226,247,73,95,191,142,252,253,55,253,90,252,142,200,55,209,0,186,89,101,71,100,221,248,147,191,14,255,13,159,234,63,251,155,204,251,66,43,252,237,116,6,124,153,95,71,63,251,221,24,95,163,103,49,246,223,14,239,115,31,191,1,247,241,155,43,78,226,79,82,115,166,133,239,79,2,127,197,131,199,32,254,164,243,205,60,127,242,111,50,159,137,206,10,223,51,58,27,112,141,238,23,157,139,249,252,205,233,231,95,243,55,201,239,191,5,250,255,155,54,249,146,190,239,234,251,146,30,78,24,211,95,100,252,197,95,203,243,23,197,103,254,74,127,255,117,254,32,223,95,20,95,91,252,69,227,99,202,239,242,142,252,46,239,48,174,191,129,224,211,213,79,191,134,62,255,213,111,73,255,252,90,240,29,255,177,95,219,232,167,127,247,55,145,207,192,196,70,63,253,107,191,137,239,59,254,90,61,223,241,223,250,53,126,228,59,106,158,203,142,251,223,186,241,141,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,77,62,151,31,144,87,250,47,56,175,244,123,254,158,241,188,210,230,220,251,175,207,185,36,151,75,55,185,119,201,37,202,239,191,22,231,71,126,211,63,73,226,123,228,225,255,179,63,233,191,160,124,202,152,251,248,77,255,38,205,79,252,58,248,142,114,54,127,210,111,146,34,103,240,21,242,24,88,23,248,131,228,239,95,3,185,136,63,73,243,178,222,231,127,13,125,254,215,68,62,71,238,226,255,230,207,127,3,205,143,34,167,110,250,250,181,180,175,223,212,235,11,159,253,166,94,95,191,150,194,116,159,75,95,253,207,165,175,95,203,246,245,107,113,95,186,254,247,235,72,190,254,171,63,233,55,243,250,194,103,191,153,215,151,174,69,122,159,75,95,253,207,165,47,179,22,137,60,8,250,50,127,255,58,156,235,149,188,139,252,253,107,241,223,191,174,253,251,215,225,191,127,61,253,27,116,145,188,149,201,227,187,181,88,202,131,253,71,248,28,127,123,109,61,154,254,90,252,183,27,247,175,195,127,255,108,224,242,235,121,184,252,152,182,253,53,60,92,36,199,45,127,203,247,191,22,127,111,112,251,53,164,111,254,91,190,255,117,248,123,131,235,175,33,184,240,223,191,38,247,253,27,252,65,88,123,248,49,129,253,15,105,190,235,47,146,191,127,45,254,251,215,180,127,255,58,252,247,175,101,255,254,13,248,239,95,91,199,37,121,47,71,7,201,125,57,58,72,254,75,232,240,187,177,76,72,14,76,242,112,191,193,31,244,95,80,30,83,241,248,143,100,188,110,189,67,198,235,214,59,240,183,89,95,160,156,35,255,45,112,126,253,127,233,191,208,124,62,193,252,151,204,250,194,175,169,235,11,10,223,206,151,194,183,243,165,240,237,124,233,56,249,111,90,75,255,139,144,43,213,117,30,187,62,129,53,179,206,252,216,245,9,172,161,9,205,228,187,95,227,215,112,235,19,232,23,184,34,143,248,107,122,235,19,38,255,216,93,159,248,53,121,220,110,125,2,207,143,214,39,188,207,127,180,62,241,163,245,137,31,173,79,112,255,255,111,88,159,192,227,175,79,108,65,9,241,250,196,239,99,245,211,221,95,83,62,195,15,163,159,182,232,143,29,124,252,107,200,250,196,1,253,252,246,175,241,243,119,45,226,67,124,222,223,132,117,149,211,83,120,186,250,233,125,124,222,223,64,237,210,175,205,60,39,58,1,114,130,191,141,157,135,253,196,223,198,223,129,253,252,53,132,79,89,103,200,223,162,7,224,123,201,119,255,183,202,160,248,94,62,236,95,167,3,251,215,185,37,236,95,207,131,253,99,2,251,31,82,95,202,250,55,248,219,247,111,212,151,178,254,141,250,78,218,151,248,94,62,110,191,102,7,183,95,83,113,131,174,49,114,45,182,251,55,128,188,88,255,6,114,226,251,55,248,219,247,111,240,183,239,223,252,154,10,7,254,13,224,200,239,195,254,205,175,161,120,42,124,254,219,247,111,126,13,197,83,199,201,127,127,211,254,13,116,6,112,133,30,242,253,27,250,238,70,255,230,255,9,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps1n.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps1n.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps1n.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps1n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1n.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps1n.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps1n.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps2n' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 43 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class ps2n : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel
	{
		/// <summary>Construct an instance of the 'ps2n' shader</summary>
		public ps2n()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps2n.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps2n.cid0 = state.GetNameUniqueID("v_SH");
			ps2n.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps2n.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps2n.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps2n.cid4 = state.GetNameUniqueID("p_lights");
			ps2n.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps2n.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps2n.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps2n.tid0 = state.GetNameUniqueID("CustomTexture");
			ps2n.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps2n.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps2n.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps2n.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps2n.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps2n.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps2n.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps2n.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps2n.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps2n.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps2n.fx, ps2n.fxb, 45, 67);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 5;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2n.vin[i]));
			index = ps2n.vin[(i + 5)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[7] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[6] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 6)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,3,4,5,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[8];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,240,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,168,135,0,0,1,8,131,0,0,1,4,131,0,0,1,1,229,0,0,158,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,220,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,144,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,36,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,180,1,0,1,0,1,1,1,208,138,0,0,1,15,1,92,1,0,1,0,1,15,1,120,138,0,0,1,15,1,196,1,0,1,0,1,15,1,216,138,0,0,1,15,1,232,1,0,1,0,1,15,1,252,138,0,0,1,16,1,12,1,0,1,0,1,16,1,32,138,0,0,1,16,1,228,135,0,0,1,3,1,0,1,0,1,16,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,52,1,0,1,0,1,16,1,48,131,0,0,1,93,134,0,0,1,16,1,76,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,104,1,0,1,0,1,16,1,100,131,0,0,1,93,134,0,0,1,16,1,128,1,0,1,0,1,16,1,124,1,0,1,0,1,16,1,212,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,168,1,0,1,0,1,16,1,164,131,0,0,1,93,134,0,0,1,16,1,192,1,0,1,0,1,16,1,188,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,48,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,140,1,0,1,0,1,2,1,164,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,100,1,0,1,113,1,0,1,9,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,9,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,0,1,96,1,10,1,0,1,12,1,0,1,11,1,0,1,13,1,0,1,12,1,0,1,14,1,0,1,13,1,0,1,47,1,0,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,44,131,0,0,1,45,1,0,1,0,1,16,1,46,1,0,1,0,1,16,1,49,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,36,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,48,1,12,1,18,1,3,1,18,1,0,1,112,1,21,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,32,1,21,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,23,1,96,1,29,1,18,1,0,1,18,133,0,0,1,96,1,35,1,96,1,41,1,18,1,0,1,18,133,0,0,1,48,1,47,1,0,1,0,1,34,133,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,80,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,3,1,0,1,27,1,0,1,0,1,225,1,7,1,3,1,0,1,200,1,15,1,0,1,3,1,0,1,198,1,0,1,0,1,235,1,7,1,2,1,3,1,200,1,15,1,0,1,3,1,0,1,177,1,148,1,148,1,235,1,7,1,8,1,3,1,200,1,15,1,0,1,3,1,0,1,108,1,248,1,148,1,235,1,7,1,4,1,3,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,3,1,17,1,0,1,200,1,7,1,0,1,7,1,0,1,177,1,180,1,0,1,225,1,6,1,2,1,0,1,200,1,7,1,0,1,9,1,0,1,177,1,180,1,0,1,225,1,5,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,177,1,180,1,0,1,225,1,1,1,2,1,0,1,200,1,7,1,0,1,2,1,0,1,108,1,180,1,192,1,235,1,1,1,8,1,2,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,5,1,8,1,9,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,8,1,7,1,200,1,7,1,0,1,1,1,0,1,27,1,192,1,180,1,235,1,6,1,4,1,6,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,5,1,4,1,5,1,200,1,7,1,0,1,4,1,0,1,27,1,192,1,180,1,235,1,1,1,4,1,2,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,4,1,4,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,5,1,5,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,20,1,192,1,108,1,160,1,3,1,11,1,128,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,3,1,3,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,5,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,4,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,3,1,11,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,220,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,196,1,0,1,0,1,4,1,24,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,216,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,7,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,80,1,10,1,0,1,0,1,112,1,11,1,0,1,0,1,96,1,12,1,0,1,0,1,16,1,13,1,0,1,32,1,32,1,14,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,75,131,0,0,1,76,1,0,1,0,1,16,1,77,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,65,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,70,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,64,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,16,1,14,1,18,1,3,1,18,1,0,1,16,1,1,132,0,0,1,96,1,15,1,194,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,16,1,39,1,18,1,0,1,18,135,0,0,1,96,1,40,1,196,1,0,1,18,133,0,0,1,96,1,46,1,96,1,52,1,18,1,0,1,18,133,0,0,1,96,1,58,1,96,1,64,1,18,1,0,1,18,133,0,0,1,96,1,70,1,80,1,76,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,144,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,128,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,10,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,10,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,8,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,8,1,15,1,0,1,92,1,15,1,0,1,7,1,160,1,27,1,136,1,177,1,161,1,8,1,16,1,10,1,200,1,15,1,0,1,7,1,160,1,198,1,136,1,0,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,8,1,14,1,3,1,92,1,2,1,0,1,10,1,0,131,27,0,1,161,1,1,1,0,1,10,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,8,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,7,1,160,1,177,1,52,1,148,1,171,1,8,1,16,1,7,1,92,1,8,1,0,1,10,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,10,1,200,1,15,1,0,1,7,1,160,1,108,1,208,1,148,1,171,1,8,1,16,1,7,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,8,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,8,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,7,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,10,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,10,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,10,1,10,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,7,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,9,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,9,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,7,1,9,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,7,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,200,1,15,1,0,1,2,1,0,1,167,1,167,1,0,1,224,1,5,1,6,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,120,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,16,1,0,1,0,1,2,1,104,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,40,1,0,1,113,1,0,1,5,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,5,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,80,1,7,1,0,1,0,1,112,1,8,1,0,1,32,1,96,1,9,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,40,131,0,0,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,44,1,0,1,0,1,16,1,28,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,36,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,27,176,0,0,1,63,1,128,142,0,0,1,241,1,85,1,80,1,5,1,0,1,0,1,18,1,1,1,194,133,0,0,1,64,1,10,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,14,1,96,1,20,1,18,1,0,1,18,133,0,0,1,96,1,26,1,96,1,32,1,18,1,0,1,18,133,0,0,1,96,1,38,1,16,1,44,1,18,1,0,1,34,131,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,5,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,6,1,0,1,200,1,8,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,5,1,7,1,0,1,20,1,247,1,192,1,7,131,0,0,1,198,1,194,1,0,1,0,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {208,65,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,249,111,38,191,255,218,248,251,215,48,255,252,26,191,198,111,66,255,255,117,220,159,255,191,126,126,61,250,255,239,127,217,252,254,211,95,195,209,225,175,210,129,255,6,191,198,255,123,232,192,120,174,66,60,95,254,166,242,221,191,245,107,252,191,7,207,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,249,242,252,250,191,6,199,147,19,4,106,38,78,251,187,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,191,167,253,4,109,40,102,108,118,92,155,95,227,55,27,104,179,235,218,252,110,67,109,246,126,141,191,8,184,227,235,95,71,190,178,207,175,69,255,71,247,221,207,101,172,207,95,131,22,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,248,242,215,29,120,31,113,113,236,253,223,144,254,127,182,108,218,108,57,5,4,30,195,235,121,54,203,235,95,163,194,239,192,11,227,197,239,120,55,245,222,253,141,232,203,45,111,146,254,54,250,253,95,242,254,254,125,169,195,119,30,173,255,49,250,253,223,242,254,254,175,232,247,255,195,251,251,55,250,205,8,254,111,230,125,175,191,131,38,127,128,254,14,250,253,41,250,253,62,125,182,67,255,255,83,245,239,231,244,251,183,233,255,127,86,164,109,73,159,205,189,182,127,24,253,254,7,209,255,255,173,72,219,191,142,62,251,171,188,182,255,24,253,254,15,105,187,95,79,126,112,251,255,155,30,51,220,223,27,95,252,218,255,247,255,253,127,253,223,147,95,227,228,205,241,147,223,137,254,124,253,107,202,103,160,219,239,36,205,210,231,244,89,169,239,255,6,244,111,75,63,255,48,250,255,175,243,107,26,57,248,181,152,174,120,126,39,254,236,215,164,255,126,189,95,227,119,211,207,246,249,179,95,139,62,75,126,141,199,250,153,228,59,254,218,191,246,215,228,214,191,14,231,99,254,223,240,168,76,253,181,191,14,113,208,175,201,255,121,159,239,14,124,190,215,255,156,62,190,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,225,212,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,255,215,248,9,18,135,223,224,215,248,77,255,34,2,241,15,58,172,126,207,223,19,159,255,152,124,254,7,209,255,240,221,63,68,159,255,67,248,60,145,207,127,13,255,243,29,22,171,223,244,127,250,181,228,11,251,252,46,52,141,191,46,195,248,245,255,36,252,158,208,239,191,230,175,241,155,254,73,242,249,175,249,7,253,90,246,247,95,235,15,250,181,181,205,175,251,107,252,218,127,208,175,99,127,255,117,254,160,95,215,254,254,235,254,65,191,158,253,253,215,251,131,126,125,253,157,186,249,147,126,141,223,224,55,253,139,204,239,191,166,247,251,175,69,191,63,97,182,249,77,169,175,255,140,190,251,207,254,162,95,139,255,254,245,9,167,255,236,15,250,13,126,141,95,227,47,34,252,126,237,95,147,255,254,138,224,255,103,127,210,175,195,172,134,191,127,13,234,131,222,161,118,191,14,139,54,62,251,107,8,31,249,236,119,163,62,126,77,7,135,96,254,154,212,14,239,255,103,127,210,175,207,253,255,154,12,131,230,232,215,250,181,164,221,159,132,223,105,156,212,254,175,129,254,163,54,191,22,255,254,11,89,141,252,103,255,211,175,203,112,126,29,198,229,55,248,53,254,111,198,245,215,33,220,209,239,143,253,26,255,25,191,3,154,224,157,223,155,26,254,122,244,29,33,246,199,209,187,52,142,191,230,15,114,159,125,245,199,17,142,127,17,141,199,251,236,175,249,227,126,45,239,179,95,135,63,251,191,255,184,95,91,63,67,95,191,158,246,149,208,103,104,243,235,211,223,36,182,12,203,192,151,207,190,98,88,191,190,194,146,207,254,26,134,21,126,246,127,255,113,191,142,247,217,175,171,240,126,45,15,222,175,171,240,126,109,254,204,111,247,215,240,187,225,103,255,247,31,247,235,234,103,152,19,226,19,226,27,208,252,255,254,131,127,29,59,15,191,14,230,129,255,255,235,243,28,253,6,58,111,160,229,175,207,159,255,154,191,198,255,205,239,255,122,242,247,159,132,121,194,231,152,211,223,128,62,251,245,20,214,175,243,107,252,230,218,94,254,254,53,127,141,223,142,126,202,223,194,19,224,207,255,91,231,231,171,191,56,229,119,126,45,134,255,235,211,255,127,61,158,227,95,199,235,255,215,102,120,248,27,47,131,23,126,125,134,245,21,198,193,159,129,87,116,124,224,89,158,23,240,9,120,2,125,124,252,107,72,199,191,134,140,157,62,255,191,185,221,19,198,79,248,252,215,32,62,199,223,191,150,254,253,107,253,6,194,59,191,246,175,241,91,210,223,255,195,159,100,104,129,113,224,255,78,6,132,110,194,135,191,41,193,255,202,126,143,191,127,13,105,255,39,153,254,137,78,127,209,175,205,242,237,100,4,184,208,152,254,34,124,246,155,50,253,69,14,228,119,25,135,252,238,232,242,107,40,46,52,191,127,209,111,2,154,253,6,242,142,252,46,239,200,239,242,14,203,206,111,128,121,253,191,255,160,255,251,255,254,53,248,49,246,230,215,208,231,15,131,161,255,181,255,47,178,55,173,181,55,127,238,175,41,159,161,237,239,36,205,210,63,141,62,123,170,239,255,38,191,198,71,191,198,115,250,249,251,210,255,31,115,39,191,9,6,245,107,60,165,223,223,252,154,38,191,239,236,200,111,194,32,254,255,255,168,127,104,199,253,235,184,175,62,232,185,252,0,187,245,107,176,29,250,131,126,15,31,158,234,253,63,232,215,80,187,2,222,116,246,6,242,244,155,170,205,248,141,136,183,205,239,191,49,241,174,249,253,55,33,126,52,191,67,223,200,239,191,62,219,2,249,157,100,154,116,128,105,195,125,253,71,6,62,201,16,255,158,72,95,250,249,175,137,190,244,247,95,11,125,233,239,191,54,250,210,223,127,29,216,54,253,253,215,133,109,211,223,127,61,234,235,215,255,143,196,86,64,95,255,103,44,187,70,86,127,253,95,227,43,182,41,191,22,203,170,179,93,191,62,108,159,202,182,200,253,111,202,118,203,125,255,215,252,73,191,182,126,255,27,48,188,223,192,234,2,163,51,161,195,208,215,175,207,253,255,103,246,111,103,243,190,178,240,126,3,175,63,247,217,237,251,248,13,122,125,136,174,249,53,108,31,248,187,219,7,62,115,125,8,141,126,3,250,236,255,246,222,129,14,22,123,253,99,98,163,185,159,223,132,244,147,252,253,107,241,223,191,169,253,251,215,225,191,127,51,251,247,111,192,127,255,230,108,115,156,223,240,107,42,94,162,183,4,47,95,7,254,154,138,23,62,251,221,126,13,107,255,25,199,95,139,113,252,53,24,62,233,198,255,8,239,254,6,218,31,233,71,254,251,199,236,223,191,14,255,13,123,140,119,193,35,191,150,133,243,235,255,71,128,163,48,255,163,223,88,125,138,95,251,215,248,181,209,230,79,18,187,241,155,130,54,127,240,111,168,239,131,247,220,124,252,154,140,211,111,100,253,138,223,244,63,194,223,242,222,175,137,62,254,160,223,88,225,171,14,255,139,48,190,95,155,250,250,53,248,187,175,254,98,180,249,117,181,189,126,166,56,252,58,220,198,104,99,250,44,136,5,192,196,191,198,175,21,137,5,126,173,31,197,2,223,64,44,176,247,117,117,170,139,5,156,94,117,122,238,215,255,155,60,157,103,245,31,201,153,253,252,215,242,218,252,218,222,239,191,142,247,251,175,235,253,254,235,185,223,111,229,195,19,239,254,77,240,225,159,48,255,202,223,190,175,131,191,225,235,8,15,27,61,37,62,254,175,205,127,127,5,61,248,55,9,31,227,111,224,240,159,253,77,198,247,50,62,254,175,163,159,65,118,127,109,133,243,187,49,62,236,115,241,251,240,159,126,45,110,247,127,255,197,240,93,127,3,198,225,55,192,187,252,255,95,159,223,253,13,168,205,255,205,242,74,156,6,157,201,50,132,118,191,46,251,247,240,67,197,79,252,181,180,45,190,39,26,49,140,95,155,125,75,241,191,140,239,138,207,126,3,254,251,55,215,191,5,55,248,178,240,27,127,3,30,235,111,199,62,44,190,75,127,13,241,73,127,109,233,235,47,18,88,191,182,246,37,176,165,191,175,240,55,227,247,235,233,216,72,106,255,226,95,195,27,27,96,226,255,254,216,204,120,126,173,13,227,81,95,49,24,207,175,231,125,246,27,240,223,191,185,197,25,227,249,245,221,252,17,126,191,29,251,201,102,60,191,30,141,7,126,247,175,169,227,249,53,116,60,120,223,204,45,98,22,157,111,139,195,175,197,159,253,26,128,251,55,153,207,126,93,25,51,247,101,62,51,126,181,193,85,225,241,255,125,27,40,182,7,124,241,155,211,207,191,230,111,146,223,127,11,224,245,55,25,59,246,107,50,172,175,244,61,243,119,232,67,3,39,99,215,98,62,244,175,229,249,208,191,150,231,67,255,90,29,31,26,239,25,31,218,248,221,242,187,188,35,191,203,59,140,235,111,32,248,116,245,244,175,161,207,127,245,91,210,63,191,22,124,232,127,236,215,54,122,250,223,253,77,228,51,8,231,239,36,205,210,127,237,55,241,125,232,95,171,231,67,255,91,191,198,143,124,104,205,229,218,113,255,91,55,190,241,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,190,201,231,242,3,242,101,255,5,231,203,126,207,223,51,158,47,219,188,6,241,235,115,142,204,173,41,152,53,8,201,169,202,239,191,22,231,167,126,211,63,73,226,123,172,71,252,103,127,210,127,65,249,172,49,247,241,155,254,77,154,159,248,117,240,221,175,75,57,233,223,36,229,156,7,114,27,88,31,249,131,228,239,95,3,185,136,63,73,243,27,222,231,127,13,125,254,215,68,62,71,238,226,255,230,207,127,131,95,67,242,196,88,91,48,125,253,90,218,215,111,234,245,133,207,126,83,175,175,95,75,97,186,207,165,175,254,231,210,215,175,101,251,250,181,184,175,95,75,251,250,181,181,175,223,204,235,11,159,253,102,94,95,154,187,243,62,151,190,250,159,75,95,191,182,237,235,215,225,190,204,223,191,14,231,188,57,119,247,23,201,223,191,22,255,253,235,218,191,127,29,254,251,215,211,191,65,151,112,157,89,114,230,154,79,251,143,100,221,248,215,208,190,184,173,71,211,95,139,255,118,227,230,53,235,159,21,92,126,61,15,151,31,211,182,191,134,135,139,228,250,229,111,249,254,215,226,239,13,110,191,134,244,205,127,203,247,191,14,127,111,112,253,53,4,23,254,251,215,228,190,127,131,63,8,107,48,63,38,176,255,33,205,119,253,69,242,247,175,197,127,255,154,246,239,95,135,255,254,181,236,223,191,1,255,237,242,169,140,171,165,131,228,190,28,29,36,255,37,116,248,221,88,38,36,7,38,121,184,223,224,15,250,47,40,223,170,120,252,71,50,94,183,238,35,227,117,235,62,248,219,172,179,80,174,149,255,22,56,191,254,191,244,95,232,186,6,193,252,151,204,58,203,175,169,235,44,10,223,206,151,194,183,243,165,240,237,124,233,56,249,111,228,248,144,171,214,245,46,187,78,131,181,195,206,252,216,117,26,172,37,10,205,228,187,95,227,215,112,235,52,232,247,191,208,28,243,175,233,173,211,152,252,99,119,157,230,215,228,113,187,117,26,60,63,90,167,217,252,252,104,157,230,71,235,52,63,90,167,249,209,58,205,207,229,58,13,30,127,157,102,139,176,145,117,154,223,199,234,233,187,191,166,124,134,31,191,147,52,75,183,232,143,29,124,252,107,200,58,205,1,253,252,246,175,241,243,119,77,230,67,124,255,223,132,117,176,211,191,120,186,122,247,125,124,255,223,64,237,243,175,205,60,39,178,252,107,168,63,108,252,29,248,17,248,219,248,125,240,35,126,13,225,83,150,117,249,251,255,182,62,168,124,39,114,11,216,191,78,7,246,175,211,129,253,235,68,96,199,96,255,122,30,236,31,19,216,255,16,100,197,247,243,240,183,239,231,225,111,223,207,195,223,70,31,27,31,212,199,237,215,236,224,246,107,42,110,208,57,70,174,127,77,254,253,55,128,188,88,63,15,114,226,251,121,248,219,247,243,240,183,239,231,253,154,10,7,126,30,224,200,239,195,126,222,175,161,120,42,124,254,219,247,243,126,13,197,83,199,201,127,127,211,126,30,116,6,112,133,30,242,253,60,250,238,70,63,239,255,9,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps2n.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps2n.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps2n.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps2n.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2n.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps2n.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps2n.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps1nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 48 instruction slots used (3 texture, 45 arithmetic), 5 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class ps1nc : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'ps1nc' shader</summary>
		public ps1nc()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps1nc.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps1nc.cid0 = state.GetNameUniqueID("v_SH");
			ps1nc.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps1nc.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps1nc.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps1nc.cid4 = state.GetNameUniqueID("p_lights");
			ps1nc.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps1nc.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps1nc.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps1nc.tid0 = state.GetNameUniqueID("CustomTexture");
			ps1nc.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps1nc.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps1nc.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps1nc.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps1nc.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps1nc.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps1nc.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps1nc.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps1nc.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps1nc.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps1nc.fx, ps1nc.fxb, 48, 54);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 6;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps1nc.vin[i]));
			index = ps1nc.vin[(i + 6)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[4] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[3] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 3)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,4,5,0,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[5];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,192,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,120,135,0,0,1,5,131,0,0,1,4,131,0,0,1,1,211,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,32,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,136,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,172,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,208,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,244,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,132,1,0,1,0,1,1,1,160,138,0,0,1,15,1,44,1,0,1,0,1,15,1,72,138,0,0,1,15,1,148,1,0,1,0,1,15,1,168,138,0,0,1,15,1,184,1,0,1,0,1,15,1,204,138,0,0,1,15,1,220,1,0,1,0,1,15,1,240,138,0,0,1,16,1,180,135,0,0,1,3,1,0,1,0,1,16,1,48,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,4,1,0,1,0,1,16,132,0,0,1,93,134,0,0,1,16,1,28,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,100,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,56,1,0,1,0,1,16,1,52,131,0,0,1,93,134,0,0,1,16,1,80,1,0,1,0,1,16,1,76,1,0,1,0,1,16,1,164,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,120,1,0,1,0,1,16,1,116,131,0,0,1,93,134,0,0,1,16,1,144,1,0,1,0,1,16,1,140,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,76,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,144,1,0,1,0,1,2,1,188,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,124,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,10,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,112,1,10,1,0,1,0,1,96,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,46,131,0,0,1,47,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,38,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,64,1,12,1,18,1,3,1,18,1,0,1,240,1,85,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,64,1,48,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,160,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,10,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,9,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,5,1,3,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,8,1,0,1,177,1,180,1,0,1,225,1,6,1,10,1,0,1,200,1,7,1,0,1,5,1,0,1,177,1,180,1,0,1,225,1,2,1,10,1,0,1,200,1,7,1,0,1,10,1,0,1,177,1,180,1,0,1,225,1,1,1,10,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,9,1,10,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,2,1,9,1,5,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,9,1,8,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,6,1,3,1,6,1,200,1,7,1,0,1,6,1,0,1,27,1,192,1,180,1,235,1,2,1,3,1,5,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,1,1,3,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,88,1,33,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,6,1,6,1,128,1,88,1,33,1,1,1,0,1,0,1,190,1,190,1,108,1,240,1,2,1,2,1,129,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,177,1,0,1,225,1,6,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,236,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,200,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,113,1,0,1,11,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,8,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,112,1,12,1,0,1,0,1,96,1,13,1,0,1,0,1,16,1,14,1,0,1,32,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,76,131,0,0,1,77,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,67,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,73,1,0,1,0,1,16,1,65,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,32,1,14,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,16,1,40,1,18,1,0,1,18,135,0,0,1,96,1,41,1,196,1,0,1,18,133,0,0,1,96,1,47,1,96,1,53,1,18,1,0,1,18,133,0,0,1,96,1,59,1,96,1,65,1,18,1,0,1,18,133,0,0,1,96,1,71,1,80,1,77,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,160,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,11,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,11,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,9,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,9,1,15,1,0,1,92,1,15,1,0,1,8,1,160,1,27,1,136,1,177,1,161,1,9,1,16,1,11,1,200,1,15,1,0,1,8,1,160,1,198,1,136,1,0,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,9,1,14,1,3,1,92,1,2,1,0,1,11,1,0,131,27,0,1,161,1,1,1,0,1,11,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,9,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,177,1,52,1,148,1,171,1,9,1,16,1,8,1,92,1,8,1,0,1,11,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,11,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,9,1,160,1,108,1,208,1,148,1,171,1,9,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,9,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,11,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,11,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,11,1,11,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,9,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,9,1,10,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,10,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,10,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,9,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,5,1,6,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,3,1,240,1,16,1,42,1,17,131,0,0,1,1,1,160,1,0,1,0,1,2,1,80,135,0,0,1,36,1,0,1,0,1,1,1,56,1,0,1,0,1,1,1,96,138,0,0,1,1,1,16,131,0,0,1,28,1,0,1,0,1,1,1,1,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,250,131,0,0,1,108,1,0,1,2,131,0,0,1,5,133,0,0,1,116,131,0,0,1,132,131,0,0,1,212,1,0,1,3,131,0,0,1,1,133,0,0,1,220,135,0,0,1,236,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,220,135,0,0,1,243,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,220,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,5,214,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,16,1,16,1,0,1,11,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,7,1,96,1,13,1,18,1,0,1,18,133,0,0,1,96,1,19,1,96,1,25,1,18,1,0,1,18,133,0,0,1,96,1,31,1,96,1,37,1,18,1,0,1,34,131,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,176,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,39,1,2,1,9,1,0,1,192,1,108,1,198,1,160,1,9,1,255,1,1,1,22,1,24,1,2,1,3,1,0,1,190,1,190,1,27,1,240,1,10,1,10,1,1,1,88,1,135,1,0,1,1,1,0,1,192,1,192,1,27,1,161,1,11,1,4,1,128,1,200,1,14,1,0,1,2,1,0,1,177,1,252,1,252,1,171,1,2,1,3,1,1,1,200,1,2,1,0,1,1,1,0,1,27,1,27,1,177,1,139,1,3,1,2,1,255,1,88,1,141,1,3,1,1,1,0,1,198,1,240,1,27,1,225,1,9,1,4,1,131,1,200,1,13,1,0,1,1,1,0,1,177,1,132,1,216,1,235,1,9,1,5,1,1,1,76,1,39,1,1,1,4,1,0,1,192,1,27,1,177,1,225,1,10,1,3,1,1,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,20,1,235,1,9,1,6,1,1,1,200,1,7,1,0,1,3,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,4,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,88,1,24,1,1,1,0,1,0,1,205,1,205,1,108,1,240,1,5,1,5,1,129,1,88,1,141,1,0,1,1,1,0,1,240,1,108,1,27,1,225,1,3,1,1,1,128,1,200,1,7,1,0,1,3,1,0,1,180,1,27,1,0,1,225,1,5,1,0,1,0,1,173,1,72,1,1,1,0,1,0,1,207,1,190,1,65,1,208,1,1,1,3,1,2,1,65,1,24,1,1,1,1,1,0,1,190,1,190,1,27,1,240,1,4,1,3,1,0,1,200,1,3,1,0,1,4,1,0,1,26,1,179,1,0,1,225,1,1,1,1,1,0,1,200,1,3,1,0,1,3,1,0,1,176,1,199,1,0,1,161,1,1,1,1,1,0,1,56,1,140,1,0,1,4,1,0,1,177,1,241,1,108,1,161,1,4,1,2,1,3,1,200,1,4,1,0,1,3,1,0,1,177,1,27,1,0,1,225,1,3,1,0,1,0,1,200,1,8,131,0,0,1,27,1,177,1,0,1,225,1,0,1,1,1,0,1,168,1,23,1,3,1,1,1,0,1,180,1,180,1,67,1,193,1,8,1,8,1,1,1,168,1,39,1,3,1,0,1,0,1,200,1,180,1,131,1,192,1,4,1,0,1,1,1,200,1,7,131,0,0,1,192,1,27,1,180,1,235,1,3,1,9,1,0,1,200,1,7,131,0,0,1,192,1,180,1,0,1,225,1,1,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,192,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,3,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,20,1,0,1,0,1,2,1,116,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,52,1,0,1,113,1,0,1,6,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,6,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,32,1,96,1,10,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,41,131,0,0,1,42,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,45,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,28,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,16,1,45,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,6,1,0,1,20,1,24,1,0,1,4,1,0,1,167,1,167,1,27,1,175,1,6,1,7,1,5,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {32,62,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,177,223,76,126,255,181,241,247,175,97,254,249,53,126,141,223,132,254,255,235,184,63,255,127,253,252,122,244,255,223,255,178,249,253,167,191,134,163,195,59,29,248,175,251,107,252,236,209,129,251,93,133,253,166,191,169,124,247,111,253,26,63,123,253,254,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,248,243,235,255,26,28,31,78,16,168,153,56,237,143,210,56,237,215,209,255,127,19,113,154,246,83,160,159,223,232,215,16,184,127,157,246,19,180,161,152,177,217,113,109,254,165,161,54,187,191,198,31,100,218,252,242,161,54,123,191,198,31,12,220,127,51,109,231,63,191,22,253,31,175,117,63,55,99,5,45,126,179,200,247,248,59,246,222,143,209,255,159,148,249,114,86,44,47,240,50,98,235,216,251,136,139,99,239,255,134,244,255,179,101,211,102,203,41,32,240,24,94,207,179,89,94,255,26,43,252,14,188,48,94,252,142,119,83,239,221,223,136,190,220,242,38,233,15,163,223,255,34,239,239,17,117,248,109,143,70,127,26,253,254,87,121,127,255,93,244,251,63,231,253,253,239,209,239,255,147,255,253,111,38,63,65,147,29,253,29,244,251,83,244,251,95,7,159,209,255,255,84,253,251,119,162,223,127,59,250,255,60,210,246,49,125,118,224,181,125,67,191,191,164,255,255,85,145,182,63,67,159,189,243,218,254,105,244,251,159,164,237,126,61,249,193,237,255,111,122,204,112,127,6,196,249,181,255,239,255,251,255,250,191,127,242,215,56,121,115,252,228,119,162,63,127,252,215,148,207,240,213,239,36,205,210,223,137,62,43,245,253,95,151,254,109,233,231,31,70,255,255,215,126,13,35,7,191,214,175,241,239,41,204,255,142,63,251,53,233,191,95,239,215,248,229,250,217,175,243,107,226,179,95,139,62,75,152,254,120,36,223,241,215,254,181,191,38,183,254,117,152,7,126,54,30,149,145,191,246,215,33,142,248,53,249,63,239,243,221,129,207,247,250,159,211,199,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,156,151,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,63,65,36,251,117,127,141,223,244,47,34,16,255,224,175,241,107,252,65,191,135,193,235,119,33,114,210,152,255,32,226,210,63,9,191,39,244,251,175,249,107,252,166,127,146,124,254,107,254,65,191,150,253,253,215,250,131,126,109,109,243,235,254,26,191,246,31,244,235,216,223,127,157,63,232,215,181,191,255,186,127,208,175,103,127,255,245,254,160,95,95,127,167,110,254,164,95,227,55,248,77,255,34,243,251,175,233,253,254,107,209,239,191,1,79,223,175,73,48,255,179,63,9,255,255,245,249,187,95,147,112,250,53,232,51,136,206,111,66,125,255,73,127,18,113,205,95,76,175,112,251,95,147,191,255,85,252,127,180,167,185,39,188,129,59,126,255,13,8,239,255,251,47,250,117,120,202,127,77,250,236,255,230,239,126,221,95,227,171,191,232,215,227,239,127,77,253,27,253,254,38,4,227,63,163,191,191,250,131,164,253,111,66,63,209,215,175,193,159,255,110,212,254,215,250,53,126,125,250,254,87,253,65,79,168,253,175,253,107,252,166,4,251,63,163,49,252,103,127,209,175,197,120,48,110,128,245,23,253,186,252,61,218,254,53,68,7,140,229,215,248,117,228,239,175,8,199,255,236,79,250,181,9,158,233,3,56,253,186,212,15,222,69,31,191,182,246,33,180,248,205,209,199,31,132,246,248,251,215,162,191,49,78,252,157,242,223,191,22,211,134,96,252,69,50,134,95,155,199,131,119,220,152,190,162,207,254,36,165,193,175,143,239,254,34,29,19,227,69,243,173,48,65,155,255,140,199,246,107,234,216,126,13,26,219,175,203,253,252,250,252,221,175,169,112,127,77,126,231,63,227,126,126,77,158,163,223,146,126,255,31,254,164,95,87,223,69,59,244,235,255,253,107,122,253,253,218,138,195,175,105,222,255,13,126,3,166,131,223,247,175,69,125,155,246,104,247,235,240,59,255,217,31,244,155,234,188,225,125,249,253,215,226,190,228,247,95,135,126,255,107,116,236,242,30,141,235,47,250,77,184,15,121,71,126,151,119,228,119,121,231,255,254,191,127,13,126,140,78,250,53,244,249,171,160,8,126,237,255,139,116,82,107,117,210,159,251,107,202,103,104,107,116,210,159,70,159,61,213,247,127,147,95,227,163,95,227,57,253,252,125,233,255,143,121,128,191,9,235,253,167,244,251,155,95,211,228,116,157,174,249,77,24,196,255,255,31,245,33,236,184,127,29,247,213,7,61,151,31,160,11,127,13,214,133,78,15,226,81,157,244,7,253,26,170,243,126,109,79,23,38,44,95,70,23,254,26,196,95,191,169,234,182,223,136,120,212,252,254,27,19,15,154,223,127,19,210,1,230,247,223,148,228,95,126,39,93,69,50,45,191,147,46,250,131,126,204,182,225,126,255,35,3,159,100,141,127,215,126,245,243,95,19,253,234,239,191,22,250,213,223,127,109,244,171,191,255,58,208,193,250,251,175,11,29,172,191,255,122,212,239,175,255,31,137,220,254,166,212,254,63,83,185,21,153,254,13,126,141,175,254,36,124,71,125,169,30,22,189,241,27,64,71,171,14,192,247,208,127,70,183,201,247,127,13,235,181,95,147,97,0,222,111,160,109,255,51,213,203,34,227,232,235,215,231,254,255,51,251,183,233,251,199,168,111,3,239,199,188,254,220,103,183,239,227,55,232,245,241,155,114,31,191,134,237,3,127,119,251,192,103,174,15,161,209,111,64,159,253,223,222,59,255,55,235,112,124,255,99,98,175,184,159,223,132,244,147,252,253,107,241,223,191,169,253,251,215,225,191,127,51,251,247,111,192,127,255,230,191,134,232,214,95,67,199,254,107,42,94,162,183,4,47,124,238,62,19,188,124,91,36,239,225,119,224,248,107,48,124,210,141,255,17,222,253,13,180,63,210,143,252,247,143,217,191,127,29,254,59,161,191,241,46,120,196,217,11,182,15,232,251,79,74,68,239,255,71,66,51,177,105,212,207,127,244,27,255,26,127,205,95,68,54,149,121,228,215,254,53,126,237,255,232,215,230,246,120,151,245,252,31,252,27,42,92,240,164,155,39,232,222,255,140,124,126,249,14,60,42,246,67,236,61,125,246,7,253,198,226,246,26,221,206,186,255,215,166,254,126,13,254,238,171,191,24,109,126,93,109,175,159,113,251,95,155,198,131,191,141,198,166,207,2,159,242,143,130,146,249,181,34,62,229,175,245,35,159,50,226,83,238,125,93,61,58,228,83,254,26,172,207,126,253,191,201,211,109,86,207,145,60,217,207,127,45,175,205,175,237,253,254,235,120,191,255,186,222,239,191,158,251,125,163,79,249,196,241,230,223,4,95,237,9,243,163,252,253,107,232,223,191,150,254,13,159,227,55,16,62,135,143,242,55,225,255,208,43,248,155,120,158,101,241,215,22,25,249,155,196,7,149,246,191,182,180,231,255,163,253,175,195,127,179,175,73,188,206,239,26,126,166,49,252,223,252,157,241,65,127,109,109,107,124,70,241,13,165,175,95,71,254,254,155,126,45,126,71,228,158,104,0,189,172,178,35,58,192,248,156,191,14,255,13,191,235,63,251,155,204,251,66,43,252,237,116,9,252,157,95,71,63,251,221,24,95,163,251,49,246,223,14,239,115,31,191,1,247,241,155,43,78,226,115,82,115,166,133,239,115,2,127,197,131,199,32,62,167,243,223,60,159,147,241,82,31,240,15,130,46,245,223,51,186,220,183,9,162,139,49,159,191,57,253,252,107,254,38,249,253,183,64,255,127,211,38,127,211,247,111,125,127,211,195,9,99,250,139,140,79,249,107,169,94,145,223,127,173,63,200,248,148,191,86,199,167,20,127,92,124,74,227,135,202,239,242,142,252,46,239,48,174,191,129,224,211,213,79,191,134,62,191,209,111,69,255,252,90,240,47,255,177,95,219,232,167,127,247,55,145,207,192,196,70,63,253,107,191,137,239,95,254,90,61,255,242,223,250,53,126,228,95,106,46,204,142,251,223,186,241,141,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,77,62,151,31,144,87,250,47,56,175,244,123,254,158,241,188,210,237,243,243,191,62,231,146,92,190,221,228,231,145,87,52,249,121,2,202,249,121,137,245,145,171,255,207,254,164,255,130,114,43,99,238,239,55,253,155,52,87,241,235,224,187,95,143,242,181,191,73,138,252,193,87,200,105,96,29,225,15,146,191,127,141,191,233,215,67,78,74,114,13,222,231,127,13,125,254,215,68,62,255,191,233,243,255,155,63,255,13,52,87,138,188,187,233,235,215,210,190,126,83,175,47,124,246,155,122,125,253,90,10,211,125,46,125,245,63,151,190,126,45,219,215,175,197,125,105,254,247,215,145,156,254,87,127,210,111,230,245,133,207,126,51,175,47,93,187,244,62,151,190,250,159,75,95,102,237,18,57,17,244,101,254,254,117,56,239,43,57,24,249,251,215,226,191,127,93,251,247,175,195,127,255,122,250,183,210,133,255,255,235,243,188,185,181,91,202,137,253,71,248,28,127,155,182,191,174,210,208,140,243,215,213,113,26,92,126,221,159,37,92,126,61,15,151,31,211,182,191,134,135,139,228,187,229,111,249,254,215,226,239,13,110,191,134,244,205,127,203,247,191,14,127,111,112,253,53,4,151,63,201,228,197,176,230,129,245,137,31,19,216,255,144,230,190,254,34,249,251,215,226,191,127,77,251,247,175,195,127,255,90,246,239,223,128,255,254,181,117,92,146,3,115,116,144,60,152,163,131,228,194,132,14,191,27,203,132,228,195,36,39,247,27,252,65,255,5,229,52,21,143,255,72,198,235,214,68,100,188,110,77,4,127,155,53,8,202,63,254,71,210,143,205,177,97,252,188,6,65,127,255,75,248,14,176,229,251,223,224,95,194,250,3,214,33,100,252,178,6,161,253,218,121,212,126,237,60,106,191,118,30,117,252,252,55,201,249,95,132,124,170,174,17,217,53,12,172,183,117,230,205,174,97,96,253,77,104,41,223,253,26,191,134,91,195,64,191,192,23,185,198,95,211,91,195,48,57,202,238,26,198,175,201,244,112,107,24,120,126,180,134,225,125,254,163,53,140,31,173,97,252,104,13,131,251,255,127,195,26,6,30,127,13,227,57,148,16,175,97,252,62,86,63,221,253,53,229,51,252,48,250,105,139,254,216,193,199,191,134,172,97,28,208,207,111,255,26,63,127,215,43,62,196,47,254,77,88,87,57,61,133,167,171,159,190,174,95,252,27,168,141,250,117,152,255,68,63,64,102,240,183,241,5,96,75,241,183,241,137,96,75,127,13,225,89,214,31,242,183,232,4,248,103,242,221,255,173,242,40,254,153,15,251,215,237,192,254,117,111,9,251,215,243,96,255,152,192,254,135,212,223,178,62,16,254,246,125,32,245,183,172,15,164,254,149,246,37,254,153,143,219,175,217,193,237,215,84,220,160,119,140,140,139,29,255,13,32,59,214,7,130,204,248,62,16,254,246,125,32,252,237,251,64,70,111,12,249,64,128,125,27,31,232,215,80,252,181,95,254,219,247,129,126,13,197,95,199,207,127,127,211,62,16,244,10,240,133,174,242,125,160,95,147,121,204,111,223,247,129,254,159,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps1nc.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps1nc.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps1nc.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps1nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps1nc.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps1nc.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps1nc.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
	/// <summary><para>Technique 'ps2nc' generated from file 'Material.fx'</para><para>Vertex Shader: approximately 45 instruction slots used, 14 registers</para><para>Pixel Shader: approximately 67 instruction slots used (3 texture, 64 arithmetic), 8 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	internal sealed class ps2nc : Xen.Graphics.ShaderSystem.BaseShader, IMS_PerPixel, IMS_VertexColour
	{
		/// <summary>Construct an instance of the 'ps2nc' shader</summary>
		public ps2nc()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.sc3 = -1;
			this.sc4 = -1;
			this.sc5 = -1;
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			ps2nc.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			ps2nc.cid0 = state.GetNameUniqueID("v_SH");
			ps2nc.cid1 = state.GetNameUniqueID("v_fogAndAlpha");
			ps2nc.cid2 = state.GetNameUniqueID("p_EmissiveColour");
			ps2nc.cid3 = state.GetNameUniqueID("p_fogColourAndGamma");
			ps2nc.cid4 = state.GetNameUniqueID("p_lights");
			ps2nc.sid0 = state.GetNameUniqueID("CustomEmissiveTextureSampler");
			ps2nc.sid1 = state.GetNameUniqueID("CustomNormalMapSampler");
			ps2nc.sid2 = state.GetNameUniqueID("CustomTextureSampler");
			ps2nc.tid0 = state.GetNameUniqueID("CustomTexture");
			ps2nc.tid1 = state.GetNameUniqueID("CustomNormalMap");
			ps2nc.tid2 = state.GetNameUniqueID("CustomEmissiveTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != ps2nc.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'v_viewDir'
			this.vreg_change = (this.vreg_change | state.SetViewDirectionVector4(ref this.vreg[12], ref this.sc0));
			// Set the value for attribute 'v_viewPoint'
			this.vreg_change = (this.vreg_change | state.SetViewPointVector4(ref this.vreg[11], ref this.sc1));
			// Set the value for attribute 'world'
			this.vreg_change = (this.vreg_change | state.SetWorldMatrix(ref this.vreg[4], ref this.vreg[5], ref this.vreg[6], ref this.vreg[7], ref this.sc2));
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc3));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				ps2nc.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				ps2nc.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(ps2nc.fx.vsb_c, ref this.sc4));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc5));
				if ((this.vireg_change == true))
				{
					ps2nc.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref ps2nc.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((ps2nc.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			ps2nc.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out ps2nc.fx, ps2nc.fxb, 48, 67);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 6;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(ps2nc.vin[i]));
			index = ps2nc.vin[(i + 6)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'v_SH'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4x3 v_SH'</summary><param name="value"/>
		public void SetV_SH(ref Microsoft.Xna.Framework.Matrix value)
		{
			this.vreg[8] = new Microsoft.Xna.Framework.Vector4(value.M11, value.M21, value.M31, value.M41);
			this.vreg[9] = new Microsoft.Xna.Framework.Vector4(value.M12, value.M22, value.M32, value.M42);
			this.vreg[10] = new Microsoft.Xna.Framework.Vector4(value.M13, value.M23, value.M33, value.M43);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float4x3 v_SH'</summary>
		public Microsoft.Xna.Framework.Matrix V_SH
		{
			set
			{
				this.SetV_SH(ref value);
			}
		}
		/// <summary>Name ID for 'v_fogAndAlpha'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float3 v_fogAndAlpha'</summary><param name="value"/>
		public void SetV_fogAndAlpha(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.vreg[13] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.vreg_change = true;
		}
		/// <summary>Assign the shader value 'float3 v_fogAndAlpha'</summary>
		public Microsoft.Xna.Framework.Vector3 V_fogAndAlpha
		{
			set
			{
				this.SetV_fogAndAlpha(ref value);
			}
		}
		/// <summary>Name ID for 'p_EmissiveColour'</summary>
		private static int cid2;
		/// <summary>Set the shader value 'float4 p_EmissiveColour'</summary><param name="value"/>
		public void SetP_EmissiveColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[7] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_EmissiveColour'</summary>
		public Microsoft.Xna.Framework.Vector4 P_EmissiveColour
		{
			set
			{
				this.SetP_EmissiveColour(ref value);
			}
		}
		/// <summary>Name ID for 'p_fogColourAndGamma'</summary>
		private static int cid3;
		/// <summary>Set the shader value 'float4 p_fogColourAndGamma'</summary><param name="value"/>
		public void SetP_fogColourAndGamma(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[6] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 p_fogColourAndGamma'</summary>
		public Microsoft.Xna.Framework.Vector4 P_fogColourAndGamma
		{
			set
			{
				this.SetP_fogColourAndGamma(ref value);
			}
		}
		/// <summary>Name ID for 'p_lights'</summary>
		private static int cid4;
		/// <summary>Set the shader array value 'float4 p_lights[6]'</summary><param name="value"/><param name="readIndex"/><param name="writeIndex"/><param name="count"/>
		public void SetP_lights(Microsoft.Xna.Framework.Vector4[] value, uint readIndex, uint writeIndex, uint count)
		{
			Microsoft.Xna.Framework.Vector4 val;
			int i;
			uint ri;
			uint wi;
			ri = readIndex;
			wi = writeIndex;
			if ((value == null))
			{
				throw new System.ArgumentNullException("value");
			}
			if ((((ri + count) 
						> value.Length) 
						|| ((wi + count) 
						> 6)))
			{
				throw new System.ArgumentException("Invalid range");
			}
			for (i = 0; ((i < count) 
						&& (wi < 6)); i = (i + 1))
			{
				val = value[ri];
				this.preg[((wi * 1) 
							+ 0)] = val;
				ri = (ri + 1);
				wi = (wi + 1);
			}
			this.preg_change = true;
		}
		/// <summary>Set and copy the array data for the shader value 'float4 p_lights[6]'</summary>
		public Microsoft.Xna.Framework.Vector4[] P_lights
		{
			set
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'v_viewDir'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute 'v_viewPoint'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute 'world'</summary>
		private int sc2;
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc3;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc4;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc5;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomEmissiveTextureSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomNormalMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomNormalMapSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D CustomTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState CustomTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomNormalMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomNormalMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D CustomEmissiveTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D CustomEmissiveTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D CustomEmissiveTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D CustomNormalMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D CustomTextureSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture2D CustomTexture'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D CustomNormalMap'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture2D CustomEmissiveTexture'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,2,3,4,5,0,0,0,0,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[14];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[8];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,16,240,135,0,1,3,131,0,4,1,0,0,1,136,0,1,14,131,0,1,4,131,0,1,1,229,0,0,229,0,0,153,0,0,1,6,1,95,1,118,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,1,1,168,135,0,0,1,8,131,0,0,1,4,131,0,0,1,1,229,0,0,158,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,15,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,220,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,144,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,16,1,36,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,138,0,0,1,1,1,12,1,0,1,0,1,1,1,40,138,0,0,1,1,1,180,1,0,1,0,1,1,1,208,138,0,0,1,15,1,92,1,0,1,0,1,15,1,120,138,0,0,1,15,1,196,1,0,1,0,1,15,1,216,138,0,0,1,15,1,232,1,0,1,0,1,15,1,252,138,0,0,1,16,1,12,1,0,1,0,1,16,1,32,138,0,0,1,16,1,228,135,0,0,1,3,1,0,1,0,1,16,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,52,1,0,1,0,1,16,1,48,131,0,0,1,93,134,0,0,1,16,1,76,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,104,1,0,1,0,1,16,1,100,131,0,0,1,93,134,0,0,1,16,1,128,1,0,1,0,1,16,1,124,1,0,1,0,1,16,1,212,135,0,0,1,2,131,0,0,1,92,134,0,0,1,16,1,168,1,0,1,0,1,16,1,164,131,0,0,1,93,134,0,0,1,16,1,192,1,0,1,0,1,16,1,188,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,2,132,255,0,138,0,0,1,5,1,76,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,144,1,0,1,0,1,2,1,188,135,0,0,1,36,1,0,1,0,1,1,1,208,1,0,1,0,1,1,1,248,138,0,0,1,1,1,168,131,0,0,1,28,1,0,1,0,1,1,1,155,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,1,1,148,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,4,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,124,1,0,1,113,1,0,1,10,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,10,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,6,1,0,1,0,1,48,1,7,1,0,1,0,1,160,1,8,1,0,1,0,1,80,1,9,1,0,1,0,1,112,1,10,1,0,1,0,1,96,1,11,1,0,1,12,1,0,1,12,1,0,1,13,1,0,1,13,1,0,1,14,1,0,1,14,1,0,1,47,1,0,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,46,131,0,0,1,47,1,0,1,0,1,16,1,48,1,0,1,0,1,16,1,51,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,41,1,0,1,0,1,16,1,42,1,0,1,0,1,16,1,38,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,6,1,64,1,12,1,18,1,3,1,18,1,0,1,240,1,85,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,32,1,22,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,24,1,96,1,30,1,18,1,0,1,18,133,0,0,1,96,1,36,1,96,1,42,1,18,1,0,1,18,133,0,0,1,64,1,48,1,0,1,0,1,34,133,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,32,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,16,131,0,0,1,1,1,209,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,160,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,4,1,0,1,27,1,0,1,0,1,225,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,0,1,198,1,0,1,0,1,235,1,5,1,10,1,4,1,200,1,15,1,0,1,4,1,0,1,177,1,148,1,148,1,235,1,5,1,9,1,4,1,200,1,15,1,0,1,4,1,0,1,108,1,248,1,148,1,235,1,5,1,3,1,4,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,14,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,15,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,16,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,4,1,17,1,0,1,200,1,7,1,0,1,8,1,0,1,177,1,180,1,0,1,225,1,6,1,10,1,0,1,200,1,7,1,0,1,5,1,0,1,177,1,180,1,0,1,225,1,2,1,10,1,0,1,200,1,7,1,0,1,10,1,0,1,177,1,180,1,0,1,225,1,1,1,10,1,0,1,200,1,7,1,0,1,1,1,0,1,108,1,180,1,192,1,235,1,1,1,9,1,10,1,200,1,7,1,0,1,5,1,0,1,108,1,180,1,192,1,235,1,2,1,9,1,5,1,200,1,7,1,0,1,6,1,0,1,108,1,180,1,192,1,235,1,6,1,9,1,8,1,200,1,7,1,0,1,2,1,0,1,27,1,192,1,180,1,235,1,6,1,3,1,6,1,200,1,7,1,0,1,6,1,0,1,27,1,192,1,180,1,235,1,2,1,3,1,5,1,200,1,7,1,0,1,5,1,0,1,27,1,192,1,180,1,235,1,1,1,3,1,1,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,5,1,5,1,0,1,88,1,33,1,0,1,1,1,0,1,190,1,190,1,108,1,240,1,6,1,6,1,128,1,88,1,33,1,1,1,0,1,0,1,190,1,190,1,108,1,240,1,2,1,2,1,129,1,88,1,24,1,1,1,1,1,0,1,108,1,177,1,108,1,166,1,128,1,255,1,128,1,20,1,23,1,0,1,3,1,4,1,20,1,192,1,27,1,160,1,4,1,11,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,1,0,1,148,1,148,1,0,1,226,1,4,1,4,1,0,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,2,1,1,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,177,1,0,1,225,1,6,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,5,1,0,1,0,1,200,1,15,1,128,1,3,1,4,1,148,1,0,1,0,1,160,1,4,1,11,1,0,1,200,1,2,131,0,0,1,190,1,190,1,0,1,176,1,3,1,12,1,0,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,2,1,1,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,148,0,0,1,1,132,255,0,138,0,0,1,19,1,236,1,16,1,42,1,17,1,1,1,0,1,0,1,15,1,200,1,0,1,0,1,4,1,36,135,0,0,1,36,1,0,1,0,1,15,1,16,1,0,1,0,1,15,1,56,138,0,0,1,14,1,232,131,0,0,1,28,1,0,1,0,1,14,1,219,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,212,131,0,0,1,68,1,0,1,2,131,0,0,1,14,133,0,0,1,76,131,0,0,1,92,1,0,1,0,1,1,1,60,1,0,1,2,1,0,1,14,1,0,1,216,132,0,0,1,1,1,68,1,0,1,0,1,1,1,84,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,3,1,228,1,0,1,113,1,0,1,11,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,8,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,8,1,0,1,0,1,48,1,9,1,0,1,0,1,160,1,10,1,0,1,0,1,80,1,11,1,0,1,0,1,112,1,12,1,0,1,0,1,96,1,13,1,0,1,0,1,16,1,14,1,0,1,32,1,32,1,15,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,76,131,0,0,1,77,1,0,1,0,1,16,1,78,1,0,1,0,1,16,1,81,1,0,1,0,1,16,1,66,1,0,1,0,1,16,1,67,1,0,1,0,1,16,1,71,1,0,1,0,1,16,1,72,1,0,1,0,1,16,1,73,1,0,1,0,1,16,1,65,176,0,0,1,63,1,128,1,0,1,0,1,64,1,64,138,0,0,1,245,1,85,1,96,1,8,1,32,1,14,1,18,1,3,1,18,1,0,1,48,1,5,132,0,0,1,96,1,16,1,194,1,0,1,18,133,0,0,1,96,1,22,1,96,1,28,1,18,1,0,1,18,133,0,0,1,96,1,34,1,16,1,40,1,18,1,0,1,18,135,0,0,1,96,1,41,1,196,1,0,1,18,133,0,0,1,96,1,47,1,96,1,53,1,18,1,0,1,18,133,0,0,1,96,1,59,1,96,1,65,1,18,1,0,1,18,133,0,0,1,96,1,71,1,80,1,77,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,112,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,2,1,63,132,0,0,1,5,1,248,1,160,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,144,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,11,1,0,1,148,1,177,1,0,1,161,1,2,1,255,1,0,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,198,1,161,1,1,1,3,1,11,1,200,1,15,1,0,1,3,1,160,1,27,1,136,1,0,1,161,1,9,1,14,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,9,1,15,1,0,1,92,1,15,1,0,1,8,1,160,1,27,1,136,1,177,1,161,1,9,1,16,1,11,1,200,1,15,1,0,1,8,1,160,1,198,1,136,1,0,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,9,1,14,1,3,1,92,1,2,1,0,1,11,1,0,131,27,0,1,161,1,1,1,0,1,11,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,9,1,14,1,3,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,8,1,160,1,177,1,52,1,148,1,171,1,9,1,16,1,8,1,92,1,8,1,0,1,11,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,11,1,200,1,15,1,0,1,8,1,160,1,108,1,208,1,148,1,171,1,9,1,16,1,8,1,200,1,15,1,0,1,4,1,160,1,108,1,255,1,143,1,171,1,9,1,15,1,4,1,200,1,15,1,0,1,9,1,160,1,108,1,208,1,148,1,171,1,9,1,14,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,9,1,1,1,0,1,200,1,2,1,0,1,3,1,0,1,248,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,8,1,1,1,0,1,200,1,1,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,20,1,17,1,0,1,11,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,1,1,168,1,36,1,2,1,11,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,2,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,11,1,11,1,0,1,200,1,12,1,128,1,62,1,0,1,236,1,49,1,0,1,224,1,2,1,2,1,0,1,200,1,1,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,9,1,5,1,0,1,200,1,2,1,0,1,2,1,0,1,195,1,190,1,0,1,240,1,4,1,5,1,0,1,200,1,4,1,0,1,2,1,0,1,191,1,190,1,0,1,240,1,8,1,5,1,0,1,200,1,1,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,9,1,10,1,0,1,200,1,2,1,0,1,5,1,0,1,195,1,190,1,0,1,240,1,4,1,10,1,0,1,200,1,4,1,0,1,5,1,0,1,191,1,190,1,0,1,240,1,8,1,10,1,0,1,200,1,1,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,9,1,6,1,0,1,200,1,2,1,0,1,4,1,0,1,195,1,190,1,0,1,240,1,4,1,6,1,0,1,200,1,4,1,0,1,4,1,0,1,191,1,190,1,0,1,240,1,8,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,190,1,190,1,0,1,176,1,5,1,6,1,0,1,20,1,17,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,4,1,1,1,168,1,18,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,5,1,4,1,20,1,20,1,0,1,5,1,0,1,190,1,190,1,27,1,176,1,3,1,6,1,1,1,168,1,40,1,6,1,5,1,0,1,190,1,190,1,0,1,144,1,3,1,7,1,5,1,20,1,17,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,4,1,1,1,168,1,66,1,6,1,3,1,0,1,190,1,190,1,0,1,144,1,2,1,5,1,6,1,20,1,20,1,0,1,3,1,0,1,190,1,190,1,27,1,176,1,2,1,6,1,1,1,168,1,130,1,6,1,0,1,0,1,190,1,190,1,0,1,208,1,3,1,3,1,7,1,20,1,31,1,0,1,2,1,0,1,167,1,167,1,27,1,224,1,5,1,6,1,7,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,7,1,7,1,13,1,200,1,15,1,128,1,2,132,0,0,1,224,1,5,1,6,1,0,1,200,1,15,1,128,1,3,1,4,1,122,1,0,1,0,1,160,1,2,1,11,1,0,1,88,1,40,1,0,1,1,1,0,1,190,1,190,1,177,1,240,1,4,1,4,1,128,1,88,1,129,1,1,1,0,1,0,1,190,1,190,1,27,1,240,1,1,1,1,1,129,1,88,1,23,1,0,1,2,1,4,1,186,1,192,1,108,1,160,1,2,1,11,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,108,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,192,1,27,1,0,1,225,1,4,1,1,1,0,1,200,1,7,1,128,1,6,1,0,1,192,1,177,1,0,1,225,1,3,1,0,1,0,1,36,1,130,1,1,1,0,1,0,1,190,1,190,1,108,1,176,1,2,1,12,1,128,1,176,1,23,1,0,1,1,1,0,1,192,1,108,1,65,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,168,1,32,133,0,0,1,128,1,194,1,0,1,0,1,13,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,122,1,122,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,4,1,224,1,16,1,42,1,17,131,0,0,1,1,1,208,1,0,1,0,1,3,1,16,135,0,0,1,36,1,0,1,0,1,1,1,104,1,0,1,0,1,1,1,144,138,0,0,1,1,1,64,131,0,0,1,28,1,0,1,0,1,1,1,49,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,134,0,0,1,1,1,42,131,0,0,1,108,1,0,1,2,131,0,0,1,8,133,0,0,1,116,131,0,0,1,132,1,0,1,0,1,1,1,4,1,0,1,3,131,0,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,28,1,0,1,3,1,0,1,1,1,0,1,1,132,0,0,1,1,1,12,134,0,0,1,1,1,35,1,0,1,3,1,0,1,2,1,0,1,1,132,0,0,1,1,1,12,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,8,229,0,0,161,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,208,1,16,1,0,1,12,132,0,0,1,8,134,0,0,1,105,1,8,1,0,1,127,1,0,1,255,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,81,1,0,1,0,1,114,1,82,1,0,1,0,1,115,1,83,1,0,1,0,1,116,1,84,1,0,1,0,1,117,1,85,1,0,1,0,1,118,1,86,1,0,1,0,1,247,1,160,176,0,0,1,191,131,0,0,1,63,1,128,139,0,0,1,21,1,48,1,6,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,96,1,33,1,96,1,39,1,18,1,0,1,18,133,0,0,1,96,1,45,1,96,1,51,1,18,1,0,1,18,133,0,0,1,32,1,57,1,0,1,0,1,34,133,0,0,1,16,1,8,1,128,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,24,1,144,1,33,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,40,1,192,1,33,1,31,1,31,1,254,1,136,1,0,1,0,1,64,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,3,1,3,1,0,1,200,1,7,1,0,1,10,1,4,1,98,1,27,1,98,1,139,1,2,1,3,1,3,1,200,1,7,1,0,1,11,1,4,1,192,1,27,1,192,1,139,1,2,1,0,1,0,1,22,1,130,1,3,1,1,1,0,1,190,1,190,1,198,1,240,1,11,1,11,1,1,1,22,1,30,1,2,1,2,1,0,1,252,1,252,1,27,1,161,1,12,1,7,1,1,1,200,1,14,1,0,1,2,1,0,1,27,1,252,1,1,1,171,1,3,1,6,1,2,1,172,1,129,1,1,1,1,1,0,1,180,1,180,1,1,1,208,1,10,1,10,1,2,1,172,1,71,1,1,1,9,1,0,1,192,1,108,1,0,1,128,1,9,1,255,1,5,1,88,1,23,1,1,1,4,1,0,1,198,1,190,1,108,1,225,1,9,1,4,1,129,1,200,1,7,1,0,1,4,1,0,1,177,1,98,1,180,1,235,1,9,1,5,1,4,1,88,1,23,1,1,1,10,1,0,1,192,1,108,1,177,1,225,1,10,1,1,1,129,1,88,1,135,1,0,1,5,1,0,1,192,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,11,1,0,1,27,1,192,1,192,1,235,1,0,1,3,1,5,1,200,1,7,1,0,1,3,1,0,1,27,1,98,1,192,1,235,1,0,1,3,1,10,1,200,1,7,1,0,1,4,1,0,1,108,1,98,1,192,1,235,1,9,1,6,1,4,1,200,1,8,131,0,0,1,180,1,180,1,0,1,240,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,180,1,180,1,0,1,240,1,3,1,3,1,0,1,88,1,33,1,1,1,1,1,0,1,190,1,190,1,177,1,240,1,11,1,11,1,129,1,88,1,23,1,1,1,3,1,0,1,180,1,177,1,108,1,225,1,3,1,1,1,129,1,88,1,135,1,0,1,6,1,0,1,180,1,108,1,27,1,225,1,11,1,1,1,128,1,200,1,7,1,0,1,4,1,0,1,180,1,27,1,0,1,225,1,4,1,0,1,0,1,201,1,1,1,0,1,1,1,0,1,205,1,192,1,0,1,240,1,6,1,4,1,0,1,181,1,66,1,3,1,3,1,0,1,192,1,192,1,130,1,208,1,3,1,4,1,255,1,181,1,33,1,1,1,3,1,0,1,180,1,192,1,131,1,208,1,10,1,4,1,255,1,77,1,40,1,1,1,0,1,0,1,190,1,192,1,177,1,240,1,5,1,4,1,1,1,76,1,36,1,4,1,1,1,0,1,27,1,177,1,198,1,225,1,0,1,1,1,3,1,64,1,24,1,4,1,4,1,0,1,108,1,177,1,177,1,225,1,3,1,4,1,3,1,64,1,19,1,1,1,5,1,0,1,176,1,111,1,108,1,161,1,4,1,4,1,1,1,172,1,142,1,1,1,10,1,0,1,193,1,252,1,0,1,129,1,1,1,2,1,1,1,172,1,142,1,3,1,6,1,0,1,17,1,252,1,193,1,129,1,4,1,5,1,1,1,56,1,129,1,1,1,6,1,0,1,177,1,108,1,27,1,225,1,6,1,3,1,1,1,56,1,129,1,0,1,10,1,0,1,177,1,27,1,108,1,225,1,10,1,0,1,5,1,20,1,7,1,0,1,3,1,0,1,192,1,192,1,177,1,225,1,8,1,8,1,5,1,12,1,20,1,5,1,4,1,0,131,27,0,1,225,1,3,1,1,1,0,1,20,1,8,131,0,0,1,27,1,177,1,27,1,225,1,0,1,4,1,1,1,12,1,134,1,0,1,5,1,0,1,27,1,193,1,177,1,161,1,0,1,4,1,1,1,168,1,23,1,4,1,0,1,0,1,20,1,192,1,67,1,192,1,10,1,0,1,1,1,168,1,39,1,4,1,0,1,0,1,192,1,20,1,131,1,192,1,0,1,6,1,1,1,200,1,7,1,0,1,1,1,0,1,192,1,192,1,0,1,224,1,5,1,4,1,0,1,200,1,7,131,0,0,1,192,1,27,1,192,1,235,1,1,1,9,1,0,1,200,1,7,131,0,0,1,192,1,192,1,0,1,225,1,3,1,0,1,0,1,200,1,7,131,0,0,1,180,1,108,1,0,1,225,1,0,1,2,1,0,1,200,1,7,131,0,0,1,180,1,192,1,21,1,235,1,0,1,7,1,2,1,64,1,16,133,0,0,1,108,1,226,1,0,1,0,1,128,1,64,1,32,133,0,0,1,177,1,226,1,0,1,0,1,128,1,64,1,72,131,0,0,1,27,1,108,1,198,1,225,1,8,1,2,1,128,1,200,1,7,131,0,0,1,192,1,27,1,0,1,161,1,0,1,6,1,0,1,56,1,16,1,128,132,0,0,1,108,1,226,131,0,0,1,56,1,32,1,128,132,0,0,1,177,1,226,131,0,0,1,56,1,72,1,128,1,0,1,0,1,27,1,27,1,198,1,225,1,0,1,7,149,0,0,132,255,0,138,0,0,1,4,1,136,1,16,1,42,1,17,1,1,1,0,1,0,1,2,1,20,1,0,1,0,1,2,1,116,135,0,0,1,36,1,0,1,0,1,1,1,100,1,0,1,0,1,1,1,140,138,0,0,1,1,1,60,131,0,0,1,28,1,0,1,0,1,1,1,47,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,134,0,0,1,1,1,40,131,0,0,1,48,1,0,1,2,131,0,0,1,14,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,14,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,2,1,52,1,0,1,113,1,0,1,6,138,0,0,1,113,1,8,131,0,0,1,1,131,0,0,1,6,131,0,0,1,10,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,160,1,7,1,0,1,0,1,80,1,8,1,0,1,0,1,112,1,9,1,0,1,32,1,96,1,10,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,81,1,0,1,4,1,242,1,82,1,0,1,5,1,243,1,83,1,0,1,6,1,116,1,84,1,0,1,7,1,117,1,85,1,0,1,8,1,118,1,86,1,0,1,9,1,247,1,160,131,0,0,1,41,131,0,0,1,42,1,0,1,0,1,16,1,43,1,0,1,0,1,16,1,45,1,0,1,0,1,16,1,29,1,0,1,0,1,16,1,30,1,0,1,0,1,16,1,37,1,0,1,0,1,16,1,38,1,0,1,0,1,16,1,39,1,0,1,0,1,16,1,28,176,0,0,1,63,1,128,142,0,0,1,245,1,85,1,96,1,5,1,0,1,0,1,18,1,3,1,194,133,0,0,1,64,1,11,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,15,1,96,1,21,1,18,1,0,1,18,133,0,0,1,96,1,27,1,96,1,33,1,18,1,0,1,18,133,0,0,1,96,1,39,1,16,1,45,1,18,1,0,1,34,131,0,0,1,5,1,248,1,96,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,6,1,3,1,0,1,200,1,2,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,5,1,0,1,200,1,8,1,0,1,3,1,0,1,190,1,190,1,0,1,176,1,2,1,6,1,0,1,200,1,2,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,4,1,0,1,200,1,4,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,5,1,0,1,200,1,8,1,0,1,2,1,0,1,190,1,190,1,0,1,176,1,1,1,6,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,4,1,0,1,200,1,2,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,5,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,4,1,6,1,0,1,200,1,1,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,4,1,0,1,200,1,2,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,5,1,0,1,200,1,4,1,0,1,4,1,0,1,167,1,167,1,0,1,175,1,6,1,6,1,0,1,20,1,24,1,0,1,4,1,0,1,167,1,167,1,27,1,175,1,6,1,7,1,5,1,169,1,135,1,128,1,7,1,0,131,192,0,1,193,1,5,1,5,1,13,1,200,1,15,1,128,1,2,132,0,0,1,226,1,4,1,4,1,0,1,200,1,15,1,128,1,3,1,4,131,0,0,1,160,1,4,1,11,1,0,1,200,1,8,131,0,0,1,190,1,190,1,0,1,240,1,1,1,1,1,0,1,200,1,7,1,0,1,4,1,4,1,192,1,192,1,0,1,160,1,4,1,11,1,0,1,36,1,129,1,1,1,0,1,0,1,195,1,195,1,108,1,240,1,2,1,2,1,128,1,88,1,17,1,2,1,3,1,0,1,195,1,195,1,108,1,240,1,3,1,3,1,128,1,88,1,17,1,3,1,0,1,0,1,190,1,190,1,108,1,176,1,4,1,12,1,131,1,88,1,129,131,0,0,1,108,1,108,1,27,1,160,1,0,1,13,1,128,1,200,1,7,1,128,1,4,1,0,1,192,1,27,1,0,1,225,1,1,1,0,1,0,1,200,1,7,1,128,1,5,1,0,1,21,1,108,1,0,1,225,1,3,1,3,1,0,1,200,1,7,1,128,1,6,1,0,1,21,1,108,1,0,1,225,1,2,1,2,1,0,1,168,1,135,1,0,1,1,1,0,1,192,1,27,1,128,1,193,1,1,1,0,1,13,1,200,1,1,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,8,1,1,1,0,1,200,1,2,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,9,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,62,1,62,1,0,1,111,1,10,1,1,1,0,1,184,1,16,133,0,0,1,67,1,194,1,0,1,0,1,255,1,200,1,15,1,128,1,1,1,0,1,85,1,85,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {60,66,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,249,111,38,191,255,218,248,251,215,48,255,252,26,191,198,111,66,255,255,117,220,159,255,191,126,126,61,250,255,239,127,217,252,254,211,95,195,209,225,175,210,129,255,6,191,198,255,123,232,192,120,174,66,60,95,254,166,242,221,191,245,107,252,191,7,207,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,249,242,252,250,191,6,199,147,19,4,106,38,78,251,187,52,78,251,117,244,255,223,68,156,166,253,20,232,231,55,250,53,4,238,191,167,253,4,109,40,102,108,118,92,155,95,227,55,27,104,179,251,107,252,65,166,205,239,54,212,102,239,215,248,131,129,59,190,254,117,228,43,251,252,90,244,127,116,223,253,220,140,21,180,248,205,34,223,227,239,216,123,63,70,255,127,82,230,203,89,177,188,192,223,191,238,175,17,127,31,113,113,236,253,223,144,254,127,182,108,218,108,57,101,8,24,195,235,121,54,203,235,95,99,133,223,129,23,198,139,223,241,110,234,189,251,27,209,151,91,222,36,253,109,244,251,191,228,253,253,251,82,135,239,60,90,255,99,244,251,191,229,253,253,95,209,239,255,135,247,247,111,244,155,17,252,223,204,251,94,127,7,77,254,0,253,29,244,251,83,244,251,125,250,108,135,254,255,167,234,223,207,233,247,111,211,255,255,172,72,219,146,62,155,123,109,255,48,250,253,15,162,255,255,91,145,182,127,29,125,246,87,121,109,255,49,250,253,31,210,118,191,158,252,224,246,255,55,61,102,184,191,55,190,248,181,255,239,255,251,255,250,191,39,191,198,201,155,227,39,191,19,253,249,250,215,148,207,64,183,223,73,154,165,207,233,179,82,223,255,13,232,223,150,126,254,97,244,255,95,231,215,52,114,240,107,49,93,241,252,78,252,217,175,73,255,253,122,191,198,239,166,159,237,243,103,191,22,125,150,252,26,143,245,51,201,119,252,181,127,237,175,201,173,127,29,206,199,252,191,225,81,153,250,107,127,29,226,160,95,147,255,243,62,223,29,248,124,175,255,57,125,124,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,194,169,233,73,181,88,21,37,253,242,112,188,247,233,248,225,253,189,241,222,193,254,254,175,241,19,36,14,191,193,175,241,155,254,69,4,226,31,116,88,253,158,191,39,62,255,49,249,252,15,162,255,225,187,127,136,62,255,135,240,121,34,159,255,26,254,231,59,44,86,191,233,255,244,107,201,23,246,249,93,104,26,127,93,134,241,235,255,73,248,61,161,223,127,205,95,227,55,253,147,228,243,95,243,15,250,181,236,239,191,214,31,244,107,107,155,95,247,215,248,181,255,160,95,199,254,254,235,252,65,191,174,253,253,215,253,131,126,61,251,251,175,247,7,253,250,250,59,117,243,39,253,26,191,193,111,250,23,153,223,127,77,239,247,95,139,126,127,194,108,243,155,82,95,255,25,125,247,159,253,69,191,22,255,253,235,19,78,255,217,31,244,27,252,26,191,198,95,68,248,253,218,191,38,255,253,21,193,255,207,254,164,95,135,89,13,127,255,26,212,7,189,67,237,126,29,22,109,124,246,215,16,62,242,217,239,70,125,252,154,14,14,193,252,53,169,29,222,255,207,254,164,95,159,251,255,53,25,6,205,209,175,245,107,73,187,63,9,191,211,56,169,253,95,243,23,253,154,220,230,215,226,223,127,33,171,145,255,236,127,250,117,25,206,175,195,184,252,6,191,198,255,205,184,254,58,132,59,250,253,177,95,227,63,227,119,64,19,188,243,123,83,195,95,143,190,35,196,254,56,122,151,198,241,215,252,65,238,179,175,254,56,194,241,47,162,241,120,159,253,53,127,220,175,229,125,246,235,240,103,255,247,31,247,107,235,103,232,235,215,211,190,18,250,12,109,126,125,250,155,196,150,97,25,248,242,217,87,12,235,215,87,88,242,217,95,195,176,194,207,254,239,63,238,215,241,62,251,117,21,222,175,229,193,251,117,21,222,175,205,159,249,237,254,26,126,55,252,236,255,254,227,126,93,253,12,115,66,124,66,124,3,154,255,223,127,240,175,99,231,225,215,193,60,240,255,127,125,158,163,223,64,231,13,180,252,245,249,243,95,243,215,248,191,249,253,95,79,254,254,147,48,79,248,28,115,250,27,208,103,191,158,194,250,117,126,141,223,92,219,203,223,191,230,175,241,219,209,79,249,91,120,2,252,249,127,235,252,124,245,23,167,252,206,175,197,240,127,125,250,255,175,199,115,252,235,120,253,255,218,12,15,127,227,101,240,194,175,207,176,190,194,56,248,51,240,138,142,15,60,203,243,2,62,1,79,160,143,143,127,13,233,248,215,144,177,211,231,255,55,183,123,194,248,9,159,255,26,196,231,248,251,215,210,191,127,173,223,64,120,231,215,254,53,126,75,250,251,127,248,147,12,45,48,14,252,223,201,128,208,77,248,240,55,37,248,95,217,239,241,247,175,33,237,255,36,211,63,209,233,47,250,181,89,190,157,140,0,23,26,211,95,132,207,126,83,166,191,200,129,252,46,227,144,223,29,93,126,13,197,133,230,247,47,250,77,64,179,223,64,222,145,223,229,29,249,93,222,97,217,249,13,48,175,255,247,31,244,127,255,223,191,6,63,198,222,252,26,250,252,85,48,244,191,246,255,69,246,166,181,246,230,207,253,53,229,51,180,253,157,164,89,250,167,209,103,79,245,253,223,228,215,248,232,215,120,78,63,127,95,250,255,99,238,228,55,193,160,126,141,167,244,251,155,95,211,228,247,157,29,249,77,24,196,255,255,31,245,15,237,184,127,29,247,213,7,61,151,31,96,183,126,13,182,67,127,208,239,225,195,83,189,255,7,253,26,106,87,192,155,198,222,36,44,79,198,222,252,26,196,219,191,169,218,143,223,136,120,215,252,254,27,19,63,154,223,127,19,226,71,243,251,111,74,60,45,191,147,78,33,29,32,191,147,124,147,76,154,54,220,239,127,100,224,147,60,241,239,218,175,126,254,107,162,95,253,253,215,66,191,250,251,175,141,126,245,247,95,7,118,78,127,255,117,97,231,244,247,95,143,250,253,245,255,35,177,27,191,41,219,33,95,110,127,131,95,227,43,182,47,144,249,95,71,101,20,223,253,6,176,131,42,231,162,3,160,71,253,239,255,154,63,233,215,214,239,127,3,134,247,27,88,189,96,244,39,244,25,250,250,245,185,255,255,204,254,109,250,38,189,100,225,253,152,215,159,251,236,246,125,252,6,189,62,68,239,252,26,182,15,252,221,237,3,159,185,62,132,70,191,1,125,246,127,123,239,64,39,139,237,254,49,177,215,220,207,111,66,186,74,254,254,181,248,239,223,212,254,253,235,240,223,191,153,253,251,55,224,191,127,115,182,63,206,135,248,53,21,47,209,97,130,151,175,15,127,77,197,11,159,253,110,191,134,245,5,24,199,95,139,113,252,53,24,62,233,201,255,8,239,254,6,218,31,233,74,254,251,199,236,223,191,14,255,13,219,140,119,193,35,248,219,224,194,122,158,254,159,176,222,255,245,255,35,161,153,248,55,212,207,127,244,27,147,207,240,107,17,61,132,7,126,237,255,232,215,230,246,162,215,105,92,127,240,111,168,112,193,147,110,158,160,135,255,51,138,231,140,239,241,155,50,92,121,239,215,196,24,254,160,223,152,250,192,119,170,231,255,34,140,251,215,166,254,126,13,254,238,171,191,24,109,126,93,109,175,159,113,251,95,155,198,131,191,141,198,166,207,130,120,1,204,253,107,252,90,145,120,225,215,250,81,188,240,13,196,11,123,183,213,187,195,241,130,211,189,78,255,253,250,127,147,167,11,173,94,36,249,179,159,255,90,94,155,95,219,251,253,215,241,126,255,117,189,223,127,61,247,251,173,252,124,226,221,191,9,126,254,19,230,95,249,219,247,135,240,55,252,33,225,97,163,59,69,78,126,109,254,251,43,232,214,191,73,248,24,127,3,135,255,236,111,50,254,153,137,3,126,29,253,12,50,253,107,43,156,223,141,241,97,191,140,223,255,117,68,46,169,221,255,253,23,195,191,253,13,68,22,241,46,255,255,215,231,119,127,3,106,243,127,179,62,32,78,131,30,103,25,66,187,95,151,99,0,248,170,226,75,254,90,218,22,223,19,141,24,198,175,205,254,167,232,1,227,223,226,179,223,128,255,254,205,245,111,193,13,254,46,124,203,223,128,199,250,219,177,159,139,239,210,95,67,252,214,95,91,250,250,139,4,214,175,173,125,9,108,233,239,43,252,205,248,253,122,58,54,146,218,191,248,215,240,198,6,152,248,191,63,54,51,158,95,107,195,120,212,159,12,198,243,235,121,159,253,6,252,247,111,110,113,198,120,126,125,55,127,132,223,111,199,190,180,25,207,175,71,227,129,111,254,107,234,120,126,13,29,15,222,55,115,139,184,70,231,219,226,240,107,241,103,191,6,224,254,77,230,179,95,87,198,204,125,153,207,140,239,109,112,85,120,252,127,223,54,138,77,2,95,252,230,244,243,175,249,155,228,247,223,2,120,253,77,198,190,253,154,12,235,43,125,207,252,29,250,217,192,201,216,187,152,159,253,107,169,126,149,223,127,173,63,200,248,217,191,86,199,207,198,123,198,207,54,190,185,252,46,239,200,239,242,14,227,250,27,8,62,93,61,253,107,232,243,27,253,86,244,207,175,5,63,251,31,251,181,141,158,254,119,127,19,249,12,194,249,59,73,179,244,95,251,77,124,63,251,215,234,249,217,255,214,175,241,35,63,91,243,189,118,220,255,214,141,111,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,242,185,252,128,124,217,127,193,249,178,223,243,247,140,231,203,110,191,78,241,235,115,142,204,173,59,152,117,10,228,87,205,58,5,1,229,117,10,179,94,135,124,247,127,65,185,173,49,247,247,155,254,77,154,171,248,117,240,29,173,185,254,73,191,73,202,249,15,228,57,176,158,242,7,201,223,191,198,223,244,235,33,215,38,185,6,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,255,6,191,134,228,140,101,77,85,250,250,181,180,175,223,212,235,11,159,253,166,94,95,191,150,194,116,159,75,95,253,207,165,175,95,203,246,245,107,113,95,154,7,255,117,100,109,227,171,63,233,55,243,250,194,103,191,153,215,151,230,241,188,207,165,175,254,231,210,215,175,109,251,226,117,101,251,247,175,195,249,111,206,227,253,69,242,247,175,197,127,255,186,246,239,95,135,255,254,245,244,111,165,11,255,255,215,231,121,147,252,185,230,214,254,35,89,103,254,53,180,175,95,19,112,60,154,254,90,252,183,27,247,175,195,127,255,108,224,242,235,121,184,252,152,182,253,53,60,92,36,239,47,127,203,247,191,22,127,111,112,251,53,164,111,254,91,190,255,117,248,123,131,235,175,33,184,252,73,38,47,38,235,243,255,247,159,244,99,2,251,31,210,220,215,95,36,127,255,90,252,247,175,105,255,254,117,248,239,95,203,254,253,27,240,223,46,183,202,184,90,58,72,30,204,209,65,114,97,66,135,223,141,101,66,242,97,146,147,251,13,254,160,255,130,114,175,138,199,127,36,227,117,107,67,50,94,183,54,132,191,205,90,12,229,93,255,35,233,199,230,216,48,126,94,139,161,191,255,37,124,7,216,242,253,111,240,47,97,29,6,235,49,50,126,89,139,209,126,237,60,106,191,118,30,181,95,59,143,58,126,254,27,121,64,228,179,117,173,204,174,229,96,221,177,51,111,118,45,7,235,144,66,75,249,238,215,248,53,220,90,14,250,253,47,52,15,77,243,243,31,201,119,95,253,197,38,71,217,93,203,249,53,153,30,110,45,7,207,143,214,114,54,63,63,90,203,249,209,90,206,143,214,114,126,180,150,243,115,185,150,131,199,95,203,121,78,216,200,90,206,239,99,245,244,221,95,83,62,195,143,223,73,154,165,91,244,199,14,62,254,53,100,45,231,128,126,126,251,215,248,249,187,110,243,33,241,193,111,194,58,216,233,95,60,93,189,251,117,227,131,223,64,109,245,175,195,252,39,114,253,107,168,207,108,124,34,248,20,248,219,248,134,240,41,126,13,225,89,150,123,249,251,255,54,122,227,63,146,239,68,134,1,251,215,237,192,254,117,59,176,127,221,91,194,254,245,60,216,63,38,176,255,33,200,141,239,11,226,111,223,23,196,223,190,47,136,191,141,110,54,126,170,143,219,175,217,193,237,215,84,220,160,127,140,140,255,154,252,251,111,0,217,177,190,32,100,198,247,5,241,183,239,11,226,111,223,23,52,122,99,200,23,4,236,219,248,130,191,134,226,175,253,242,223,190,47,248,107,40,254,58,126,254,251,155,246,5,161,87,128,47,116,149,239,11,254,154,204,99,126,251,190,47,248,255,4,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid1))
			{
				this.SetV_fogAndAlpha(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid2))
			{
				this.SetP_EmissiveColour(ref value);
				return true;
			}
			if ((id == ps2nc.cid3))
			{
				this.SetP_fogColourAndGamma(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Matrix' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Matrix value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid0))
			{
				this.SetV_SH(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4[]' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Vector4[] value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.cid4))
			{
				this.SetP_lights(value, 0, 0, ((uint)(value.Length)));
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.sid0))
			{
				this.CustomEmissiveTextureSampler = value;
				return true;
			}
			if ((id == ps2nc.sid1))
			{
				this.CustomNormalMapSampler = value;
				return true;
			}
			if ((id == ps2nc.sid2))
			{
				this.CustomTextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((ps2nc.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == ps2nc.tid0))
			{
				this.CustomTexture = value;
				return true;
			}
			if ((id == ps2nc.tid1))
			{
				this.CustomNormalMap = value;
				return true;
			}
			if ((id == ps2nc.tid2))
			{
				this.CustomEmissiveTexture = value;
				return true;
			}
			return false;
		}
	}
}
