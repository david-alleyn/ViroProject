// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Simple.fx
// Namespace = Xen.Ex.Shaders

namespace Xen.Ex.Shaders
{
	
	/// <summary><para>Technique 'FillVertexColour' generated from file 'Simple.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 0 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class FillVertexColour : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'FillVertexColour' shader</summary>
		public FillVertexColour()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			FillVertexColour.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != FillVertexColour.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			if ((this.vreg_change == true))
			{
				FillVertexColour.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(FillVertexColour.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					FillVertexColour.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref FillVertexColour.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((FillVertexColour.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((FillVertexColour.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			FillVertexColour.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out FillVertexColour.fx, FillVertexColour.fxb, 7, 2);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return this.vreg_change;
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(FillVertexColour.vin[i]));
			index = FillVertexColour.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,1,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,60,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,5,1,0,0,14,8,135,0,1,216,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,112,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,3,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,14,1,20,1,0,1,0,1,14,1,48,138,0,0,1,15,1,48,135,0,0,1,3,1,0,1,0,1,14,1,172,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,128,1,0,1,0,1,14,1,124,131,0,0,1,93,134,0,0,1,14,1,152,1,0,1,0,1,14,1,148,1,0,1,0,1,14,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,180,1,0,1,0,1,14,1,176,131,0,0,1,93,134,0,0,1,14,1,204,1,0,1,0,1,14,1,200,1,0,1,0,1,15,1,32,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,244,1,0,1,0,1,14,1,240,131,0,0,1,93,134,0,0,1,15,1,12,1,0,1,0,1,15,1,8,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,141,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,240,1,160,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,226,150,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,160,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,63,1,0,1,8,1,0,1,0,1,240,1,160,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,3,1,0,1,0,1,200,1,15,131,0,0,1,198,1,0,1,0,1,235,1,3,1,5,1,0,1,200,1,15,131,0,0,1,177,1,148,1,148,1,235,1,3,1,4,1,0,1,200,1,15,131,0,0,1,108,1,248,1,148,1,235,1,3,1,2,1,0,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,7,1,0,1,200,1,15,1,128,133,0,0,1,226,1,1,1,1,148,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,141,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,240,1,160,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,226,150,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,160,1,6,1,0,1,0,1,16,1,7,1,0,1,48,1,32,1,8,1,0,1,0,1,240,1,160,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,2,1,208,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,2,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,161,1,3,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,3,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,3,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,3,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,3,1,5,1,6,1,200,1,15,1,0,1,0,1,160,1,177,1,136,1,0,1,171,1,3,1,4,1,0,1,92,1,2,1,0,1,3,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,0,1,160,1,27,1,52,1,148,1,171,1,3,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,3,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,3,1,6,1,5,1,92,1,8,1,0,1,3,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,3,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,3,1,5,1,6,1,200,1,15,1,0,1,0,1,160,1,108,1,208,1,148,1,171,1,3,1,4,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,0,1,4,1,0,1,200,1,4,131,0,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,2,1,0,1,195,1,190,1,0,1,176,1,0,1,3,1,0,1,200,1,4,1,0,1,2,1,0,1,195,1,190,1,0,1,176,1,0,1,2,1,0,1,20,1,17,1,0,1,3,1,0,1,195,1,190,1,27,1,176,1,0,1,0,1,4,1,168,1,36,1,2,1,3,1,0,1,195,1,190,1,0,1,144,1,0,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,3,1,3,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,2,1,2,1,0,1,200,1,15,1,128,133,0,0,1,226,1,1,1,1,149,0,0,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,141,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,240,1,160,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,226,151,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,16,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,160,1,4,1,0,1,0,1,240,1,160,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,15,1,128,133,0,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {200,37,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,207,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,223,224,55,145,239,254,173,95,227,155,235,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,220,238,249,245,127,13,142,211,38,8,212,76,156,182,210,56,237,155,140,7,181,159,2,253,0,222,111,246,107,8,108,255,249,181,232,255,8,77,187,159,75,255,215,191,14,240,251,205,34,223,227,239,216,123,63,70,255,127,82,230,203,89,177,188,192,223,191,238,175,17,127,31,177,106,236,253,223,144,254,127,182,108,218,108,57,101,8,24,195,235,121,54,203,107,71,43,244,129,207,241,110,234,189,91,210,255,255,40,239,239,223,138,104,186,163,116,197,179,239,197,224,127,157,126,142,241,255,41,250,253,31,68,159,253,12,253,255,79,213,191,255,44,250,253,79,163,255,255,103,145,182,127,23,125,246,183,121,109,255,37,250,253,159,163,255,255,110,218,135,223,246,127,163,207,127,185,215,246,55,163,54,191,145,182,251,245,228,7,183,255,191,233,49,243,254,51,248,231,215,254,191,255,239,255,235,255,254,109,126,141,147,55,199,79,126,39,250,243,199,245,51,109,130,39,197,231,171,230,247,191,247,251,239,252,26,95,20,211,186,106,170,243,54,221,122,117,39,253,246,243,215,207,83,161,92,122,82,45,86,69,73,191,60,28,239,125,58,126,120,127,111,188,119,176,191,255,107,252,46,212,109,66,195,166,153,248,147,126,77,160,240,27,252,166,244,251,127,246,39,153,30,12,78,166,179,127,13,200,253,218,255,23,225,180,107,113,250,19,127,13,249,12,95,253,78,220,234,215,72,255,40,250,103,135,223,255,117,120,142,14,232,255,223,254,53,44,47,254,181,191,38,205,192,175,169,223,125,19,207,229,7,140,159,102,226,15,194,248,229,247,223,248,15,250,53,237,239,191,201,31,244,107,217,223,127,211,63,232,215,182,191,255,26,127,208,175,163,191,131,118,191,174,247,59,181,251,143,76,27,130,243,31,253,154,250,238,175,67,52,37,57,248,181,233,51,106,243,21,125,247,159,253,73,52,246,95,71,254,198,123,255,25,209,255,63,251,131,220,103,127,13,245,237,62,251,53,248,179,255,155,112,144,207,126,140,97,253,154,255,209,175,193,223,255,103,127,145,252,253,107,241,223,191,174,253,251,215,225,191,127,61,251,247,111,192,127,255,250,244,183,226,245,31,253,186,222,92,99,254,122,252,247,107,69,248,239,215,138,242,223,222,215,167,255,175,241,7,13,241,159,193,201,116,246,51,191,25,250,7,255,253,121,191,182,193,233,240,55,145,207,0,200,240,223,62,125,246,244,215,16,224,191,14,253,251,156,126,254,190,244,255,63,143,63,251,117,56,23,246,151,209,255,255,182,95,195,228,203,254,218,111,156,39,85,191,91,184,255,214,141,111,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,255,11,207,143,112,252,255,206,115,249,53,99,213,159,160,84,214,191,247,107,252,166,127,209,175,241,107,252,158,191,167,15,207,143,97,77,30,192,228,16,40,126,181,57,4,106,196,57,4,228,1,36,159,240,159,253,73,255,222,175,241,107,252,69,99,137,197,255,38,137,221,37,214,255,181,126,141,175,254,164,95,39,253,207,168,175,175,254,166,95,135,83,104,148,67,224,191,127,141,191,137,26,255,73,18,247,251,159,255,53,244,249,95,19,249,252,255,166,207,255,111,254,252,199,184,223,95,243,15,66,124,109,250,250,53,181,175,95,215,235,11,159,253,186,94,95,154,131,240,62,151,190,250,159,75,95,38,63,65,195,226,190,126,205,78,95,191,94,167,175,95,111,160,175,95,111,160,175,95,47,218,215,175,99,251,146,220,198,111,64,127,255,223,127,146,142,249,31,194,120,127,13,205,131,208,215,252,247,175,105,255,254,117,248,239,95,203,254,253,27,240,223,191,182,203,147,252,75,191,166,151,147,192,243,255,182,60,137,193,201,252,190,15,228,126,173,72,158,238,215,26,202,211,73,158,228,224,215,176,121,186,159,149,156,200,215,149,189,33,25,243,230,247,79,234,204,239,159,212,153,223,63,169,51,191,127,82,108,126,255,159,0,0,0,255,255};
			}
		}
#endif
	}
	/// <summary><para>Technique 'FillSolidColour' generated from file 'Simple.fx'</para><para>Vertex Shader: approximately 4 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 1 instruction slot used, 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class FillSolidColour : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'FillSolidColour' shader</summary>
		public FillSolidColour()
		{
			this.preg[0] = new Microsoft.Xna.Framework.Vector4(1F, 1F, 1F, 1F);
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			FillSolidColour.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			FillSolidColour.cid0 = state.GetNameUniqueID("FillColour");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != FillSolidColour.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			if ((this.vreg_change == true))
			{
				FillSolidColour.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				FillSolidColour.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(FillSolidColour.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					FillSolidColour.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref FillSolidColour.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((FillSolidColour.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((FillSolidColour.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			FillSolidColour.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out FillSolidColour.fx, FillSolidColour.fxb, 5, 1);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.preg_change);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(FillSolidColour.vin[i]));
			index = FillSolidColour.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'FillColour'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float4 FillColour'</summary><param name="value"/>
		public void SetFillColour(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 FillColour'</summary>
		public Microsoft.Xna.Framework.Vector4 FillColour
		{
			set
			{
				this.SetFillColour(ref value);
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,116,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,4,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,15,1,104,135,0,0,1,3,1,0,1,0,1,14,1,228,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,184,1,0,1,0,1,14,1,180,131,0,0,1,93,134,0,0,1,14,1,208,1,0,1,0,1,14,1,204,1,0,1,0,1,15,1,24,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,236,1,0,1,0,1,14,1,232,131,0,0,1,93,134,0,0,1,15,1,4,1,0,1,0,1,15,131,0,0,1,15,1,88,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,44,1,0,1,0,1,15,1,40,131,0,0,1,93,134,0,0,1,15,1,68,1,0,1,0,1,15,1,64,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,2,132,255,0,138,0,0,1,1,1,204,1,16,1,42,1,17,1,1,1,0,1,0,1,1,132,0,0,1,204,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,204,1,0,1,1,1,0,1,4,143,0,0,1,1,131,0,0,1,5,134,0,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,14,1,0,1,6,1,0,1,63,1,0,1,7,1,241,1,85,1,80,1,3,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,8,1,32,1,14,1,18,1,0,1,18,136,0,0,1,3,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,2,1,0,1,0,1,200,1,15,131,0,0,1,198,1,0,1,0,1,235,1,2,1,4,1,0,1,200,1,15,131,0,0,1,177,1,148,1,148,1,235,1,2,1,3,1,0,1,200,1,15,131,0,0,1,108,1,248,1,148,1,235,1,2,1,1,1,0,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,0,1,7,148,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,150,0,0,1,1,132,255,0,138,0,0,1,16,1,164,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,204,1,0,1,0,1,1,1,216,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,152,1,0,1,1,1,0,1,6,143,0,0,1,1,131,0,0,1,3,134,0,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,16,1,6,1,0,1,48,1,32,1,7,176,0,0,1,64,1,64,142,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,8,1,96,1,14,1,18,1,0,1,18,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,16,1,32,1,0,1,0,1,18,1,0,1,196,134,0,0,1,5,1,0,1,0,1,34,133,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,6,1,0,1,0,1,108,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,3,1,2,1,6,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,5,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,4,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,6,1,200,1,15,1,0,1,4,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,4,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,0,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,0,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,3,1,0,1,6,1,200,1,15,1,0,1,0,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,0,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,4,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,4,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,3,1,1,1,6,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,4,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,5,1,200,1,15,1,0,1,0,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,0,1,200,1,2,131,0,0,1,170,1,167,1,0,1,239,1,0,1,3,1,0,1,200,1,4,131,0,0,1,170,1,167,1,0,1,239,1,5,1,3,1,0,1,200,1,8,131,0,0,1,170,1,167,1,0,1,239,1,4,1,3,1,0,1,200,1,1,1,0,1,1,1,0,1,195,1,190,1,0,1,176,1,0,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,195,1,190,1,0,1,176,1,0,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,195,1,190,1,27,1,176,1,0,1,0,1,3,1,168,1,36,1,1,1,2,1,0,1,195,1,190,1,0,1,144,1,0,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,149,0,0,132,255,0,131,0,0,1,1,135,0,0,1,216,1,16,1,42,1,17,132,0,0,1,180,131,0,0,1,36,135,0,0,1,36,135,0,0,1,148,139,0,0,1,108,131,0,0,1,28,131,0,0,1,95,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,88,131,0,0,1,48,1,0,1,2,131,0,0,1,1,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,150,0,0,1,1,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,200,1,15,1,128,133,0,0,1,34,151,0,0,132,255,0,138,0,0,1,1,1,92,1,16,1,42,1,17,1,1,131,0,0,1,240,131,0,0,1,108,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,108,1,0,1,1,145,0,0,1,1,131,0,0,1,1,134,0,0,1,2,1,144,131,0,0,1,3,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,4,1,0,1,0,1,18,1,0,1,196,134,0,0,1,3,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,131,0,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,0,1,3,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {76,38,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,222,253,166,242,251,175,141,191,233,255,127,128,126,247,235,232,255,127,77,253,251,67,158,95,143,254,255,251,95,54,191,255,244,215,112,253,252,89,250,29,126,31,234,135,223,91,133,239,253,158,191,137,124,247,111,109,120,239,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,236,60,191,254,175,193,241,221,132,2,181,95,215,196,105,127,149,198,105,223,100,28,169,253,20,8,8,1,239,55,251,53,4,182,255,252,90,244,127,132,180,221,207,165,255,255,251,255,6,126,191,89,228,123,252,29,123,239,199,232,255,79,202,124,57,43,150,23,248,251,215,253,53,226,239,35,86,141,189,255,27,210,255,207,150,77,155,45,167,12,1,99,120,61,207,102,121,237,232,130,62,240,57,254,78,189,119,75,250,255,31,229,253,253,151,209,255,255,33,239,239,231,68,227,185,210,153,219,123,177,252,127,166,159,131,30,127,138,126,255,119,209,103,127,27,253,255,79,213,191,255,37,250,253,159,163,255,255,78,250,158,223,246,127,162,207,255,59,175,237,111,64,109,126,29,250,255,239,27,105,187,67,159,141,126,83,215,246,219,244,251,83,109,247,235,201,15,110,255,127,211,99,248,224,175,195,63,191,246,255,253,127,255,95,255,247,239,254,107,156,188,57,126,242,59,209,159,191,191,126,134,54,248,155,158,244,247,6,124,125,255,215,164,127,15,0,255,215,48,121,129,191,246,175,253,53,105,180,191,38,81,110,136,191,168,217,189,223,127,231,215,248,162,152,214,85,83,157,183,233,214,171,59,233,183,159,191,126,158,202,44,164,39,213,98,85,148,244,203,195,241,222,167,227,135,247,247,198,123,7,251,251,128,247,107,209,160,255,32,162,228,95,244,127,255,223,2,203,140,193,192,254,155,208,233,175,253,127,209,24,118,237,24,254,196,95,67,62,243,199,240,71,253,26,102,12,191,14,207,241,193,175,161,99,16,94,182,99,232,242,206,215,125,46,191,230,152,127,23,30,226,111,244,7,17,39,255,73,242,251,111,252,7,253,154,246,247,223,228,15,250,181,236,239,191,233,31,244,107,219,223,127,141,63,232,215,241,126,167,239,254,163,95,83,219,252,58,191,198,127,246,39,145,188,252,218,4,131,62,255,138,96,253,103,127,18,141,241,215,145,191,209,246,63,251,147,232,179,63,200,125,246,215,80,31,238,179,95,131,63,251,191,169,47,249,236,199,152,181,127,205,255,232,215,224,239,255,179,191,72,254,254,181,248,239,95,215,254,253,235,240,223,191,158,253,251,55,224,191,127,125,111,30,49,55,61,94,252,181,34,188,248,107,125,227,188,184,247,117,230,37,198,139,102,12,6,246,236,55,163,127,126,45,240,226,159,247,107,155,49,28,254,38,242,25,240,53,99,216,167,207,158,254,26,50,134,95,135,254,125,78,63,127,95,250,255,159,199,159,253,58,156,87,131,158,249,219,126,13,147,179,115,227,250,166,248,83,109,133,133,251,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,110,122,126,244,253,143,158,247,121,46,191,102,124,250,19,148,22,251,247,126,141,223,244,47,250,53,126,141,223,243,247,244,225,121,57,1,206,15,80,204,106,243,9,244,5,231,19,126,93,142,209,127,83,142,251,255,189,95,227,215,248,139,198,146,59,248,155,36,166,151,28,192,175,249,107,124,245,39,253,58,233,127,70,240,191,250,155,126,29,78,193,81,110,129,255,230,20,204,159,36,249,0,255,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,107,46,225,15,66,14,194,244,245,107,106,95,191,174,215,23,62,251,117,189,190,52,55,225,125,46,125,245,63,151,190,92,222,226,215,226,190,126,205,78,95,191,94,167,175,95,111,160,175,95,111,160,175,95,47,218,215,175,99,251,146,92,204,111,64,127,255,223,127,146,142,249,31,194,120,145,75,80,188,248,239,95,211,229,79,248,239,95,203,229,79,248,239,95,219,203,61,224,249,255,122,254,4,143,159,63,249,157,208,233,175,21,201,229,253,90,67,185,60,201,159,28,252,26,54,151,247,179,146,43,249,186,50,233,203,158,55,239,127,82,103,222,255,164,206,188,255,73,157,121,255,147,204,188,255,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((FillSolidColour.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == FillSolidColour.cid0))
			{
				this.SetFillColour(ref value);
				return true;
			}
			return false;
		}
	}
}
