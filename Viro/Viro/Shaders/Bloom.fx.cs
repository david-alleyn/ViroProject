// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Bloom.fx
// Namespace = Viro.Shaders

namespace Viro.Shaders.Bloom
{
	
	/// <summary><para>Technique 'Bloom' generated from file 'Bloom.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 7 instruction slots used (1 texture, 6 arithmetic), 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class Bloom : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'Bloom' shader</summary>
		public Bloom()
		{
			this.preg[0] = new Microsoft.Xna.Framework.Vector4(0.6F, 0F, 0F, 0F);
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(5));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			Bloom.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			Bloom.cid0 = state.GetNameUniqueID("Threshold");
			Bloom.sid0 = state.GetNameUniqueID("TextureSampler");
			Bloom.tid0 = state.GetNameUniqueID("BaseScene");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != Bloom.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				Bloom.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				Bloom.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(Bloom.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					Bloom.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref Bloom.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((Bloom.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((Bloom.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			Bloom.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out Bloom.fx, Bloom.fxb, 7, 10);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(Bloom.vin[i]));
			index = Bloom.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'Threshold'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'float Threshold'</summary>
		public float Threshold
		{
			set
			{
				this.preg[0] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState TextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BaseScene'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BaseScene
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for texture for 'Texture BaseScene'</summary>
		static int tid0;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[1];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[1];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,152,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,204,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,5,131,0,0,1,1,131,0,0,1,10,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,14,1,180,1,0,1,0,1,14,1,200,138,0,0,1,15,1,140,135,0,0,1,3,1,0,1,0,1,15,1,8,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,220,1,0,1,0,1,14,1,216,131,0,0,1,93,134,0,0,1,14,1,244,1,0,1,0,1,14,1,240,1,0,1,0,1,15,1,60,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,16,1,0,1,0,1,15,1,12,131,0,0,1,93,134,0,0,1,15,1,40,1,0,1,0,1,15,1,36,1,0,1,0,1,15,1,124,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,80,1,0,1,0,1,15,1,76,131,0,0,1,93,134,0,0,1,15,1,104,1,0,1,0,1,15,1,100,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,160,1,16,1,42,1,17,131,0,0,1,1,1,12,131,0,0,1,148,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,84,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,48,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,108,1,0,1,32,1,0,1,255,1,0,1,76,1,31,1,0,1,1,1,2,1,0,1,108,1,108,1,160,1,1,1,0,1,0,1,201,1,15,1,128,131,0,0,1,108,1,0,1,225,1,1,149,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,160,1,16,1,42,1,17,131,0,0,1,1,1,12,131,0,0,1,148,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,84,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,48,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,108,1,0,1,32,1,0,1,255,1,0,1,76,1,31,1,0,1,1,1,2,1,0,1,108,1,108,1,160,1,1,1,0,1,0,1,201,1,15,1,128,131,0,0,1,108,1,0,1,225,1,1,149,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,160,1,16,1,42,1,17,131,0,0,1,1,1,12,131,0,0,1,148,135,0,0,1,36,131,0,0,1,192,131,0,0,1,232,139,0,0,1,152,131,0,0,1,28,131,0,0,1,139,1,255,1,255,1,3,132,0,0,1,2,131,0,0,1,28,135,0,0,1,132,131,0,0,1,68,1,0,1,2,131,0,0,1,1,133,0,0,1,76,131,0,0,1,92,131,0,0,1,108,1,0,1,3,131,0,0,1,1,133,0,0,1,116,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,84,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,1,1,16,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,48,1,3,1,0,1,0,1,34,133,0,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,200,1,1,1,0,1,0,1,4,1,108,1,108,1,0,1,32,1,0,1,255,1,0,1,76,1,31,1,0,1,1,1,2,1,0,1,108,1,108,1,160,1,1,1,0,1,0,1,201,1,15,1,128,131,0,0,1,108,1,0,1,225,1,1,150,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {228,40,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,188,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,63,75,191,195,239,67,253,240,123,171,240,189,223,243,55,145,239,254,173,13,239,253,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,159,157,231,215,255,53,56,190,155,80,160,246,219,153,56,237,175,210,56,237,155,140,35,181,159,130,250,249,245,126,163,95,67,224,254,115,218,79,208,134,98,198,102,71,250,252,205,180,157,255,252,90,244,127,132,189,221,207,13,142,24,195,111,22,249,30,127,199,222,251,49,250,255,147,50,95,206,138,229,5,254,254,117,127,141,248,251,136,103,99,239,255,134,244,255,179,101,211,102,203,41,67,192,24,94,207,179,89,94,255,26,191,22,96,1,175,228,215,144,207,241,110,234,189,91,210,255,255,40,239,239,191,140,254,255,15,121,127,63,39,250,204,61,26,253,109,244,251,63,229,253,253,39,121,241,255,111,160,191,131,62,127,138,126,255,239,81,219,127,139,254,255,167,234,223,191,156,126,255,159,232,255,191,103,164,237,111,69,159,253,102,191,169,107,59,162,223,183,232,255,127,80,164,237,27,250,236,165,215,182,164,223,231,218,238,215,147,31,220,254,255,166,199,204,203,27,252,242,107,255,223,255,247,255,245,127,239,252,26,39,111,142,159,252,78,244,231,31,251,107,200,103,104,251,59,113,171,95,35,253,195,232,159,167,250,254,175,73,255,62,167,159,191,239,175,33,180,250,181,245,179,86,97,74,126,225,175,253,107,127,77,250,230,215,36,234,14,241,169,242,212,95,251,235,252,26,191,17,181,249,53,109,59,250,248,222,239,191,243,107,124,81,76,235,170,169,206,219,116,235,213,157,244,219,207,95,63,79,101,6,211,147,106,177,42,74,250,229,225,120,239,211,241,195,251,123,227,189,131,253,253,95,227,39,136,77,126,205,95,227,55,253,139,136,58,191,135,223,207,239,242,107,240,156,255,65,132,233,159,244,187,200,16,254,36,154,152,191,232,9,163,254,155,210,231,255,25,253,253,159,253,69,191,150,251,155,254,255,107,252,197,132,207,175,69,88,225,119,254,14,191,211,103,127,48,253,255,47,250,245,244,59,250,253,15,250,117,241,222,111,240,187,240,123,248,251,255,254,191,165,95,67,107,131,199,191,198,180,254,191,136,214,187,150,214,127,226,175,33,159,225,43,67,235,63,138,254,217,225,247,127,29,230,205,3,250,255,183,127,13,43,167,150,174,93,158,255,186,207,229,215,164,183,208,242,55,250,131,136,102,74,215,223,152,198,111,126,255,77,254,160,95,203,254,254,155,254,65,191,182,253,253,215,248,131,126,29,253,253,215,101,218,185,207,169,221,127,100,62,167,49,254,71,191,166,190,251,235,208,252,252,186,76,127,204,205,87,244,221,127,246,39,209,216,127,29,249,27,239,253,103,127,18,125,246,7,185,207,254,26,234,219,125,38,115,250,127,19,14,242,217,143,241,60,255,154,255,209,175,193,223,255,103,127,145,252,253,107,241,223,191,174,253,251,215,225,191,127,61,251,247,111,192,127,255,250,244,183,240,197,175,253,31,81,219,63,201,204,46,230,207,151,171,63,0,191,252,90,17,185,250,181,126,78,229,106,239,235,204,243,38,185,250,53,68,174,254,166,1,185,250,155,134,229,234,55,192,239,158,92,253,223,113,185,250,53,156,92,49,63,252,6,2,167,75,119,131,211,207,252,102,244,207,175,5,25,251,243,126,109,67,247,195,223,68,62,243,233,190,255,155,56,186,255,58,30,221,255,60,254,236,215,225,92,232,95,70,255,255,219,126,13,147,103,117,116,255,166,228,78,237,187,133,251,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,246,243,163,254,126,244,252,232,249,255,247,115,249,1,113,242,191,199,113,242,239,249,123,250,240,188,252,134,205,123,152,60,9,226,90,147,39,161,70,156,39,249,117,53,94,70,190,226,223,163,152,120,44,121,144,191,73,242,19,146,207,248,181,126,141,175,254,164,95,39,253,207,168,175,175,254,166,95,135,211,163,148,39,225,191,127,141,191,233,215,66,28,46,185,15,239,243,191,134,62,255,107,34,159,255,223,244,249,255,205,159,107,94,228,15,226,124,152,246,245,107,106,95,191,174,215,23,62,251,117,189,190,52,207,226,125,46,125,245,63,151,190,92,14,230,215,226,190,126,205,78,95,191,94,167,175,95,111,160,175,95,111,160,175,95,47,218,215,175,99,251,146,188,210,111,64,127,255,223,127,146,142,249,31,146,220,132,205,5,241,223,191,166,203,5,241,223,191,150,203,5,241,223,191,182,230,130,126,13,206,85,185,92,16,158,31,229,130,126,248,185,32,60,126,46,104,159,233,30,201,183,254,90,67,249,86,201,5,29,252,26,54,223,250,179,146,247,249,186,250,101,72,143,120,60,252,39,117,120,248,79,234,240,240,159,212,225,225,63,41,198,195,255,79,0,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((Bloom.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Bloom.cid0))
			{
				this.Threshold = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((Bloom.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Bloom.sid0))
			{
				this.TextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture value)
		{
			if ((Bloom.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == Bloom.tid0))
			{
				this.BaseScene = value;
				return true;
			}
			return false;
		}
	}
}
