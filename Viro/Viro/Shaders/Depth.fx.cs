// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Depth.fx
// Namespace = Viro.Shaders

namespace Viro.Shaders.Depth
{
	
	/// <summary><para>Technique 'DepthMapShader' generated from file 'Depth.fx'</para><para>Vertex Shader: approximately 7 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 4 instruction slots used, 0 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class DepthMapShader : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'DepthMapShader' shader</summary>
		public DepthMapShader()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			DepthMapShader.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != DepthMapShader.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			if ((this.vreg_change == true))
			{
				DepthMapShader.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(DepthMapShader.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					DepthMapShader.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref DepthMapShader.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((DepthMapShader.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((DepthMapShader.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			DepthMapShader.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out DepthMapShader.fx, DepthMapShader.fxb, 9, 6);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return this.vreg_change;
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 1;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(DepthMapShader.vin[i]));
			index = DepthMapShader.vin[(i + 1)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,60,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,5,1,0,0,14,8,135,0,1,216,131,0,1,4,131,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,112,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,3,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,138,0,0,1,14,1,20,1,0,1,0,1,14,1,48,138,0,0,1,15,1,48,135,0,0,1,3,1,0,1,0,1,14,1,172,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,128,1,0,1,0,1,14,1,124,131,0,0,1,93,134,0,0,1,14,1,152,1,0,1,0,1,14,1,148,1,0,1,0,1,14,1,224,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,180,1,0,1,0,1,14,1,176,131,0,0,1,93,134,0,0,1,14,1,204,1,0,1,0,1,14,1,200,1,0,1,0,1,15,1,32,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,244,1,0,1,0,1,14,1,240,131,0,0,1,93,134,0,0,1,15,1,12,1,0,1,0,1,15,1,8,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,134,0,0,1,4,134,0,0,1,4,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,16,1,80,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,20,1,152,1,192,132,0,0,1,108,1,226,150,0,0,1,2,132,255,0,138,0,0,1,2,1,96,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,48,1,0,1,0,1,1,1,48,135,0,0,1,36,131,0,0,1,196,131,0,0,1,236,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,240,1,0,1,1,1,0,1,4,138,0,0,1,4,1,33,131,0,0,1,1,131,0,0,1,5,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,12,1,0,1,4,1,0,1,13,1,0,1,5,1,0,1,14,1,0,1,6,1,0,1,63,1,0,1,7,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,18,176,0,0,1,63,1,128,142,0,0,1,241,1,85,1,80,1,3,1,0,1,0,1,18,1,1,1,194,133,0,0,1,96,1,8,1,48,1,14,1,18,1,0,1,18,135,0,0,1,32,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,27,1,0,1,0,1,225,1,2,1,0,1,0,1,200,1,15,131,0,0,1,198,1,0,1,0,1,235,1,2,1,4,1,0,1,200,1,15,131,0,0,1,177,1,148,1,148,1,235,1,2,1,3,1,0,1,200,1,15,131,0,0,1,108,1,248,1,148,1,235,1,2,1,1,1,0,1,200,1,8,1,0,1,1,1,0,1,233,1,167,1,0,1,175,1,0,1,7,1,0,1,200,1,4,1,0,1,1,1,0,1,233,1,167,1,0,1,175,1,0,1,6,1,0,1,200,1,2,1,0,1,1,1,0,1,233,1,167,1,0,1,175,1,0,1,5,1,0,1,200,1,1,1,0,1,1,1,0,1,233,1,167,1,0,1,175,1,0,1,4,1,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,1,1,1,1,0,1,76,1,16,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,1,1,128,1,0,1,4,1,198,1,108,1,108,1,203,1,1,1,0,1,255,147,0,0,1,1,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,134,0,0,1,4,134,0,0,1,4,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,16,1,80,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,20,1,152,1,192,132,0,0,1,108,1,226,150,0,0,1,1,132,255,0,138,0,0,1,16,1,208,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,212,1,0,1,0,1,1,1,252,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,188,1,0,1,1,1,0,1,5,138,0,0,1,4,1,33,131,0,0,1,1,131,0,0,1,3,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,16,1,6,1,0,1,48,1,32,1,7,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,35,180,0,0,1,63,1,128,1,0,1,0,1,64,1,64,134,0,0,1,112,1,21,1,48,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,8,1,96,1,14,1,18,1,0,1,18,133,0,0,1,96,1,20,1,96,1,26,1,18,1,0,1,18,133,0,0,1,32,1,32,1,0,1,0,1,18,1,0,1,196,133,0,0,1,32,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,131,0,0,1,148,1,198,1,0,1,161,1,0,1,255,1,0,1,92,134,0,0,1,198,1,226,131,0,0,1,200,1,15,1,0,1,2,1,160,1,27,1,136,1,0,1,161,1,5,1,4,1,0,1,200,1,15,1,0,1,4,1,160,1,27,1,136,1,0,1,161,1,5,1,5,1,0,1,92,1,15,1,0,1,3,1,160,1,27,1,136,1,177,1,161,1,5,1,6,1,0,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,171,1,5,1,6,1,3,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,171,1,5,1,5,1,4,1,200,1,15,1,0,1,2,1,160,1,198,1,136,1,0,1,171,1,5,1,4,1,2,1,92,1,2,131,0,0,131,27,0,1,161,1,1,1,1,1,0,1,200,1,15,1,0,1,2,1,160,1,177,1,52,1,148,1,171,1,5,1,4,1,2,1,200,1,15,1,0,1,4,1,160,1,177,1,52,1,148,1,171,1,5,1,5,1,4,1,200,1,15,1,0,1,3,1,160,1,177,1,52,1,148,1,171,1,5,1,6,1,3,1,92,1,8,131,0,0,1,27,1,27,1,108,1,161,1,1,1,0,1,0,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,5,1,6,1,3,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,5,1,5,1,4,1,200,1,15,1,0,1,2,1,160,1,108,1,208,1,148,1,171,1,5,1,4,1,2,1,200,1,1,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,2,1,1,1,0,1,200,1,2,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,4,1,0,1,2,1,0,1,170,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,176,1,2,1,1,1,0,1,200,1,4,131,0,0,1,190,1,190,1,0,1,176,1,2,1,0,1,0,1,200,1,15,1,0,1,2,1,0,1,176,1,27,1,166,1,108,1,255,1,1,1,2,1,200,1,8,1,0,1,1,1,0,1,85,1,62,1,0,1,175,1,2,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,85,1,62,1,0,1,175,1,2,1,2,1,0,1,200,1,3,1,0,1,1,1,0,1,110,1,179,1,0,1,224,131,0,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,1,1,1,1,0,1,76,1,16,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,1,1,128,1,0,1,4,1,198,1,108,1,177,1,203,1,1,1,0,1,255,148,0,0,132,255,0,131,0,0,1,1,135,0,0,1,160,1,16,1,42,1,17,132,0,0,1,124,131,0,0,1,36,135,0,0,1,36,135,0,0,1,88,139,0,0,1,48,131,0,0,1,28,131,0,0,1,35,1,255,1,255,1,3,144,0,0,1,28,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,36,1,16,134,0,0,1,4,134,0,0,1,4,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,16,1,80,132,0,0,1,16,1,1,1,196,1,0,1,34,131,0,0,1,20,1,152,1,192,132,0,0,1,108,1,226,151,0,0,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,32,131,0,0,1,208,135,0,0,1,36,131,0,0,1,196,131,0,0,1,236,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,144,1,0,1,1,1,0,1,1,138,0,0,1,4,1,33,131,0,0,1,1,131,0,0,1,1,131,0,0,1,1,1,0,1,0,1,2,1,144,131,0,0,1,3,1,0,1,0,1,16,1,80,1,0,1,0,1,16,1,10,176,0,0,1,63,1,128,142,0,0,1,16,1,1,1,16,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,80,1,4,1,0,1,0,1,18,1,0,1,196,133,0,0,1,32,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,8,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,0,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,0,1,2,1,0,1,200,1,2,1,0,1,1,1,0,1,167,1,167,1,0,1,175,1,0,1,1,1,0,1,200,1,1,1,0,1,1,1,0,1,167,1,167,1,0,1,175,131,0,0,1,200,1,15,1,128,1,62,132,0,0,1,226,1,1,1,1,1,0,1,76,1,16,133,0,0,1,27,1,226,1,0,1,0,1,1,1,200,1,1,1,128,1,0,1,4,1,198,1,108,1,108,1,203,1,1,1,0,1,255,139,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {208,38,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,207,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,223,224,55,145,239,254,173,95,227,155,235,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,220,238,249,245,127,13,142,211,38,20,168,253,90,38,78,91,105,156,246,77,198,131,218,79,129,128,16,240,126,179,95,67,96,251,207,175,69,255,71,104,218,253,220,244,15,252,126,179,200,247,248,59,246,222,143,209,255,159,148,249,114,86,44,47,126,141,121,249,107,253,186,3,239,35,86,141,189,255,27,210,255,207,150,77,155,45,167,128,192,99,120,61,207,102,121,237,98,90,244,129,207,241,110,234,189,91,210,255,255,40,239,239,223,138,104,186,163,116,197,179,239,197,224,127,157,126,142,241,255,41,250,253,31,68,159,253,12,253,255,79,213,191,255,44,250,253,79,163,255,255,103,145,182,127,23,125,246,183,121,109,255,37,250,253,159,163,255,255,110,218,135,223,246,127,163,207,127,185,215,246,55,163,54,191,145,182,251,245,228,7,183,255,191,233,49,116,255,139,240,207,175,253,127,255,223,255,215,255,253,219,252,26,39,111,142,159,252,78,244,231,143,235,103,218,4,79,138,207,87,205,239,127,239,247,223,249,53,190,40,166,117,213,84,231,109,186,245,234,78,250,237,231,175,159,167,66,185,244,164,90,172,138,146,126,121,56,222,251,116,252,240,254,222,120,239,96,127,255,215,248,137,95,227,215,160,233,249,77,255,34,1,245,7,253,30,6,232,239,66,232,208,23,127,16,81,251,79,250,53,129,218,111,240,107,210,239,191,134,254,254,155,208,239,191,231,95,100,176,48,120,91,140,240,193,175,253,127,17,222,187,22,239,63,241,215,144,207,48,182,223,137,27,253,26,233,31,69,255,236,112,243,95,135,231,241,128,254,255,237,95,195,242,235,95,251,107,210,44,253,154,250,221,55,241,92,126,48,141,28,125,240,252,46,60,210,223,232,15,162,239,254,36,249,253,55,254,131,126,77,251,251,111,242,7,253,90,246,247,223,244,15,250,181,237,239,191,198,31,244,235,120,191,211,119,255,145,161,245,175,249,107,252,154,255,209,175,169,237,127,157,95,227,63,251,147,232,179,95,155,224,81,155,175,232,187,255,236,79,34,58,252,58,242,55,222,251,207,104,46,254,179,63,200,125,246,215,80,127,238,179,95,131,63,251,191,169,95,249,236,199,152,229,127,205,255,232,215,224,239,255,179,191,72,254,254,181,248,239,95,87,255,254,53,127,141,223,0,112,255,160,95,223,254,253,235,240,223,191,30,253,253,235,49,94,191,38,225,241,127,255,65,130,227,111,244,31,185,254,129,247,95,3,188,254,96,250,191,229,11,204,181,207,207,127,23,254,249,181,34,252,252,107,69,249,121,239,195,230,202,127,254,160,223,195,209,251,215,252,155,126,77,29,11,253,173,191,255,122,244,251,87,127,145,252,254,27,208,239,255,183,252,254,27,128,134,255,217,31,212,29,143,129,250,39,253,102,244,207,175,5,62,255,243,126,109,51,158,195,223,68,62,67,103,134,207,247,233,179,167,191,134,32,240,235,208,191,207,233,231,239,75,255,255,243,248,179,95,135,243,114,127,25,253,255,111,251,53,76,238,238,175,253,198,121,95,109,141,133,251,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,134,158,31,125,254,163,231,235,60,151,31,16,231,254,123,28,231,254,158,191,103,55,111,243,107,72,94,129,115,12,191,38,231,21,228,119,250,130,115,18,191,46,199,254,191,41,231,11,254,61,138,215,199,146,115,248,155,36,23,32,185,131,95,243,215,248,234,79,250,117,210,255,140,224,127,245,55,253,58,18,83,255,65,242,55,199,204,127,146,228,17,252,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,174,57,136,63,8,185,11,211,215,175,169,125,253,186,94,95,248,236,215,245,250,210,60,131,247,185,244,213,255,92,250,114,249,142,95,139,251,250,53,59,125,253,122,157,190,126,189,129,190,126,189,129,190,126,189,104,95,191,142,237,203,203,35,252,73,58,230,127,8,227,253,53,92,222,133,255,254,53,59,121,151,95,187,147,119,249,181,226,121,151,127,200,229,120,92,222,229,223,163,252,133,159,69,249,255,83,222,5,143,159,119,249,3,48,176,95,43,146,95,252,181,134,242,139,146,119,57,248,53,108,126,241,103,37,199,242,33,178,252,235,12,230,23,127,141,63,8,178,236,241,209,159,212,225,163,63,201,240,145,208,240,63,251,147,126,109,143,111,144,3,244,249,19,60,101,120,231,215,80,222,161,63,116,14,126,163,127,200,208,253,255,9,0,0,255,255};
			}
		}
#endif
	}
}
