// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = DoF.fx
// Namespace = Viro.Shaders

namespace Viro.Shaders.DoF
{
	
	/// <summary><para>Technique 'PostProcessDOF' generated from file 'DoF.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 12 instruction slots used (3 texture, 9 arithmetic), 2 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class PostProcessDOF : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'PostProcessDOF' shader</summary>
		public PostProcessDOF()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(5));
			this.pts[2] = ((Xen.Graphics.TextureSamplerState)(5));
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(5));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			PostProcessDOF.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			PostProcessDOF.cid0 = state.GetNameUniqueID("Distance");
			PostProcessDOF.cid1 = state.GetNameUniqueID("Far");
			PostProcessDOF.sid0 = state.GetNameUniqueID("BlurSceneSampler");
			PostProcessDOF.sid1 = state.GetNameUniqueID("DepthMapSampler");
			PostProcessDOF.sid2 = state.GetNameUniqueID("SceneSampler");
			PostProcessDOF.tid0 = state.GetNameUniqueID("BaseScene");
			PostProcessDOF.tid1 = state.GetNameUniqueID("BlurScene");
			PostProcessDOF.tid2 = state.GetNameUniqueID("DepthMap");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != PostProcessDOF.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProjection'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				PostProcessDOF.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				PostProcessDOF.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(PostProcessDOF.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					PostProcessDOF.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref PostProcessDOF.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((PostProcessDOF.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((PostProcessDOF.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			PostProcessDOF.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out PostProcessDOF.fx, PostProcessDOF.fxb, 7, 17);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(PostProcessDOF.vin[i]));
			index = PostProcessDOF.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'Distance'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'float Distance'</summary>
		public float Distance
		{
			set
			{
				this.preg[0] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Name ID for 'Far'</summary>
		private static int cid1;
		/// <summary>Assign the shader value 'float Far'</summary>
		public float Far
		{
			set
			{
				this.preg[1] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProjection'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D BlurSceneSampler'</summary>
		public Xen.Graphics.TextureSamplerState BlurSceneSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D DepthMapSampler'</summary>
		public Xen.Graphics.TextureSamplerState DepthMapSampler
		{
			get
			{
				return this.pts[2];
			}
			set
			{
				if ((value != this.pts[2]))
				{
					this.pts[2] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D SceneSampler'</summary>
		public Xen.Graphics.TextureSamplerState SceneSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BaseScene'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BaseScene
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture BlurScene'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture BlurScene
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture DepthMap'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture DepthMap
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture)(this.ptx[2]));
			}
			set
			{
				if ((value != this.ptx[2]))
				{
					this.ptc = true;
					this.ptx[2] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D BlurSceneSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D DepthMapSampler'</summary>
		static int sid1;
		/// <summary>Name uid for sampler for 'Sampler2D SceneSampler'</summary>
		static int sid2;
		/// <summary>Name uid for texture for 'Texture BaseScene'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture BlurScene'</summary>
		static int tid1;
		/// <summary>Name uid for texture for 'Texture DepthMap'</summary>
		static int tid2;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[2];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[3];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[3];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,240,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,168,135,0,1,2,131,0,1,4,131,0,1,1,163,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,80,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,184,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,220,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,144,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,15,1,36,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,50,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,7,131,0,0,1,1,131,0,0,1,12,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,180,131,0,0,1,208,138,0,0,1,14,1,92,1,0,1,0,1,14,1,120,138,0,0,1,14,1,196,1,0,1,0,1,14,1,216,138,0,0,1,14,1,232,1,0,1,0,1,14,1,252,138,0,0,1,15,1,12,1,0,1,0,1,15,1,32,138,0,0,1,15,1,228,135,0,0,1,3,1,0,1,0,1,15,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,52,1,0,1,0,1,15,1,48,131,0,0,1,93,134,0,0,1,15,1,76,1,0,1,0,1,15,1,72,1,0,1,0,1,15,1,148,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,104,1,0,1,0,1,15,1,100,131,0,0,1,93,134,0,0,1,15,1,128,1,0,1,0,1,15,1,124,1,0,1,0,1,15,1,212,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,168,1,0,1,0,1,15,1,164,131,0,0,1,93,134,0,0,1,15,1,192,1,0,1,0,1,15,1,188,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,84,131,0,0,1,220,135,0,0,1,36,1,0,1,0,1,1,1,8,1,0,1,0,1,1,1,48,139,0,0,1,224,131,0,0,1,28,131,0,0,1,209,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,202,131,0,0,1,108,1,0,1,2,131,0,0,1,2,133,0,0,1,116,131,0,0,1,132,131,0,0,1,164,1,0,1,3,131,0,0,1,1,133,0,0,1,172,135,0,0,1,188,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,172,135,0,0,1,195,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,172,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,156,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,21,1,48,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,16,1,11,1,18,1,0,1,34,131,0,0,1,16,1,40,1,0,1,1,1,31,1,31,1,254,1,63,1,0,1,0,1,64,1,0,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,76,1,32,133,0,0,1,108,1,194,1,0,1,0,1,1,1,168,1,47,1,0,1,2,1,2,1,0,1,0,1,65,1,192,1,2,1,1,1,0,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,76,1,18,1,0,1,0,1,4,1,177,1,198,1,108,1,224,131,0,0,1,200,1,1,131,0,0,1,177,1,108,1,0,1,225,131,0,0,1,200,1,1,131,0,0,1,108,1,108,1,0,1,163,1,128,1,255,1,0,1,200,1,15,1,128,131,0,0,1,108,1,0,1,235,1,2,1,0,1,1,147,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,84,131,0,0,1,220,135,0,0,1,36,1,0,1,0,1,1,1,8,1,0,1,0,1,1,1,48,139,0,0,1,224,131,0,0,1,28,131,0,0,1,209,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,202,131,0,0,1,108,1,0,1,2,131,0,0,1,2,133,0,0,1,116,131,0,0,1,132,131,0,0,1,164,1,0,1,3,131,0,0,1,1,133,0,0,1,172,135,0,0,1,188,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,172,135,0,0,1,195,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,172,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,156,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,21,1,48,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,16,1,11,1,18,1,0,1,34,131,0,0,1,16,1,40,1,0,1,1,1,31,1,31,1,254,1,63,1,0,1,0,1,64,1,0,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,76,1,32,133,0,0,1,108,1,194,1,0,1,0,1,1,1,168,1,47,1,0,1,2,1,2,1,0,1,0,1,65,1,192,1,2,1,1,1,0,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,76,1,18,1,0,1,0,1,4,1,177,1,198,1,108,1,224,131,0,0,1,200,1,1,131,0,0,1,177,1,108,1,0,1,225,131,0,0,1,200,1,1,131,0,0,1,108,1,108,1,0,1,163,1,128,1,255,1,0,1,200,1,15,1,128,131,0,0,1,108,1,0,1,235,1,2,1,0,1,1,147,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,48,1,16,1,42,1,17,131,0,0,1,1,1,84,131,0,0,1,220,135,0,0,1,36,1,0,1,0,1,1,1,8,1,0,1,0,1,1,1,48,139,0,0,1,224,131,0,0,1,28,131,0,0,1,209,1,255,1,255,1,3,132,0,0,1,4,131,0,0,1,28,135,0,0,1,202,131,0,0,1,108,1,0,1,2,131,0,0,1,2,133,0,0,1,116,131,0,0,1,132,131,0,0,1,164,1,0,1,3,131,0,0,1,1,133,0,0,1,172,135,0,0,1,188,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,172,135,0,0,1,195,1,0,1,3,1,0,1,2,1,0,1,1,133,0,0,1,172,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,2,166,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,95,1,112,1,115,1,95,1,115,1,50,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,131,171,0,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,156,1,16,1,0,1,2,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,1,1,0,1,0,1,48,1,80,176,0,0,1,63,1,128,143,0,0,1,21,1,48,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,5,1,16,1,11,1,18,1,0,1,34,131,0,0,1,16,1,40,1,0,1,1,1,31,1,31,1,254,1,63,1,0,1,0,1,64,1,0,1,16,1,24,1,32,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,16,1,8,1,16,1,1,1,31,1,31,1,246,1,136,1,0,1,0,1,64,1,0,1,76,1,32,133,0,0,1,108,1,194,1,0,1,0,1,1,1,168,1,47,1,0,1,2,1,2,1,0,1,0,1,65,1,192,1,2,1,1,1,0,1,184,1,16,133,0,0,1,65,1,194,1,0,1,0,1,255,1,76,1,18,1,0,1,0,1,4,1,177,1,198,1,108,1,224,131,0,0,1,200,1,1,131,0,0,1,177,1,108,1,0,1,225,131,0,0,1,200,1,1,131,0,0,1,108,1,108,1,0,1,163,1,128,1,255,1,0,1,200,1,15,1,128,131,0,0,1,108,1,0,1,235,1,2,1,0,1,1,148,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {232,43,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,126,249,111,42,191,255,218,248,155,254,255,7,232,119,191,142,254,255,215,212,191,63,228,249,245,232,255,191,255,101,243,251,79,127,13,215,207,95,165,223,253,90,191,198,237,251,97,56,43,192,249,59,127,45,3,231,229,111,34,223,253,91,191,198,237,225,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,111,230,249,245,127,13,142,247,38,8,248,76,156,246,119,105,156,246,77,198,149,218,79,129,126,126,163,95,67,224,254,123,218,79,208,134,98,198,102,199,181,249,53,52,230,237,181,217,253,53,126,45,211,230,119,27,106,179,247,107,252,90,192,253,55,211,118,254,131,88,22,175,117,63,55,99,5,45,126,179,200,247,248,59,246,222,143,209,255,159,148,249,114,86,44,47,0,228,215,29,120,31,113,113,236,253,223,144,254,127,182,108,218,108,57,5,4,30,195,235,121,54,203,107,249,29,120,97,188,248,29,239,166,222,187,37,253,255,143,242,254,254,219,232,255,255,146,247,247,239,75,116,126,231,209,250,31,163,223,255,45,239,239,255,138,126,255,63,188,191,127,35,66,48,245,104,250,95,121,121,135,63,64,127,7,253,254,20,253,126,159,62,219,161,255,255,169,250,247,115,250,253,219,244,255,63,43,210,182,164,207,230,94,219,63,140,126,255,131,232,255,255,86,164,237,95,71,159,253,85,94,219,127,140,126,255,135,180,221,175,39,63,184,253,255,77,143,153,183,3,124,240,107,255,223,255,247,255,245,127,127,231,215,56,121,115,252,228,119,162,63,127,217,175,33,159,129,110,191,19,183,250,53,210,255,238,215,16,186,253,90,252,255,95,235,215,104,233,231,31,70,255,255,203,126,13,35,7,191,214,175,241,215,41,204,191,143,63,251,53,233,191,95,239,215,248,199,244,179,127,141,63,251,181,232,179,228,215,248,247,244,51,201,119,252,181,127,237,175,201,173,127,29,134,125,155,71,121,254,175,253,117,104,134,127,77,254,207,251,124,119,224,243,189,254,231,244,241,189,223,127,231,215,248,162,152,214,85,83,157,183,233,214,171,59,233,183,159,191,126,158,10,39,165,39,213,98,85,148,244,203,195,241,222,167,227,135,247,247,198,123,7,251,251,191,198,79,16,187,254,90,191,198,111,250,23,209,76,252,30,62,94,191,11,145,134,248,248,15,162,145,254,73,191,139,144,234,79,250,53,126,131,223,244,47,50,191,255,154,222,239,191,22,253,254,132,73,247,155,82,251,255,140,254,254,207,254,162,95,143,191,251,181,254,32,194,239,47,250,117,152,109,127,77,250,238,215,160,126,190,250,131,233,39,62,39,249,148,207,228,123,110,251,7,225,123,122,209,190,79,127,255,65,191,46,195,230,182,252,247,143,243,119,191,57,255,141,126,127,77,237,247,215,164,126,241,247,175,165,127,255,26,244,247,175,165,223,255,154,191,198,127,246,7,253,90,191,198,127,246,7,115,95,191,193,111,202,239,234,103,127,208,255,253,127,203,152,13,63,253,26,250,252,107,32,238,175,253,127,17,63,237,90,126,250,19,127,13,249,12,95,25,126,250,163,232,159,29,126,255,215,97,249,60,160,255,127,251,215,176,58,207,242,68,87,238,191,238,115,249,53,231,90,230,235,55,250,131,104,158,116,78,127,99,162,129,249,253,55,33,90,152,223,127,211,63,232,215,182,191,255,26,127,208,175,163,191,131,31,126,93,239,115,106,247,31,153,207,105,140,255,209,175,169,239,254,58,68,251,95,215,206,203,87,160,243,159,4,186,203,223,120,143,230,138,232,238,62,251,107,48,15,246,51,225,163,255,155,112,144,207,126,76,230,255,63,250,53,248,251,255,236,47,146,191,127,45,254,251,215,181,127,255,58,252,247,175,103,255,254,13,248,239,95,159,254,22,94,251,181,255,35,106,251,39,153,217,197,252,249,186,99,159,149,65,68,119,252,90,63,47,116,199,222,215,225,167,77,186,227,215,16,221,241,55,189,167,238,248,155,126,45,149,97,149,233,191,233,215,8,101,250,111,130,140,223,70,183,252,218,191,198,111,192,159,25,221,242,107,19,63,189,175,110,249,45,232,221,95,91,121,22,122,226,215,228,255,211,247,191,1,228,195,233,13,195,75,191,134,62,63,243,155,209,63,191,22,244,198,159,247,107,27,94,58,252,77,228,51,12,218,240,210,62,125,246,244,215,224,14,121,214,159,211,207,223,151,254,255,231,241,103,191,14,231,202,193,87,127,219,175,97,242,242,142,71,192,147,223,196,163,254,159,133,251,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,155,120,126,4,227,71,207,143,158,31,61,63,122,126,244,152,231,242,3,98,242,127,143,99,242,223,243,247,244,225,121,57,27,155,203,49,185,159,95,147,227,91,249,157,26,113,238,231,215,213,152,28,57,24,202,83,252,69,99,201,237,252,77,146,115,145,28,205,175,245,107,124,245,39,253,58,233,127,70,125,125,245,55,253,58,156,246,166,220,15,255,253,107,252,77,191,22,98,126,201,231,120,159,255,53,244,249,95,19,249,252,255,166,207,255,111,254,92,115,61,127,16,231,239,180,175,95,83,251,250,117,189,190,240,217,175,235,245,165,185,35,239,115,233,171,255,185,244,229,242,74,191,22,247,245,107,118,250,250,245,58,125,253,122,3,125,253,122,3,125,253,122,209,190,126,29,219,151,228,202,126,3,250,251,255,254,147,116,204,255,16,198,251,107,184,252,22,255,253,107,186,252,22,255,253,107,185,252,22,255,253,107,107,126,235,215,224,252,155,203,111,225,249,81,126,75,158,31,229,183,62,44,191,133,199,207,111,237,131,176,191,86,36,47,254,107,13,229,197,37,191,117,240,107,216,188,248,207,74,46,235,235,234,204,33,221,232,201,229,159,212,145,203,63,169,35,151,127,82,71,46,255,164,152,92,254,63,1,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((PostProcessDOF.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == PostProcessDOF.cid0))
			{
				this.Distance = value;
				return true;
			}
			if ((id == PostProcessDOF.cid1))
			{
				this.Far = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((PostProcessDOF.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == PostProcessDOF.sid0))
			{
				this.BlurSceneSampler = value;
				return true;
			}
			if ((id == PostProcessDOF.sid1))
			{
				this.DepthMapSampler = value;
				return true;
			}
			if ((id == PostProcessDOF.sid2))
			{
				this.SceneSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture value)
		{
			if ((PostProcessDOF.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == PostProcessDOF.tid0))
			{
				this.BaseScene = value;
				return true;
			}
			if ((id == PostProcessDOF.tid1))
			{
				this.BlurScene = value;
				return true;
			}
			if ((id == PostProcessDOF.tid2))
			{
				this.DepthMap = value;
				return true;
			}
			return false;
		}
	}
}
