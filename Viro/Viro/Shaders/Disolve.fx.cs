// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Disolve.fx
// Namespace = Viro.Shaders

namespace Viro.Shaders.Disolve
{
	
	/// <summary><para>Technique 'disolve' generated from file 'Disolve.fx'</para><para>Vertex Shader: approximately 5 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 15 instruction slots used (2 texture, 13 arithmetic), 1 register</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class disolve : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'disolve' shader</summary>
		public disolve()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
			this.pts[0] = ((Xen.Graphics.TextureSamplerState)(192));
			this.pts[1] = ((Xen.Graphics.TextureSamplerState)(197));
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			disolve.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			disolve.cid0 = state.GetNameUniqueID("alphaChange");
			disolve.sid0 = state.GetNameUniqueID("RandomNumberTextureSampler");
			disolve.sid1 = state.GetNameUniqueID("TextureSampler");
			disolve.tid0 = state.GetNameUniqueID("randomNumber");
			disolve.tid1 = state.GetNameUniqueID("displayTexture");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != disolve.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			// Assign pixel shader textures and samplers
			if ((ic | this.ptc))
			{
				state.SetPixelShaderSamplers(this.ptx, this.pts);
				this.ptc = false;
			}
			if ((this.vreg_change == true))
			{
				disolve.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				disolve.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(disolve.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					disolve.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref disolve.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((disolve.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((disolve.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			disolve.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out disolve.fx, disolve.fxb, 7, 19);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return ((this.vreg_change | this.preg_change) 
						| this.ptc);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(disolve.vin[i]));
			index = disolve.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'alphaChange'</summary>
		private static int cid0;
		/// <summary>Assign the shader value 'float alphaChange'</summary>
		public float AlphaChange
		{
			set
			{
				this.preg[0] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D RandomNumberTextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState RandomNumberTextureSampler
		{
			get
			{
				return this.pts[0];
			}
			set
			{
				if ((value != this.pts[0]))
				{
					this.pts[0] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Texture Sampler State for 'Sampler2D TextureSampler'</summary>
		public Xen.Graphics.TextureSamplerState TextureSampler
		{
			get
			{
				return this.pts[1];
			}
			set
			{
				if ((value != this.pts[1]))
				{
					this.pts[1] = value;
					this.ptc = true;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D randomNumber'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D RandomNumber
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[0]));
			}
			set
			{
				if ((value != this.ptx[0]))
				{
					this.ptc = true;
					this.ptx[0] = value;
				}
			}
		}
		/// <summary>Get/Set the Bound texture for 'Texture2D displayTexture'</summary>
		public Microsoft.Xna.Framework.Graphics.Texture2D DisplayTexture
		{
			get
			{
				return ((Microsoft.Xna.Framework.Graphics.Texture2D)(this.ptx[1]));
			}
			set
			{
				if ((value != this.ptx[1]))
				{
					this.ptc = true;
					this.ptx[1] = value;
				}
			}
		}
		/// <summary>Name uid for sampler for 'Sampler2D RandomNumberTextureSampler'</summary>
		static int sid0;
		/// <summary>Name uid for sampler for 'Sampler2D TextureSampler'</summary>
		static int sid1;
		/// <summary>Name uid for texture for 'Texture2D randomNumber'</summary>
		static int tid0;
		/// <summary>Name uid for texture for 'Texture2D displayTexture'</summary>
		static int tid1;
		/// <summary>Pixel samplers/textures changed</summary>
		bool ptc;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,2,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[1];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Bound pixel textures</summary>
readonly 
		Microsoft.Xna.Framework.Graphics.Texture[] ptx = new Microsoft.Xna.Framework.Graphics.Texture[2];
		/// <summary>Bound pixel samplers</summary>
readonly 
		Xen.Graphics.TextureSamplerState[] pts = new Xen.Graphics.TextureSamplerState[2];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,188,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,152,135,0,1,1,131,0,1,4,131,0,1,1,147,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,64,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,168,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,204,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,48,133,0,0,1,12,131,0,0,1,4,1,0,1,0,1,14,1,240,143,0,0,1,7,1,95,1,112,1,115,1,95,1,115,1,49,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,6,131,0,0,1,1,131,0,0,1,11,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,164,131,0,0,1,192,138,0,0,1,14,1,76,1,0,1,0,1,14,1,104,138,0,0,1,14,1,180,1,0,1,0,1,14,1,200,138,0,0,1,14,1,216,1,0,1,0,1,14,1,236,138,0,0,1,15,1,176,135,0,0,1,3,1,0,1,0,1,15,1,44,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,131,0,0,1,14,1,252,131,0,0,1,93,134,0,0,1,15,1,24,1,0,1,0,1,15,1,20,1,0,1,0,1,15,1,96,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,52,1,0,1,0,1,15,1,48,131,0,0,1,93,134,0,0,1,15,1,76,1,0,1,0,1,15,1,72,1,0,1,0,1,15,1,160,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,116,1,0,1,0,1,15,1,112,131,0,0,1,93,134,0,0,1,15,1,140,1,0,1,0,1,15,1,136,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,2,1,16,1,16,1,42,1,17,131,0,0,1,1,1,40,131,0,0,1,232,135,0,0,1,36,131,0,0,1,220,1,0,1,0,1,1,1,4,139,0,0,1,180,131,0,0,1,28,131,0,0,1,166,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,159,131,0,0,1,88,1,0,1,2,131,0,0,1,1,133,0,0,1,96,131,0,0,1,112,131,0,0,1,128,1,0,1,3,131,0,0,1,1,133,0,0,1,136,135,0,0,1,152,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,136,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,33,1,0,1,0,1,48,1,80,180,0,0,1,63,131,0,0,1,61,1,136,1,136,1,137,133,0,0,1,5,1,32,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,4,1,48,1,10,1,16,1,0,1,34,131,0,0,1,16,1,24,1,16,1,1,1,31,1,31,1,246,1,80,1,0,1,0,1,64,1,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,76,1,36,131,0,0,1,108,1,177,1,108,1,165,1,0,1,255,1,0,1,112,134,0,0,1,198,1,226,131,0,0,1,200,1,2,1,0,1,0,1,4,1,177,1,108,1,27,1,171,1,0,1,0,1,1,1,200,132,0,0,1,108,1,177,1,0,1,121,1,255,1,0,1,0,1,168,1,16,1,0,1,0,1,24,1,0,1,0,1,192,1,194,1,0,1,0,1,255,1,20,1,4,1,0,1,0,1,28,1,177,1,108,1,177,1,224,131,0,0,1,4,1,20,1,0,1,1,1,24,1,198,1,198,1,108,1,224,1,0,1,1,1,0,1,200,1,3,1,0,1,1,1,28,1,108,1,176,1,0,1,224,1,0,1,1,1,0,1,200,1,7,1,192,1,0,1,0,1,180,1,180,1,0,1,226,1,1,1,1,148,0,0,1,2,132,255,0,138,0,0,1,1,1,240,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,228,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,228,1,0,1,1,1,0,1,5,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,6,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,0,1,80,1,4,1,0,1,12,1,0,1,5,1,0,1,13,1,0,1,6,1,0,1,14,1,0,1,7,1,0,1,47,1,0,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,17,1,245,1,85,1,96,1,3,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,9,1,32,1,15,1,18,1,0,1,18,135,0,0,1,16,1,17,1,196,1,0,1,34,131,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,1,1,0,1,27,1,0,1,0,1,225,1,3,1,1,1,0,1,200,1,15,1,0,1,1,1,0,1,198,1,0,1,0,1,235,1,3,1,5,1,1,1,200,1,15,1,0,1,1,1,0,1,177,1,148,1,148,1,235,1,3,1,4,1,1,1,200,1,15,1,0,1,1,1,0,1,108,1,248,1,148,1,235,1,3,1,2,1,1,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,1,1,7,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,150,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,2,1,16,1,16,1,42,1,17,131,0,0,1,1,1,40,131,0,0,1,232,135,0,0,1,36,131,0,0,1,220,1,0,1,0,1,1,1,4,139,0,0,1,180,131,0,0,1,28,131,0,0,1,166,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,159,131,0,0,1,88,1,0,1,2,131,0,0,1,1,133,0,0,1,96,131,0,0,1,112,131,0,0,1,128,1,0,1,3,131,0,0,1,1,133,0,0,1,136,135,0,0,1,152,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,136,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,33,1,0,1,0,1,48,1,80,180,0,0,1,63,131,0,0,1,61,1,136,1,136,1,137,133,0,0,1,5,1,32,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,4,1,48,1,10,1,16,1,0,1,34,131,0,0,1,16,1,24,1,16,1,1,1,31,1,31,1,246,1,80,1,0,1,0,1,64,1,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,76,1,36,131,0,0,1,108,1,177,1,108,1,165,1,0,1,255,1,0,1,112,134,0,0,1,198,1,226,131,0,0,1,200,1,2,1,0,1,0,1,4,1,177,1,108,1,27,1,171,1,0,1,0,1,1,1,200,132,0,0,1,108,1,177,1,0,1,121,1,255,1,0,1,0,1,168,1,16,1,0,1,0,1,24,1,0,1,0,1,192,1,194,1,0,1,0,1,255,1,20,1,4,1,0,1,0,1,28,1,177,1,108,1,177,1,224,131,0,0,1,4,1,20,1,0,1,1,1,24,1,198,1,198,1,108,1,224,1,0,1,1,1,0,1,200,1,3,1,0,1,1,1,28,1,108,1,176,1,0,1,224,1,0,1,1,1,0,1,200,1,7,1,192,1,0,1,0,1,180,1,180,1,0,1,226,1,1,1,1,148,0,0,1,1,132,255,0,138,0,0,1,16,1,200,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,216,1,0,1,0,1,1,1,240,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,176,1,0,1,1,1,0,1,7,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,4,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,80,1,6,1,0,1,0,1,16,1,7,1,0,1,32,1,32,1,8,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,34,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,34,1,0,1,0,1,34,133,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,71,132,0,0,1,5,1,248,1,32,131,0,0,1,2,1,208,132,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,1,1,255,1,0,1,92,1,8,1,0,1,1,1,0,131,27,0,1,161,1,4,1,2,1,7,1,200,1,15,1,0,1,3,1,160,1,198,1,136,1,0,1,161,1,2,1,4,1,0,1,200,1,15,1,0,1,6,1,160,1,198,1,136,1,0,1,161,1,2,1,5,1,0,1,92,1,15,1,0,1,5,1,160,1,198,1,136,1,198,1,161,1,2,1,6,1,7,1,200,1,15,1,0,1,5,1,160,1,177,1,136,1,0,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,177,1,136,1,0,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,2,1,4,1,3,1,92,1,2,1,0,1,2,1,0,1,27,1,27,1,177,1,161,1,4,1,0,1,7,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,2,1,4,1,3,1,200,1,15,1,0,1,6,1,160,1,27,1,52,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,5,1,160,1,27,1,52,1,148,1,171,1,2,1,6,1,5,1,92,1,8,1,0,1,2,1,0,1,27,1,27,1,108,1,161,1,4,1,1,1,7,1,200,1,15,1,0,1,5,1,160,1,108,1,208,1,148,1,171,1,2,1,6,1,5,1,200,1,15,1,0,1,6,1,160,1,108,1,208,1,148,1,171,1,2,1,5,1,6,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,2,1,4,1,3,1,200,1,1,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,3,1,4,1,0,1,200,1,2,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,6,1,4,1,0,1,200,1,4,1,0,1,3,1,0,1,170,1,167,1,0,1,239,1,5,1,4,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,3,1,0,1,200,1,4,1,0,1,1,1,0,1,190,1,190,1,0,1,176,1,3,1,2,1,0,1,20,1,17,1,0,1,2,1,0,1,190,1,190,1,27,1,176,1,3,1,0,1,4,1,168,1,36,1,1,1,2,1,0,1,190,1,190,1,0,1,144,1,3,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,2,1,2,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,1,1,1,1,0,1,200,1,3,1,128,1,0,1,0,1,197,1,197,1,0,1,226,151,0,0,132,255,0,131,0,0,1,1,134,0,0,1,2,1,16,1,16,1,42,1,17,131,0,0,1,1,1,40,131,0,0,1,232,135,0,0,1,36,131,0,0,1,220,1,0,1,0,1,1,1,4,139,0,0,1,180,131,0,0,1,28,131,0,0,1,166,1,255,1,255,1,3,132,0,0,1,3,131,0,0,1,28,135,0,0,1,159,131,0,0,1,88,1,0,1,2,131,0,0,1,1,133,0,0,1,96,131,0,0,1,112,131,0,0,1,128,1,0,1,3,131,0,0,1,1,133,0,0,1,136,135,0,0,1,152,1,0,1,3,1,0,1,1,1,0,1,1,133,0,0,1,136,132,0,0,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,1,150,0,0,1,95,1,112,1,115,1,95,1,115,1,48,1,0,1,171,1,0,1,4,1,0,1,12,1,0,1,1,1,0,1,1,1,0,1,1,134,0,0,1,95,1,112,1,115,1,95,1,115,1,49,1,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,8,1,33,1,0,1,1,1,0,1,1,131,0,0,1,33,1,0,1,0,1,48,1,80,180,0,0,1,63,131,0,0,1,61,1,136,1,136,1,137,133,0,0,1,5,1,32,1,2,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,4,1,48,1,10,1,16,1,0,1,34,131,0,0,1,16,1,24,1,16,1,1,1,31,1,31,1,246,1,80,1,0,1,0,1,64,1,0,1,16,1,8,1,0,1,1,1,31,1,31,1,255,1,248,1,0,1,0,1,64,1,0,1,76,1,36,131,0,0,1,108,1,177,1,108,1,165,1,0,1,255,1,0,1,112,134,0,0,1,198,1,226,131,0,0,1,200,1,2,1,0,1,0,1,4,1,177,1,108,1,27,1,171,1,0,1,0,1,1,1,200,132,0,0,1,108,1,177,1,0,1,121,1,255,1,0,1,0,1,168,1,16,1,0,1,0,1,24,1,0,1,0,1,192,1,194,1,0,1,0,1,255,1,20,1,4,1,0,1,0,1,28,1,177,1,108,1,177,1,224,131,0,0,1,4,1,20,1,0,1,1,1,24,1,198,1,198,1,108,1,224,1,0,1,1,1,0,1,200,1,3,1,0,1,1,1,28,1,108,1,176,1,0,1,224,1,0,1,1,1,0,1,200,1,7,1,192,1,0,1,0,1,180,1,180,1,0,1,226,1,1,1,1,149,0,0,132,255,0,138,0,0,1,1,1,128,1,16,1,42,1,17,1,1,131,0,0,1,252,131,0,0,1,132,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,132,1,0,1,1,1,0,1,1,138,0,0,1,8,1,33,131,0,0,1,1,131,0,0,1,2,131,0,0,1,1,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,80,1,4,1,0,1,0,1,48,1,80,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,16,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,15,1,200,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,3,1,128,1,0,1,0,1,176,1,176,1,0,1,226,142,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {60,43,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,161,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,63,75,191,195,239,67,253,240,123,171,240,189,223,243,55,145,239,254,173,13,239,253,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,159,157,231,215,255,53,56,190,155,32,80,51,113,218,95,165,113,218,55,25,71,106,63,5,245,243,7,253,70,191,134,192,253,231,180,159,160,13,197,140,205,206,175,241,107,152,54,255,211,80,155,221,95,227,215,2,94,191,153,182,243,159,95,139,254,143,208,184,251,185,25,7,198,249,155,69,190,199,223,177,247,126,140,254,255,164,204,151,179,98,121,129,191,127,221,95,35,254,62,98,222,216,251,191,33,253,255,108,217,180,217,114,202,16,48,134,215,243,108,150,215,191,198,255,141,119,126,77,109,131,207,241,110,234,189,91,210,255,255,40,239,239,191,140,254,255,15,121,127,63,39,250,204,61,26,253,109,244,251,63,229,253,253,111,209,239,255,157,255,189,151,51,24,233,239,160,215,159,98,26,208,103,255,7,181,255,83,245,207,223,142,254,254,173,232,255,179,72,219,3,250,108,255,55,117,109,95,210,239,207,233,255,127,89,164,237,59,250,172,245,218,254,73,244,251,31,167,237,126,61,249,193,237,255,111,122,44,191,225,131,95,251,255,254,191,255,175,255,251,240,215,56,121,115,252,228,119,162,63,255,206,95,67,62,3,254,191,19,55,250,53,210,191,137,254,249,189,181,249,175,73,255,254,1,244,115,69,255,255,131,126,13,195,211,191,150,165,225,159,197,159,253,154,244,223,175,247,107,252,69,250,153,228,41,254,218,191,246,215,228,111,126,157,65,126,87,222,252,107,127,29,226,206,95,147,255,243,62,223,237,127,78,31,223,251,253,119,126,141,47,138,105,93,53,213,121,155,110,189,186,147,126,251,249,235,231,169,204,126,122,82,45,86,69,73,191,60,28,239,125,58,126,120,127,111,188,119,176,191,255,107,252,4,177,216,175,249,107,252,166,127,17,129,248,61,254,232,63,234,143,250,204,244,255,187,208,16,127,93,30,214,175,253,39,253,46,50,220,63,233,215,248,13,126,211,191,200,252,254,107,210,239,79,120,200,191,41,181,249,207,232,187,255,236,47,250,245,248,187,95,139,254,254,53,254,32,124,247,107,234,119,191,38,125,71,188,246,235,252,90,252,55,72,241,213,31,252,107,254,26,255,247,31,68,184,255,90,191,54,125,246,107,253,26,255,217,31,116,76,164,195,239,191,14,179,165,192,248,53,127,141,175,254,162,95,235,215,248,191,255,96,249,236,215,177,159,253,218,244,238,175,197,125,255,154,248,140,96,253,26,127,17,254,254,181,126,141,95,151,190,255,207,232,179,191,230,15,150,191,127,45,180,167,191,191,250,131,126,111,192,248,13,126,125,133,241,159,113,159,232,255,215,248,13,126,3,250,249,215,252,69,255,247,255,45,227,54,124,241,107,232,243,175,129,192,191,246,255,69,124,177,107,249,226,79,252,53,228,51,124,101,248,226,143,162,127,118,248,253,95,135,229,234,128,254,255,237,95,195,234,33,59,223,93,121,253,186,207,229,215,156,111,153,191,223,232,15,162,121,211,121,253,141,105,252,230,247,223,132,232,98,126,255,77,255,160,95,219,254,254,107,208,188,200,239,224,137,95,215,251,156,218,253,71,230,115,26,227,127,244,107,234,187,191,14,205,251,175,107,121,224,43,208,252,79,194,36,202,223,120,143,248,130,230,192,125,246,215,96,78,236,103,194,87,255,55,225,32,159,253,152,204,247,127,244,107,240,247,255,217,95,36,127,255,90,252,247,175,107,255,254,117,248,239,95,207,254,253,27,240,223,191,62,253,13,188,128,31,181,253,147,204,236,98,254,124,29,240,59,97,68,191,86,68,7,252,90,255,159,209,1,123,95,135,39,54,233,128,95,67,116,192,223,116,11,29,240,55,65,7,120,114,255,55,253,154,29,157,240,62,58,224,215,252,53,126,3,126,39,212,1,78,47,12,235,0,145,249,95,83,191,255,181,232,251,95,147,199,240,149,234,132,95,7,242,206,127,255,222,12,51,162,19,126,13,209,9,162,31,120,44,127,80,151,103,126,13,125,126,230,55,163,127,126,45,232,135,63,239,215,54,60,115,248,155,200,103,32,146,225,153,125,250,236,233,175,193,192,169,211,95,235,215,120,78,63,127,95,250,255,159,199,159,253,58,156,167,254,203,232,255,127,219,175,97,114,224,142,63,190,41,157,161,190,151,133,251,111,221,248,198,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,255,175,207,143,198,245,163,231,71,207,143,158,31,61,63,55,207,229,7,196,237,255,30,199,237,191,231,239,233,195,243,114,51,54,103,99,114,60,136,133,77,142,135,26,113,142,231,215,213,24,30,185,150,127,143,226,232,177,228,112,254,38,201,173,72,46,230,215,250,53,190,250,147,126,157,244,63,163,190,190,250,155,126,29,78,75,83,156,206,127,255,26,127,211,175,133,188,128,228,109,188,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,174,57,157,63,136,243,135,218,215,175,169,125,253,186,94,95,248,236,215,245,250,210,28,145,247,185,244,213,255,92,250,114,249,163,95,139,251,250,53,59,125,253,122,157,190,126,189,129,190,126,189,129,190,126,189,104,95,191,142,237,203,228,20,168,205,159,164,99,254,135,48,222,95,195,229,177,248,239,95,211,229,177,248,239,95,203,229,177,248,239,95,91,243,88,191,6,231,217,92,30,11,207,143,242,88,63,202,99,9,204,219,229,177,240,248,121,172,125,16,255,215,138,228,185,127,173,161,60,183,228,177,14,126,13,155,231,254,89,201,89,125,93,221,56,164,3,61,249,251,147,58,242,247,39,117,228,239,79,234,200,223,159,20,147,191,255,39,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((disolve.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == disolve.cid0))
			{
				this.AlphaChange = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader sampler of type 'TextureSamplerState' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetSamplerStateImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Xen.Graphics.TextureSamplerState value)
		{
			if ((disolve.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == disolve.sid0))
			{
				this.RandomNumberTextureSampler = value;
				return true;
			}
			if ((id == disolve.sid1))
			{
				this.TextureSampler = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader texture of type 'Texture2D' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetTextureImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, Microsoft.Xna.Framework.Graphics.Texture2D value)
		{
			if ((disolve.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == disolve.tid0))
			{
				this.RandomNumber = value;
				return true;
			}
			if ((id == disolve.tid1))
			{
				this.DisplayTexture = value;
				return true;
			}
			return false;
		}
	}
}
