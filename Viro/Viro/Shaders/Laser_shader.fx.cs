// XenFX
// Assembly = Xen.Graphics.ShaderSystem.CustomTool, Version=7.0.1.1, Culture=neutral, PublicKeyToken=e706afd07878dfca
// SourceFile = Laser_shader.fx
// Namespace = Viro.Shaders

namespace Viro.Shaders.Laser_shader
{
	
	/// <summary><para>Technique 'laserbolt_technique' generated from file 'Laser_shader.fx'</para><para>Vertex Shader: approximately 8 instruction slots used, 4 registers</para><para>Pixel Shader: approximately 9 instruction slots used, 3 registers</para></summary>
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.CodeDom.Compiler.GeneratedCodeAttribute("Xen.Graphics.ShaderSystem.CustomTool.dll", "c31205e5-3188-40cc-ae97-d91ef3da07ce")]
	public sealed class laserbolt_technique : Xen.Graphics.ShaderSystem.BaseShader
	{
		/// <summary>Construct an instance of the 'laserbolt_technique' shader</summary>
		public laserbolt_technique()
		{
			this.sc0 = -1;
			this.sc1 = -1;
			this.sc2 = -1;
		}
		/// <summary>Setup shader static values</summary><param name="state"/>
		private void gdInit(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// set the graphics ID
			laserbolt_technique.gd = state.DeviceUniqueIndex;
			this.GraphicsID = state.DeviceUniqueIndex;
			laserbolt_technique.cid0 = state.GetNameUniqueID("center_to_viewer");
			laserbolt_technique.cid1 = state.GetNameUniqueID("laser_bolt_color");
			laserbolt_technique.cid2 = state.GetNameUniqueID("pulse");
		}
		/// <summary>Bind the shader, 'ic' indicates the shader instance has changed and 'ec' indicates the extension has changed.</summary><param name="state"/><param name="ic"/><param name="ec"/><param name="ext"/>
		protected override void BeginImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, bool ic, bool ec, Xen.Graphics.ShaderSystem.ShaderExtension ext)
		{
			// if the device changed, call Warm()
			if ((state.DeviceUniqueIndex != laserbolt_technique.gd))
			{
				this.WarmShader(state);
				ic = true;
			}
			// Force updating if the instance has changed
			this.vreg_change = (this.vreg_change | ic);
			this.preg_change = (this.preg_change | ic);
			this.vbreg_change = (this.vbreg_change | ic);
			this.vireg_change = (this.vireg_change | ic);
			// Set the value for attribute 'worldViewProj'
			this.vreg_change = (this.vreg_change | state.SetWorldViewProjectionMatrix(ref this.vreg[0], ref this.vreg[1], ref this.vreg[2], ref this.vreg[3], ref this.sc0));
			if ((this.vreg_change == true))
			{
				laserbolt_technique.fx.vs_c.SetValue(this.vreg);
				this.vreg_change = false;
				ic = true;
			}
			if ((this.preg_change == true))
			{
				laserbolt_technique.fx.ps_c.SetValue(this.preg);
				this.preg_change = false;
				ic = true;
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Blending))
			{
				ic = (ic | state.SetBlendMatricesDirect(laserbolt_technique.fx.vsb_c, ref this.sc1));
			}
			if ((ext == Xen.Graphics.ShaderSystem.ShaderExtension.Instancing))
			{
				this.vireg_change = (this.vireg_change | state.SetViewProjectionMatrix(ref this.vireg[0], ref this.vireg[1], ref this.vireg[2], ref this.vireg[3], ref this.sc2));
				if ((this.vireg_change == true))
				{
					laserbolt_technique.fx.vsi_c.SetValue(this.vireg);
					this.vireg_change = false;
					ic = true;
				}
			}
			// Finally, bind the effect
			if ((ic | ec))
			{
				state.SetEffect(this, ref laserbolt_technique.fx, ext);
			}
		}
		/// <summary>Warm (Preload) the shader</summary><param name="state"/>
		protected override void WarmShader(Xen.Graphics.ShaderSystem.ShaderSystemBase state)
		{
			// Shader is already warmed
			if ((laserbolt_technique.gd == state.DeviceUniqueIndex))
			{
				return;
			}
			// Setup the shader
			if ((laserbolt_technique.gd != state.DeviceUniqueIndex))
			{
				this.gdInit(state);
			}
			laserbolt_technique.fx.Dispose();
			// Create the effect instance
			state.CreateEffect(out laserbolt_technique.fx, laserbolt_technique.fxb, 13, 9);
		}
		/// <summary>True if a shader constant has changed since the last Bind()</summary>
		protected override bool Changed()
		{
			return (this.vreg_change | this.preg_change);
		}
		/// <summary>Returns the number of vertex inputs used by this shader</summary>
		protected override int GetVertexInputCountImpl()
		{
			return 2;
		}
		/// <summary>Returns a vertex input used by this shader</summary><param name="i"/><param name="usage"/><param name="index"/>
		protected override void GetVertexInputImpl(int i, out Microsoft.Xna.Framework.Graphics.VertexElementUsage usage, out int index)
		{
			usage = ((Microsoft.Xna.Framework.Graphics.VertexElementUsage)(laserbolt_technique.vin[i]));
			index = laserbolt_technique.vin[(i + 2)];
		}
		/// <summary>Static graphics ID</summary>
		private static int gd;
		/// <summary>Static effect container instance</summary>
		private static Xen.Graphics.ShaderSystem.ShaderEffect fx;
		/// <summary/>
		private bool vreg_change;
		/// <summary/>
		private bool preg_change;
		/// <summary/>
		private bool vbreg_change;
		/// <summary/>
		private bool vireg_change;
		/// <summary>Return the supported modes for this shader</summary><param name="blendingSupport"/><param name="instancingSupport"/>
		protected override void GetExtensionSupportImpl(out bool blendingSupport, out bool instancingSupport)
		{
			blendingSupport = true;
			instancingSupport = true;
		}
		/// <summary>Name ID for 'center_to_viewer'</summary>
		private static int cid0;
		/// <summary>Set the shader value 'float3 center_to_viewer'</summary><param name="value"/>
		public void SetCenter_to_viewer(ref Microsoft.Xna.Framework.Vector3 value)
		{
			this.preg[1] = new Microsoft.Xna.Framework.Vector4(value.X, value.Y, value.Z, 0F);
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float3 center_to_viewer'</summary>
		public Microsoft.Xna.Framework.Vector3 Center_to_viewer
		{
			set
			{
				this.SetCenter_to_viewer(ref value);
			}
		}
		/// <summary>Name ID for 'laser_bolt_color'</summary>
		private static int cid1;
		/// <summary>Set the shader value 'float4 laser_bolt_color'</summary><param name="value"/>
		public void SetLaser_bolt_color(ref Microsoft.Xna.Framework.Vector4 value)
		{
			this.preg[0] = value;
			this.preg_change = true;
		}
		/// <summary>Assign the shader value 'float4 laser_bolt_color'</summary>
		public Microsoft.Xna.Framework.Vector4 Laser_bolt_color
		{
			set
			{
				this.SetLaser_bolt_color(ref value);
			}
		}
		/// <summary>Name ID for 'pulse'</summary>
		private static int cid2;
		/// <summary>Assign the shader value 'float pulse'</summary>
		public float Pulse
		{
			set
			{
				this.preg[2] = new Microsoft.Xna.Framework.Vector4(value, 0F, 0F, 0F);
				this.preg_change = true;
			}
		}
		/// <summary>Change ID for Semantic bound attribute 'worldViewProj'</summary>
		private int sc0;
		/// <summary>Change ID for Semantic bound attribute '__BLENDMATRICES__GENMATRIX'</summary>
		private int sc1;
		/// <summary>Change ID for Semantic bound attribute '__VIEWPROJECTION__GENMATRIX'</summary>
		private int sc2;
		/// <summary>array storing vertex usages, and element indices</summary>
readonly 
		private static int[] vin = new int[] {0,3,0,0};
		/// <summary>Vertex shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vreg = new Microsoft.Xna.Framework.Vector4[4];
		/// <summary>Pixel shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] preg = new Microsoft.Xna.Framework.Vector4[3];
		/// <summary>Instancing shader register storage</summary>
readonly 
		private Microsoft.Xna.Framework.Vector4[] vireg = new Microsoft.Xna.Framework.Vector4[4];
#if XBOX360
		/// <summary>Static RLE compressed shader byte code (Xbox360)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {4,188,240,11,207,131,0,1,32,152,0,8,254,255,9,1,0,0,15,148,135,0,1,3,131,0,1,1,131,0,1,96,135,0,1,4,131,0,1,4,131,0,1,1,195,0,6,6,95,118,115,95,99,134,0,1,3,131,0,1,1,131,0,1,184,135,0,1,3,131,0,1,4,131,0,1,1,179,0,0,1,6,1,95,1,112,1,115,1,95,1,99,134,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,96,135,0,0,1,216,131,0,0,1,4,131,0,0,1,1,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,153,0,0,1,7,1,95,1,118,1,115,1,98,1,95,1,99,133,0,0,1,3,131,0,0,1,1,1,0,1,0,1,14,1,200,135,0,0,1,4,131,0,0,1,4,131,0,0,1,1,195,0,0,1,7,1,95,1,118,1,115,1,105,1,95,1,99,133,0,0,1,1,131,0,0,1,16,131,0,0,1,4,143,0,0,1,2,131,0,0,1,15,131,0,0,1,4,147,0,0,1,3,131,0,0,1,16,131,0,0,1,4,143,0,0,1,4,131,0,0,1,15,131,0,0,1,4,143,0,0,1,9,1,66,1,108,1,101,1,110,1,100,1,105,1,110,1,103,135,0,0,1,5,131,0,0,1,16,131,0,0,1,4,143,0,0,1,6,131,0,0,1,15,131,0,0,1,4,143,0,0,1,11,1,73,1,110,1,115,1,116,1,97,1,110,1,99,1,105,1,110,1,103,133,0,0,1,7,1,83,1,104,1,97,1,100,1,101,1,114,133,0,0,1,4,131,0,0,1,1,131,0,0,1,9,131,0,0,1,7,131,0,0,1,4,131,0,0,1,32,139,0,0,1,108,131,0,0,1,136,139,0,0,1,196,131,0,0,1,224,138,0,0,1,14,1,108,1,0,1,0,1,14,1,136,138,0,0,1,15,1,136,135,0,0,1,3,1,0,1,0,1,15,1,4,135,0,0,1,2,131,0,0,1,92,134,0,0,1,14,1,216,1,0,1,0,1,14,1,212,131,0,0,1,93,134,0,0,1,14,1,240,1,0,1,0,1,14,1,236,1,0,1,0,1,15,1,56,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,12,1,0,1,0,1,15,1,8,131,0,0,1,93,134,0,0,1,15,1,36,1,0,1,0,1,15,1,32,1,0,1,0,1,15,1,120,135,0,0,1,2,131,0,0,1,92,134,0,0,1,15,1,76,1,0,1,0,1,15,1,72,131,0,0,1,93,134,0,0,1,15,1,100,1,0,1,0,1,15,1,96,135,0,0,1,6,135,0,0,1,2,132,255,0,131,0,0,1,1,134,0,0,1,1,1,236,1,16,1,42,1,17,131,0,0,1,1,1,4,131,0,0,1,232,135,0,0,1,36,131,0,0,1,180,131,0,0,1,220,139,0,0,1,140,131,0,0,1,28,131,0,0,1,127,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,120,131,0,0,1,48,1,0,1,2,131,0,0,1,3,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,28,1,66,1,0,1,3,1,0,1,3,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,82,176,0,0,1,63,1,128,1,0,1,0,1,61,1,76,1,204,1,205,1,50,1,0,1,217,1,89,136,0,0,1,96,1,2,1,196,1,0,1,18,133,0,0,1,80,1,8,1,0,1,0,1,34,133,0,0,1,200,1,8,131,0,0,1,198,1,177,1,0,1,160,1,129,1,255,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,131,0,0,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,34,131,0,0,1,89,1,24,1,1,1,0,1,4,1,27,1,108,1,108,1,160,1,0,1,255,1,129,1,200,1,7,1,0,1,1,1,0,1,108,1,192,1,0,1,161,1,1,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,1,1,0,1,0,1,64,1,18,1,0,1,0,1,4,1,108,1,108,1,27,1,160,1,128,1,255,1,0,1,64,1,33,131,0,0,1,108,1,198,1,177,1,161,1,0,1,255,1,128,1,56,1,18,131,0,0,1,177,1,108,1,108,1,161,1,0,1,2,1,0,1,56,1,32,133,0,0,1,177,1,226,131,0,0,1,200,1,8,1,128,1,0,1,0,1,177,1,108,1,0,1,227,150,0,0,1,2,132,255,0,138,0,0,1,2,1,84,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,28,1,0,1,0,1,1,1,56,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,1,0,1,4,1,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,105,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,134,0,0,1,1,1,56,1,0,1,17,1,0,1,5,138,0,0,1,28,1,66,131,0,0,1,1,131,0,0,1,6,131,0,0,1,4,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,4,1,0,1,0,1,48,1,5,1,0,1,12,1,0,1,6,1,0,1,13,1,0,1,7,1,0,1,14,1,0,1,8,1,0,1,47,1,0,1,9,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,82,131,0,0,1,22,131,0,0,1,23,1,0,1,0,1,16,1,24,1,0,1,0,1,16,1,21,1,245,1,85,1,96,1,4,1,0,1,0,1,18,1,3,1,194,133,0,0,1,96,1,10,1,32,1,16,1,18,1,0,1,18,135,0,0,1,96,1,18,1,196,1,0,1,18,133,0,0,1,16,1,24,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,133,0,0,1,143,132,0,0,1,5,1,248,1,32,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,64,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,48,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,80,131,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,5,1,0,1,27,1,0,1,0,1,225,1,1,1,5,1,0,1,200,1,15,1,0,1,5,1,0,1,198,1,0,1,0,1,235,1,1,1,3,1,5,1,200,1,15,1,0,1,5,1,0,1,177,1,148,1,148,1,235,1,1,1,4,1,5,1,200,1,15,1,0,1,5,1,0,1,108,1,248,1,148,1,235,1,1,1,2,1,5,1,200,1,1,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,4,1,0,1,200,1,2,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,5,1,0,1,200,1,4,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,6,1,0,1,200,1,8,1,128,1,62,1,0,1,233,1,167,1,0,1,175,1,5,1,7,1,0,1,200,1,7,1,0,1,3,1,0,1,198,1,180,1,0,1,225,1,0,1,3,1,0,1,200,1,7,131,0,0,1,177,1,180,1,192,1,235,1,0,1,4,1,3,1,200,1,7,131,0,0,1,27,1,192,1,180,1,235,1,0,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,1,1,1,1,0,1,200,1,1,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,4,1,0,1,200,1,2,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,5,1,0,1,200,1,4,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,6,148,0,0,1,1,132,255,0,131,0,0,1,1,134,0,0,1,1,1,236,1,16,1,42,1,17,131,0,0,1,1,1,4,131,0,0,1,232,135,0,0,1,36,131,0,0,1,180,131,0,0,1,220,139,0,0,1,140,131,0,0,1,28,131,0,0,1,127,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,120,131,0,0,1,48,1,0,1,2,131,0,0,1,3,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,28,1,66,1,0,1,3,1,0,1,3,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,82,176,0,0,1,63,1,128,1,0,1,0,1,61,1,76,1,204,1,205,1,50,1,0,1,217,1,89,136,0,0,1,96,1,2,1,196,1,0,1,18,133,0,0,1,80,1,8,1,0,1,0,1,34,133,0,0,1,200,1,8,131,0,0,1,198,1,177,1,0,1,160,1,129,1,255,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,131,0,0,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,34,131,0,0,1,89,1,24,1,1,1,0,1,4,1,27,1,108,1,108,1,160,1,0,1,255,1,129,1,200,1,7,1,0,1,1,1,0,1,108,1,192,1,0,1,161,1,1,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,1,1,0,1,0,1,64,1,18,1,0,1,0,1,4,1,108,1,108,1,27,1,160,1,128,1,255,1,0,1,64,1,33,131,0,0,1,108,1,198,1,177,1,161,1,0,1,255,1,128,1,56,1,18,131,0,0,1,177,1,108,1,108,1,161,1,0,1,2,1,0,1,56,1,32,133,0,0,1,177,1,226,131,0,0,1,200,1,8,1,128,1,0,1,0,1,177,1,108,1,0,1,227,150,0,0,1,1,132,255,0,138,0,0,1,17,1,32,1,16,1,42,1,17,1,1,1,0,1,0,1,14,1,232,1,0,1,0,1,2,1,56,135,0,0,1,36,1,0,1,0,1,14,1,112,1,0,1,0,1,14,1,152,138,0,0,1,14,1,72,131,0,0,1,28,1,0,1,0,1,14,1,59,1,255,1,254,1,3,132,0,0,1,2,131,0,0,1,28,134,0,0,1,14,1,52,131,0,0,1,68,1,0,1,2,131,0,0,1,4,133,0,0,1,76,131,0,0,1,92,131,0,0,1,156,1,0,1,2,1,0,1,4,1,0,1,216,133,0,0,1,164,131,0,0,1,180,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,95,1,118,1,115,1,98,1,95,1,99,1,0,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,216,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,229,0,0,156,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,0,1,252,1,0,1,16,147,0,0,1,64,1,0,1,0,1,1,1,248,1,0,1,17,1,0,1,7,138,0,0,1,28,1,66,131,0,0,1,1,131,0,0,1,4,131,0,0,1,4,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,5,1,0,1,0,1,48,1,6,1,0,1,0,1,16,1,7,1,0,1,48,1,32,1,8,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,82,131,0,0,1,38,131,0,0,1,39,1,0,1,0,1,16,1,40,1,0,1,0,1,16,1,37,176,0,0,1,64,1,64,142,0,0,1,240,1,85,1,64,1,5,1,0,1,0,1,18,1,0,1,194,133,0,0,1,96,1,9,1,96,1,15,1,18,1,0,1,18,133,0,0,1,96,1,21,1,96,1,27,1,18,1,0,1,18,133,0,0,1,16,1,33,1,0,1,0,1,18,1,0,1,196,133,0,0,1,96,1,34,1,16,1,40,1,18,1,0,1,34,131,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,1,32,131,0,0,1,14,1,136,132,0,0,1,5,1,248,1,96,131,0,0,1,2,1,208,132,0,0,1,5,1,248,132,0,0,1,6,1,136,132,0,0,1,200,1,15,1,0,1,7,1,0,1,0,1,108,1,0,1,161,1,0,1,255,1,0,1,92,1,8,1,0,1,5,1,0,131,27,0,1,161,1,1,1,2,1,7,1,200,1,15,1,0,1,4,1,160,1,198,1,136,1,0,1,161,1,6,1,4,1,0,1,200,1,15,1,0,1,0,1,160,1,198,1,136,1,0,1,161,1,6,1,5,1,0,1,92,1,15,1,0,1,3,1,160,1,198,1,136,1,198,1,161,1,6,1,6,1,7,1,200,1,15,1,0,1,3,1,160,1,177,1,136,1,0,1,171,1,6,1,6,1,3,1,200,1,15,1,0,1,0,1,160,1,177,1,136,1,0,1,171,1,6,1,5,1,0,1,200,1,15,1,0,1,4,1,160,1,177,1,136,1,0,1,171,1,6,1,4,1,4,1,92,1,2,1,0,1,6,1,0,1,27,1,27,1,177,1,161,1,1,1,0,1,7,1,200,1,15,1,0,1,4,1,160,1,27,1,52,1,148,1,171,1,6,1,4,1,4,1,200,1,15,1,0,1,0,1,160,1,27,1,52,1,148,1,171,1,6,1,5,1,0,1,200,1,15,1,0,1,3,1,160,1,27,1,52,1,148,1,171,1,6,1,6,1,3,1,92,1,8,1,0,1,6,1,0,1,27,1,27,1,108,1,161,1,1,1,1,1,7,1,200,1,15,1,0,1,3,1,160,1,108,1,208,1,148,1,171,1,6,1,6,1,3,1,200,1,15,1,0,1,0,1,160,1,108,1,255,1,143,1,171,1,6,1,5,1,0,1,200,1,15,1,0,1,4,1,160,1,108,1,208,1,148,1,171,1,6,1,4,1,4,1,200,1,1,1,0,1,7,1,0,1,170,1,167,1,0,1,239,1,4,1,1,1,0,1,200,1,2,1,0,1,7,1,0,1,248,1,167,1,0,1,239,1,0,1,1,1,0,1,200,1,4,1,0,1,7,1,0,1,170,1,167,1,0,1,239,1,3,1,1,1,0,1,200,1,1,1,0,1,5,1,0,1,190,1,190,1,0,1,176,1,7,1,3,1,0,1,200,1,4,1,0,1,5,1,0,1,190,1,190,1,0,1,176,1,7,1,2,1,0,1,20,1,17,1,0,1,6,1,0,1,190,1,190,1,27,1,176,1,7,1,0,1,1,1,168,1,36,1,5,1,6,1,0,1,190,1,190,1,0,1,144,1,7,1,1,1,3,1,200,1,3,1,128,1,62,1,0,1,196,1,25,1,0,1,224,1,6,1,6,1,0,1,200,1,12,1,128,1,62,1,0,1,70,1,155,1,0,1,224,1,5,1,5,1,0,1,200,1,1,131,0,0,1,191,1,190,1,0,1,240,1,4,1,2,1,0,1,200,1,2,131,0,0,1,195,1,190,1,0,1,240,1,0,1,2,1,0,1,200,1,4,131,0,0,1,191,1,190,1,0,1,240,1,3,1,2,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,1,1,1,1,0,1,200,1,1,1,128,1,0,1,0,1,190,1,190,1,0,1,176,131,0,0,1,200,1,2,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,2,149,0,0,132,255,0,131,0,0,1,1,134,0,0,1,1,1,236,1,16,1,42,1,17,131,0,0,1,1,1,4,131,0,0,1,232,135,0,0,1,36,131,0,0,1,180,131,0,0,1,220,139,0,0,1,140,131,0,0,1,28,131,0,0,1,127,1,255,1,255,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,120,131,0,0,1,48,1,0,1,2,131,0,0,1,3,133,0,0,1,56,131,0,0,1,72,1,95,1,112,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,3,182,0,0,1,112,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,1,139,0,0,1,20,1,1,1,252,1,0,1,16,147,0,0,1,64,131,0,0,1,168,1,16,1,0,1,1,132,0,0,1,4,134,0,0,1,28,1,66,1,0,1,3,1,0,1,3,131,0,0,1,1,1,0,1,0,1,112,1,80,1,0,1,0,1,241,1,82,176,0,0,1,63,1,128,1,0,1,0,1,61,1,76,1,204,1,205,1,50,1,0,1,217,1,89,136,0,0,1,96,1,2,1,196,1,0,1,18,133,0,0,1,80,1,8,1,0,1,0,1,34,133,0,0,1,200,1,8,131,0,0,1,198,1,177,1,0,1,160,1,129,1,255,1,0,1,200,1,1,1,0,1,1,1,0,1,190,1,190,1,0,1,240,131,0,0,1,200,1,7,1,128,1,0,1,0,1,192,1,192,1,0,1,34,131,0,0,1,89,1,24,1,1,1,0,1,4,1,27,1,108,1,108,1,160,1,0,1,255,1,129,1,200,1,7,1,0,1,1,1,0,1,108,1,192,1,0,1,161,1,1,1,1,1,0,1,200,1,1,131,0,0,1,190,1,190,1,0,1,240,1,1,1,0,1,0,1,64,1,18,1,0,1,0,1,4,1,108,1,108,1,27,1,160,1,128,1,255,1,0,1,64,1,33,131,0,0,1,108,1,198,1,177,1,161,1,0,1,255,1,128,1,56,1,18,131,0,0,1,177,1,108,1,108,1,161,1,0,1,2,1,0,1,56,1,32,133,0,0,1,177,1,226,131,0,0,1,200,1,8,1,128,1,0,1,0,1,177,1,108,1,0,1,227,151,0,0,132,255,0,138,0,0,1,1,1,180,1,16,1,42,1,17,1,1,1,0,1,0,1,1,1,12,131,0,0,1,168,135,0,0,1,36,135,0,0,1,196,139,0,0,1,156,131,0,0,1,28,131,0,0,1,143,1,255,1,254,1,3,132,0,0,1,1,131,0,0,1,28,135,0,0,1,136,131,0,0,1,48,1,0,1,2,131,0,0,1,4,133,0,0,1,56,131,0,0,1,72,1,95,1,118,1,115,1,95,1,99,1,0,1,171,1,171,1,0,1,1,1,0,1,3,1,0,1,1,1,0,1,4,1,0,1,4,198,0,0,1,118,1,115,1,95,1,51,1,95,1,48,1,0,1,50,1,46,1,48,1,46,1,49,1,49,1,54,1,50,1,54,1,46,1,48,1,0,1,171,135,0,0,1,168,1,0,1,17,1,0,1,1,138,0,0,1,28,1,66,131,0,0,1,1,131,0,0,1,2,131,0,0,1,4,1,0,1,0,1,2,1,144,1,0,1,16,1,0,1,3,1,0,1,48,1,48,1,4,1,0,1,0,1,112,1,80,1,0,1,3,1,241,1,82,131,0,0,1,10,131,0,0,1,11,1,0,1,0,1,16,1,12,1,0,1,0,1,16,1,9,1,48,1,5,1,32,1,3,1,0,1,0,1,18,1,0,1,194,133,0,0,1,64,1,5,1,0,1,0,1,18,1,0,1,196,133,0,0,1,64,1,9,1,0,1,0,1,34,133,0,0,1,5,1,248,1,16,131,0,0,1,6,1,136,132,0,0,1,5,1,248,132,0,0,1,14,1,136,132,0,0,1,200,1,1,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,0,1,0,1,200,1,2,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,1,1,0,1,200,1,4,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,2,1,0,1,200,1,8,1,128,1,62,1,0,1,167,1,167,1,0,1,175,1,1,1,3,1,0,1,200,1,15,1,128,1,1,132,0,0,1,226,1,1,1,1,1,0,1,200,1,1,1,128,1,0,1,0,1,190,1,190,1,0,1,176,131,0,0,1,200,1,2,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,1,1,0,1,200,1,4,1,128,1,0,1,0,1,190,1,190,1,0,1,176,1,0,1,2,140,0,0,1,0};
			}
		}
#else
		/// <summary>Static Length+DeflateStream compressed shader byte code (Windows)</summary>
		private static byte[] fxb
		{
			get
			{
				return new byte[] {224,41,0,0,236,189,7,96,28,73,150,37,38,47,109,202,123,127,74,245,74,215,224,116,161,8,128,96,19,36,216,144,64,16,236,193,136,205,230,146,236,29,105,71,35,41,171,42,129,202,101,86,101,93,102,22,64,204,237,157,188,247,222,123,239,189,247,222,123,239,189,247,186,59,157,78,39,247,223,255,63,92,102,100,1,108,246,206,74,218,201,158,33,128,170,200,31,63,126,124,31,63,34,254,197,223,240,127,250,251,210,95,99,248,249,53,127,236,255,254,191,254,172,223,84,126,255,181,241,55,253,255,15,208,239,126,29,253,255,175,169,127,127,200,243,235,209,255,127,255,203,230,247,159,254,26,174,159,191,75,191,195,223,95,183,31,134,187,10,225,254,1,191,137,124,247,111,253,26,95,31,238,143,158,31,61,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,126,244,252,232,249,122,207,175,255,107,112,252,55,161,64,237,183,49,113,218,63,165,113,218,55,25,103,106,63,5,245,243,59,0,222,111,246,107,8,108,255,249,181,232,255,8,121,187,159,155,254,129,223,111,22,249,30,127,199,222,251,49,250,255,147,50,95,206,138,229,5,128,252,186,3,239,35,86,141,189,255,27,210,255,207,150,77,155,45,167,128,192,99,120,61,207,102,121,253,107,252,14,134,46,232,3,159,227,239,212,123,183,164,255,255,81,222,223,255,24,253,255,63,242,191,39,26,255,81,74,103,60,127,156,23,235,255,58,250,59,232,241,167,232,247,255,22,181,253,215,232,255,127,170,254,253,63,209,239,255,29,253,255,113,164,237,111,70,159,253,70,191,169,107,187,69,191,255,110,244,255,159,137,180,125,73,159,61,247,218,206,233,247,153,182,251,245,228,7,183,255,191,233,49,243,240,20,191,252,218,255,247,255,253,127,253,223,219,191,198,201,155,227,39,191,19,253,249,7,254,26,242,25,190,250,157,184,213,175,145,190,163,127,118,244,253,95,155,254,61,160,159,223,254,53,76,94,224,175,253,107,127,77,250,244,215,36,202,97,204,95,231,33,48,247,126,255,157,95,227,139,98,90,87,77,117,222,166,91,175,238,164,223,126,254,250,121,42,179,148,158,84,139,85,81,210,47,15,199,123,159,142,31,222,223,27,239,29,236,239,255,26,63,65,172,240,107,255,26,191,233,95,244,107,252,26,127,208,239,225,195,251,93,8,85,226,145,63,136,102,244,79,250,221,24,237,95,159,126,255,207,254,164,223,128,167,229,215,252,131,126,205,95,227,63,163,119,254,179,63,232,215,210,191,233,149,63,142,126,249,139,126,83,110,203,127,255,65,191,174,251,14,237,254,162,223,4,223,253,6,191,29,255,253,107,242,239,12,243,47,250,191,255,111,233,211,208,214,224,240,134,137,245,127,17,109,119,45,109,255,196,95,67,62,243,105,251,71,253,26,134,182,191,14,243,222,193,175,161,180,21,25,179,180,237,242,244,215,125,46,191,38,173,127,23,30,226,111,244,7,145,132,253,73,242,251,111,76,116,48,191,255,38,68,35,243,251,111,250,7,253,218,246,247,95,227,15,250,117,244,247,95,155,105,234,62,167,118,255,145,153,167,95,243,215,248,245,245,247,95,11,112,254,163,95,83,225,252,58,52,103,152,7,234,135,218,127,133,121,251,147,136,14,191,142,252,13,24,255,217,159,68,159,253,65,238,179,191,134,222,119,159,253,26,252,217,255,77,248,200,103,63,38,115,250,31,253,26,252,253,127,246,23,201,223,191,22,255,253,235,218,191,127,29,254,251,215,179,127,255,6,252,247,175,79,127,11,94,191,62,218,42,94,224,1,135,23,105,26,197,235,47,163,254,254,50,197,1,109,4,175,95,227,215,248,229,127,208,111,192,239,57,28,228,111,135,131,252,237,112,64,159,160,9,104,97,184,11,252,243,35,57,254,217,145,99,67,91,139,196,111,254,107,168,28,255,121,191,182,161,237,225,111,34,159,129,142,134,182,251,244,217,211,95,67,104,251,235,208,191,207,233,231,239,75,255,255,243,248,179,95,135,115,165,127,25,253,255,111,251,53,76,158,214,209,251,155,146,109,181,255,22,238,191,117,227,27,63,122,126,244,252,232,249,209,243,163,231,71,207,143,158,31,61,63,122,222,247,249,81,251,31,61,63,122,126,244,108,122,190,110,206,5,113,241,191,199,113,241,239,249,123,250,240,188,28,138,205,173,152,92,204,175,201,113,174,252,78,141,130,92,204,166,156,139,196,201,191,233,31,244,239,81,140,140,124,201,88,114,48,127,147,228,37,36,151,242,107,253,26,95,253,73,191,78,138,152,251,171,191,233,215,225,52,44,229,104,248,239,95,227,111,162,198,127,146,228,52,252,207,255,26,250,252,175,137,124,254,127,211,231,255,55,127,142,28,203,175,201,241,249,127,198,127,255,6,46,182,255,147,76,223,191,150,246,253,235,122,125,227,179,95,215,235,251,215,210,62,220,231,210,119,255,115,233,251,215,178,125,255,90,220,247,175,101,251,254,181,184,239,95,171,211,247,175,215,233,251,215,27,232,251,215,27,232,251,215,139,246,253,235,116,250,254,117,108,223,191,38,207,229,111,64,223,255,223,127,146,201,91,33,135,133,92,133,201,91,253,154,220,206,229,173,240,247,175,229,229,173,240,247,175,109,115,74,146,115,250,53,236,223,146,115,250,53,237,223,146,115,194,251,38,231,4,220,188,76,200,143,114,78,63,75,57,39,60,126,206,233,143,98,218,190,79,238,88,114,78,7,191,134,205,29,255,172,228,151,190,174,30,219,164,175,244,243,65,189,100,120,95,245,131,159,179,253,147,124,222,87,57,242,115,182,127,146,207,251,170,79,44,239,255,154,250,190,252,205,178,243,39,197,120,255,255,9,0,0,255,255};
			}
		}
#endif
		/// <summary>Set a shader attribute of type 'Single' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, float value)
		{
			if ((laserbolt_technique.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == laserbolt_technique.cid2))
			{
				this.Pulse = value;
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector3' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector3 value)
		{
			if ((laserbolt_technique.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == laserbolt_technique.cid0))
			{
				this.SetCenter_to_viewer(ref value);
				return true;
			}
			return false;
		}
		/// <summary>Set a shader attribute of type 'Vector4' by global unique ID, see <see cref="Xen.Graphics.ShaderSystem.ShaderSystemBase.GetNameUniqueID"/> for details.</summary><param name="state"/><param name="id"/><param name="value"/>
		protected override bool SetAttributeImpl(Xen.Graphics.ShaderSystem.ShaderSystemBase state, int id, ref Microsoft.Xna.Framework.Vector4 value)
		{
			if ((laserbolt_technique.gd != state.DeviceUniqueIndex))
			{
				this.WarmShader(state);
			}
			if ((id == laserbolt_technique.cid1))
			{
				this.SetLaser_bolt_color(ref value);
				return true;
			}
			return false;
		}
	}
}
